[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/ballot.js",
    "content": "/**\n * @copyright 2016-2019 David Cary;\n * @license Apache-2.0\n *\n * @module Ballot\n */\n\n\nimport K from \"./constants.js\";\n//import * as Errors from \"./errors.js\";\n\n\n/**\n * A class representing a group of ballots which share the same rankings.\n *\n * The requirements for the arguments are the same as for\n * a ballot group in the ballots argument for the meek.tabulate() function.\n * However, the arguments should already have been processesd by an appropriate\n * validation and formatting routine. In particular, rankings represented by\n * a single string should already have been reformatted to an array of\n * strings.\n */\nexport class Ballot  {\n/**\n * @param {number} [multiple=0] - The number of ballots in the group.\n * @param {array<string>} [rankings=[]] - The candidate rankings for the ballot\n * group.\n */\n  constructor (multiple=0, rankings=[]) {\n    this._multiple = multiple;\n    this._rankings = rankings;\n  }\n\n  /** Get the number of ballots in this ballot group.\n   * @return {number} The number of ballots in this ballot group.\n   */\n  getMultiple() {\n    return this._multiple;\n  }\n\n  /** Get the rankings for this ballot group.\n   * @return {array<string>} An array of strings that are the rankings for this\n   *   ballot group.\n   */\n  getRankings() {\n    return this._rankings;\n  }\n\n  /** Convert the ballot to a string.\n   * @return {string} A string in object-literal format showing the\n   *   values for this ballot. */\n  valueOf() {\n    let result = '{multiple: ' + this._multiple +\n          ', rankings: [';\n    this._rankings.forEach((ranking, rix) => {\n      result += `${rix === 0 ? \"\" : \", \"}\"${ranking}\"`;\n    });\n    result += ']}';\n    return result;\n  }\n\n  /** Convert the ballot to a string.\n   * @return {string} A string in object-literal format showing the\n   *   values for this ballot. */\n  toString() {\n    const result = this.valueOf();\n    return result;\n  }\n\n  /** Convert the ballot to an array.\n   * @return {array} A two element array, [multiple, rankings], with the values\n   *   of the corresponding properties of this ballot. */\n  asArray() {\n    const result = [this._multiple, this._rankings];\n    return result;\n  }\n\n  /** Test for equality.\n   * @param {*} other - A value to test for equality.\n   * @return {boolean} A true/false indication of whether `other` has\n   *   values corresponding to the data properties of this ballot. */\n  isEqual(other) {\n    let isEqual = true;\n    try {\n      if (!(typeof this._multiple == 'number' &&\n            typeof other._multiple == 'number' &&\n            this._multiple === other._multiple)) {\n        return false;\n      }\n      if (Array.isArray(other._rankings)) {\n        if (this._rankings.length !== other._rankings.length) {\n          return false;\n        }\n        this._rankings.some((value, ix) => {\n          if (typeof value !== 'string' || value !== other._rankings[ix]) {\n            isEqual = false;\n            return true;\n          }\n        });\n      } else {\n        return false;\n      }\n    }\n    catch (exc) {\n      console.debug('ERROR: in Ballot.isEqual, caught exception:\\n  \"'+\n            String(exc)+'\"');\n      isEqual = false;\n    }\n    return isEqual;\n  }\n\n  /** Test for inequality.\n   * @param {*} other - A value to test for inequality.\n   * @return {boolean} A true/false indication of whether `other` does not have\n   *   values corresponding to the data properties of this ballot. */\n  isNotEqual(other) {\n    const result = ! this.isEqual(other);\n    return result;\n  }\n\n}\n\n",
    "static": true,
    "longname": "/home/circ/devel/rcv/meeks-prf-js-github/src/ballot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Ballot",
    "memberof": "src/ballot.js",
    "static": true,
    "longname": "src/ballot.js~Ballot",
    "access": "public",
    "export": true,
    "importPath": "meeks-prf-js/src/ballot.js",
    "importStyle": "{Ballot}",
    "description": "A class representing a group of ballots which share the same rankings.\n\nThe requirements for the arguments are the same as for\na ballot group in the ballots argument for the meek.tabulate() function.\nHowever, the arguments should already have been processesd by an appropriate\nvalidation and formatting routine. In particular, rankings represented by\na single string should already have been reformatted to an array of\nstrings.",
    "lineNumber": 23,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ballot.js~Ballot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ballot.js~Ballot#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "multiple",
        "description": "The number of ballots in the group."
      },
      {
        "nullable": null,
        "types": [
          "array<string>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "rankings",
        "description": "The candidate rankings for the ballot\ngroup."
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "_multiple",
    "memberof": "src/ballot.js~Ballot",
    "static": false,
    "longname": "src/ballot.js~Ballot#_multiple",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "_rankings",
    "memberof": "src/ballot.js~Ballot",
    "static": false,
    "longname": "src/ballot.js~Ballot#_rankings",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "getMultiple",
    "memberof": "src/ballot.js~Ballot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ballot.js~Ballot#getMultiple",
    "access": "public",
    "description": "Get the number of ballots in this ballot group.",
    "lineNumber": 37,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The number of ballots in this ballot group."
    },
    "params": []
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "getRankings",
    "memberof": "src/ballot.js~Ballot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ballot.js~Ballot#getRankings",
    "access": "public",
    "description": "Get the rankings for this ballot group.",
    "lineNumber": 45,
    "return": {
      "nullable": null,
      "types": [
        "array<string>"
      ],
      "spread": false,
      "description": "An array of strings that are the rankings for this\n  ballot group."
    },
    "params": []
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "valueOf",
    "memberof": "src/ballot.js~Ballot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ballot.js~Ballot#valueOf",
    "access": "public",
    "description": "Convert the ballot to a string.",
    "lineNumber": 52,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A string in object-literal format showing the\n  values for this ballot."
    },
    "params": []
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "toString",
    "memberof": "src/ballot.js~Ballot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ballot.js~Ballot#toString",
    "access": "public",
    "description": "Convert the ballot to a string.",
    "lineNumber": 65,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A string in object-literal format showing the\n  values for this ballot."
    },
    "params": []
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "asArray",
    "memberof": "src/ballot.js~Ballot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ballot.js~Ballot#asArray",
    "access": "public",
    "description": "Convert the ballot to an array.",
    "lineNumber": 73,
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "A two element array, [multiple, rankings], with the values\n  of the corresponding properties of this ballot."
    },
    "params": []
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "isEqual",
    "memberof": "src/ballot.js~Ballot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ballot.js~Ballot#isEqual",
    "access": "public",
    "description": "Test for equality.",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "A value to test for equality."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A true/false indication of whether `other` has\n  values corresponding to the data properties of this ballot."
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "isNotEqual",
    "memberof": "src/ballot.js~Ballot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ballot.js~Ballot#isNotEqual",
    "access": "public",
    "description": "Test for inequality.",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "A value to test for inequality."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A true/false indication of whether `other` does not have\n  values corresponding to the data properties of this ballot."
    }
  },
  {
    "__docId__": 60,
    "kind": "file",
    "name": "src/big-integer.js",
    "content": "/**\n * @copyright 2016-2019 David Cary;\n * @license Apache-2.0\n *\n * @module big-integer\n * @summary A shim for npm big-integer package.\n * @description This module provides redirection to the big-integer.\n *   This module allows the location, name, and version of the big-intger\n *   module to change without impacting other modules.\n *\n *   When used with browsers, a customized version of the big-integer module\n *   may be needed in order to avoid conflicts with other development tools.\n *\n *   In that case, the custom version of big-integer is hosted in the same\n *   directory as this module, instead of in a standard npm node_modules\n *   directory.\n *   The customization removes features that support other of module types\n *   which are not needed by this implementation.\n */\n\nimport BigInt from 'big-integer';\nexport default BigInt;\n\n",
    "static": true,
    "longname": "/home/circ/devel/rcv/meeks-prf-js-github/src/big-integer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 61,
    "kind": "file",
    "name": "src/constants.js",
    "content": "/**\n * @copyright 2016-2019 David Cary;\n * @license Apache-2.0\n *\n * @module K\n * @summary Centrally defined constants for an Meek tabulation\n */\n\nimport {Decimal9} from './decimal9.js';\n\n/** Major, minor, patch version numbers using semantic versioning */\nconst _versionNumbers = [1, 0, 0];\n/** Major, minor, patch version as a string */\nconst _versionString = _versionNumbers.join('.');\n\n/** The ranking codes other than candidate identifiers */\nconst _ranking_code = Object.freeze({\n  undervote: '',\n  overvote: '#',\n});\n\n/** Labels and identifiers for tabulation categories other than\n * candidate identifiers */\nconst _label = Object.freeze({\n  totalCandidateVotes: ':Votes for candidates',\n  overvotes: ':Overvotes',\n  abstentions: ':Abstentions',\n  otherExhausted: ':Other exhausted',\n  totalVotes: ':Total votes',\n  protectedQuota: ':Protected quota',\n  quotaVotes: ':Quota votes',\n  quota: ':Quota',\n  totalSurplus: ':Total surplus',\n  nbrIterations: ':Iterations',\n});\n\n/** This class represents a node in a tree structured options constant\n * Each node facilitates identifying and validating values at the next\n * lower level within the tree. */\nclass _Option {\n  constructor(jsId, value, options=[], toUpper=false) {\n    this._jsId = String(jsId);\n    this._value = value;\n    this._value_set = new Set();\n    this._valueToJsId = {}\n    options.forEach(option => {\n      this[option._jsId] = option._value_set.size == 0 ?\n            option._value : option;\n      this._value_set.add(option._value);\n      this._valueToJsId[option._value] = option._jsId;\n    });\n    Object.freeze(this);\n  }\n}\n\n/** The tree-structured options constant. */\nconst _options = new _Option('option', 'options', [\n  new _Option('alternativeDefeats', 'alternative_defeats', [\n    new _Option('yes', 'Y'),\n    new _Option('never', 'N'),\n  ]),\n  new _Option('typeOfAltDefs', 'type_of_altdefs', [\n    new _Option('perRefRule', 'per_reference_rule'),\n    new _Option('beforeSingleDefeats', 'before_single_defeats'),\n    new _Option('ifNoNewElecteds', 'if_no_new_electeds'),\n  ]),\n  new _Option('alwaysCountVotes', 'always_count_votes', [\n    new _Option('yes', true),\n    new _Option('no', false),\n  ]),\n  new _Option('ballotTree', 'ballot_tree', [\n    new _Option('dynamic', 'dynamic'),\n    new _Option('static', 'static'),\n    new _Option('none', 'none'),\n  ]),\n]);\n\n/**\n * This is a data object that provides various constants that are used\n * across multiple modules.\n * Some of its values are as if the following initializations had been made:\n * \n * ~~~\n * K.Decimal = Decimal9; // the Decimal9 class\n * K.VERSION_NUMBERS = [ 1, 0, 0 ];\n * K.VERSION_STRING = '1.0.0';\n * K.ZERO = new Decimal9(0);\n * K.ONE = new Decimal9(1);\n * K.ULP = new Decimal9(0.000000001); // =  new Decimal9(1, -9);\n * K.MIN_RANKINGS_SUPPORTED = 3,\n * K.RANKING_CODE = { undervote: '', overvote: '#' },\n * K.RANKING_CODES_NOT_A_CANDIDATE = Set {['', '#']},\n * K.LABEL = {\n *   totalCandidateVotes:   ':Votes for candidates',\n *   overvotes:   ':Overvotes',\n *   abstentions:   ':Abstentions',\n *   otherExhausted:   ':Other exhausted',\n *   totalVotes:   ':Total votes',\n *   protectedQuota:   ':Protected quota',\n *   quotaVotes:   ':Quota votes',\n *   quota:   ':Quota',\n *   totalSurplus:   ':Total surplus',\n *   nbrIterations:   ':Iterations'\n * };\n * K.OTHER_LABELS_LIST = [\n *      ':Votes for candidates',\n *      ':Overvotes',\n *      ':Abstentions',\n *      ':Other exhausted',\n *      ':Total votes',\n *      ':Protected quota',\n *      ':Quota votes',\n *      ':Quota',\n *      ':Total surplus',\n *      ':Iterations'\n * ];\n * K.OPTIONS = {};\n * K.OPTIONS._value_set = Set {[\n *         'alternative_defeats',\n *         'type_of_altdefs',\n *         'always_count_votes',\n *         'ballot_tree'\n *         ]},\n * K.OPTIONS.alternativeDefeats = {\n *   _value = 'alternative_defeats',\n *   yes: 'Y',\n *   never: 'N',\n * };\n * K.OPTIONS.typeOfAltDefs = {\n *   _value: 'type_of_altdefs',\n *   perRefRule: 'per_reference_rule',\n *   beforeSingleDefeats: 'before_single_defeats',\n *   ifNoNewElecteds: 'if_no_new_electeds',\n * };\n * K.OPTIONS.alwaysCountVotes = {\n *   _value: 'always_count_votes',\n *   yes: true,\n *   'no': false,\n * };\n * K.OPTIONS.ballotTree = {\n *   _value: 'ballot_tree',\n *   'dynamic': 'dynamic',\n *   'static': 'static',\n *   'none': 'none',\n * };\n * K.STATUS = {\n *   hopeful: 'hopeful',\n *   defeated: 'defeated',\n *   elected: 'elected'\n * };\n * K.DESTINY = {\n *   normal: 'normal',\n *   excluded: 'excluded',\n *   'protected': 'protected'\n * };\n * K.ROUND = {\n *   away: 'away',\n *   truncate: 'truncate',\n *   nearest: 'nearest'\n * };\n *~~~\n */\nconst K = Object.freeze({\n  Decimal: Decimal9,\n  /** @type {array<number>} Major, minor, patch version numbers\n   * using semantic versioning */\n  VERSION_NUMBERS: _versionNumbers,\n  /** @type {string} Major, minor, patch version numbers separated by periods\n   * based on semantic versioning */\n  VERSION_STRING: _versionString,\n  ZERO: Object.freeze(new Decimal9(0)),\n  ONE: Object.freeze(new Decimal9(1)),\n  ULP: Object.freeze(Decimal9.ulp()),\n  MIN_RANKINGS_SUPPORTED: 3,\n  RANKING_CODE: _ranking_code,\n  RANKING_CODES_NOT_A_CANDIDATE: Object.freeze(new Set(\n        [_ranking_code.undervote, _ranking_code.overvote])),\n  LABEL: _label,\n  OTHER_LABELS_LIST: Object.freeze([\n    _label.totalCandidateVotes, _label.overvotes, _label.abstentions,\n    _label.otherExhausted, _label.totalVotes,\n    _label.protectedQuota, _label.quotaVotes, _label.quota,\n    _label.totalSurplus, _label.nbrIterations\n  ]),\n  OPTIONS: _options,\n  STATUS: Object.freeze({\n    hopeful: 'hopeful',\n    defeated: 'defeated',\n    elected: 'elected',\n  }),\n  DESTINY: Object.freeze({\n    normal: 'normal',\n    excluded: 'excluded',\n    protected: 'protected',\n  }),\n  ROUND: Object.freeze({\n    away: 'away',\n    truncate: 'truncate',\n    nearest: 'nearest',\n  }),\n});\n\nexport default K;\n\n",
    "static": true,
    "longname": "/home/circ/devel/rcv/meeks-prf-js-github/src/constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "name": "_versionNumbers",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~_versionNumbers",
    "access": "private",
    "export": false,
    "importPath": "meeks-prf-js/src/constants.js",
    "importStyle": null,
    "description": "Major, minor, patch version numbers using semantic versioning",
    "lineNumber": 12,
    "ignore": true,
    "type": {
      "types": [
        "number[]"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "_versionString",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~_versionString",
    "access": "private",
    "export": false,
    "importPath": "meeks-prf-js/src/constants.js",
    "importStyle": null,
    "description": "Major, minor, patch version as a string",
    "lineNumber": 14,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "_ranking_code",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~_ranking_code",
    "access": "private",
    "export": false,
    "importPath": "meeks-prf-js/src/constants.js",
    "importStyle": null,
    "description": "The ranking codes other than candidate identifiers",
    "lineNumber": 17,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "_label",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~_label",
    "access": "private",
    "export": false,
    "importPath": "meeks-prf-js/src/constants.js",
    "importStyle": null,
    "description": "Labels and identifiers for tabulation categories other than\ncandidate identifiers",
    "lineNumber": 24,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "class",
    "name": "_Option",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~_Option",
    "access": "private",
    "export": false,
    "importPath": "meeks-prf-js/src/constants.js",
    "importStyle": null,
    "description": "This class represents a node in a tree structured options constant\nEach node facilitates identifying and validating values at the next\nlower level within the tree.",
    "lineNumber": 40,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 67,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/constants.js~_Option",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/constants.js~_Option#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "_jsId",
    "memberof": "src/constants.js~_Option",
    "static": false,
    "longname": "src/constants.js~_Option#_jsId",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "_value",
    "memberof": "src/constants.js~_Option",
    "static": false,
    "longname": "src/constants.js~_Option#_value",
    "access": "private",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "_value_set",
    "memberof": "src/constants.js~_Option",
    "static": false,
    "longname": "src/constants.js~_Option#_value_set",
    "access": "private",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "_valueToJsId",
    "memberof": "src/constants.js~_Option",
    "static": false,
    "longname": "src/constants.js~_Option#_valueToJsId",
    "access": "private",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "[option._jsId]",
    "memberof": "src/constants.js~_Option",
    "static": false,
    "longname": "src/constants.js~_Option#[option._jsId]",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "name": "_options",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~_options",
    "access": "private",
    "export": false,
    "importPath": "meeks-prf-js/src/constants.js",
    "importStyle": null,
    "description": "The tree-structured options constant.",
    "lineNumber": 57,
    "ignore": true,
    "type": {
      "types": [
        "src/constants.js~_Option"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "variable",
    "name": "K",
    "memberof": "src/constants.js",
    "static": true,
    "longname": "src/constants.js~K",
    "access": "public",
    "export": true,
    "importPath": "meeks-prf-js/src/constants.js",
    "importStyle": "K",
    "description": "This is a data object that provides various constants that are used\nacross multiple modules.\nSome of its values are as if the following initializations had been made:\n\n~~~\nK.Decimal = Decimal9; // the Decimal9 class\nK.VERSION_NUMBERS = [ 1, 0, 0 ];\nK.VERSION_STRING = '1.0.0';\nK.ZERO = new Decimal9(0);\nK.ONE = new Decimal9(1);\nK.ULP = new Decimal9(0.000000001); // =  new Decimal9(1, -9);\nK.MIN_RANKINGS_SUPPORTED = 3,\nK.RANKING_CODE = { undervote: '', overvote: '#' },\nK.RANKING_CODES_NOT_A_CANDIDATE = Set {['', '#']},\nK.LABEL = {\n  totalCandidateVotes:   ':Votes for candidates',\n  overvotes:   ':Overvotes',\n  abstentions:   ':Abstentions',\n  otherExhausted:   ':Other exhausted',\n  totalVotes:   ':Total votes',\n  protectedQuota:   ':Protected quota',\n  quotaVotes:   ':Quota votes',\n  quota:   ':Quota',\n  totalSurplus:   ':Total surplus',\n  nbrIterations:   ':Iterations'\n};\nK.OTHER_LABELS_LIST = [\n     ':Votes for candidates',\n     ':Overvotes',\n     ':Abstentions',\n     ':Other exhausted',\n     ':Total votes',\n     ':Protected quota',\n     ':Quota votes',\n     ':Quota',\n     ':Total surplus',\n     ':Iterations'\n];\nK.OPTIONS = {};\nK.OPTIONS._value_set = Set {[\n        'alternative_defeats',\n        'type_of_altdefs',\n        'always_count_votes',\n        'ballot_tree'\n        ]},\nK.OPTIONS.alternativeDefeats = {\n  _value = 'alternative_defeats',\n  yes: 'Y',\n  never: 'N',\n};\nK.OPTIONS.typeOfAltDefs = {\n  _value: 'type_of_altdefs',\n  perRefRule: 'per_reference_rule',\n  beforeSingleDefeats: 'before_single_defeats',\n  ifNoNewElecteds: 'if_no_new_electeds',\n};\nK.OPTIONS.alwaysCountVotes = {\n  _value: 'always_count_votes',\n  yes: true,\n  'no': false,\n};\nK.OPTIONS.ballotTree = {\n  _value: 'ballot_tree',\n  'dynamic': 'dynamic',\n  'static': 'static',\n  'none': 'none',\n};\nK.STATUS = {\n  hopeful: 'hopeful',\n  defeated: 'defeated',\n  elected: 'elected'\n};\nK.DESTINY = {\n  normal: 'normal',\n  excluded: 'excluded',\n  'protected': 'protected'\n};\nK.ROUND = {\n  away: 'away',\n  truncate: 'truncate',\n  nearest: 'nearest'\n};\n~~~",
    "lineNumber": 163,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "src/decimal9.js",
    "content": "/**\n * @copyright 2016-2019 David Cary;\n * @license Apache-2.0\n *\n * @module Decimal9\n */\n /**\n * @summary Support for decimals with nine decimal places.\n */\n\nimport {UtilBaseError} from './util_basic.js';\nimport BigInt from './big-integer.js';\n\nconst _NBR_DECIMAL_PLACES = 9;\nconst _FACTOR = Math.pow(10, _NBR_DECIMAL_PLACES);\nconst _FACTOR_BIGINT = BigInt(_FACTOR);\n\nconst BIGINT_ONE = BigInt(1);\nconst BIGINT_MINUS_ONE = BigInt(-1);\nconst BIGINT_TWO = BigInt(2);\n\n/** An error type used with the Decimal9 class. */\nclass Decimal9Error extends UtilBaseError {\n  /** The calling convention is the same as for UtilBaseError.\n   * Initialize with a message, other values, and a prior error. */\n  constructor(message, otherValues=[], priorError=null) {\n    super(message, otherValues, priorError);\n  }\n}\n\n/** Unit of least precision.\n * @return {Decimal9} A value of the smallest positive value represented\n *   by a Decimal9 value: 1 * 10^-9 = 0.000000001. */\nfunction _ulp() {\n  const result = new Decimal9(1, -_NBR_DECIMAL_PLACES);\n  return result;\n}\n\n/** An immutable class for expressing numbers to nine decimal places.\n *\n * This is useful for counting votes in STV tabulations.\n *\n * This class provides defined behavior, relatively free from\n * external influences, providing values are kept within a safe range.\n * Internally, values are stored as integer Javascript number values.\n *\n * Values that are outside the safe range may not be relied upon\n * to provide accurate results. It is the responsibilty of code using this\n * class to ensure that values stay within the safe range.\n *\n * Multiplication and division can require greater precision in\n * intermediate results before rounding or truncation than Javascript\n * numbers can provide.\n *\n * To support the required capacity for numerical precision, the Javascript\n * numbers are converted to big integers, currently using the npm\n * big-integer package and BigInt() constructor, for performing\n * multiplication and division.\n * The results, after applicable rounding\n * (including truncation) are converted back to native Javascript numbers.\n * It is left to the application to check or otherwise ensure that the\n * resulting values can be adequately represented as safe Javascript\n * integers.\n */\nclass Decimal9 extends Object {\n  /**\n   * @param {number|Number|Decimal9|null} [value=null] - A numeric value that\n   *   the new instance should represent; if null, the result is zero.\n   * @param {number} [exponentOf10=0] - Number indicating how many powers of 10\n   *   the `value` should be be multiplied by to get the instance's true\n   *   numeric value; `exponentOf10` can be negative.\n   * @throw {Decimal9Error} If either `value` or `exponentOf10` is not a\n   *   supported value or type.\n   */\n  constructor(value=null, exponentOf10=0) {\n    super();\n    const roundedExponentOf10 = Math.round(exponentOf10);\n    if (!Number.isInteger(roundedExponentOf10)) {\n      throw new Decimal9Error('exponentOf10 is not a supported value:', [\n        ['type', typeof exponentOf10],\n        ['rounded exponentOf10', roundedExponentOf10],\n        ['exponentOf10', exponentOf10],\n      ]);\n    }\n    exponentOf10 = roundedExponentOf10;\n    if (value === null) {\n      this._valueAsInteger = 0;\n      return;\n    }\n    if (value instanceof Decimal9) {\n      if (exponentOf10 === 0) {\n        this._valueAsInteger = value._valueAsInteger;\n      } else if (exponentOf10 > 0) {\n        const multiplier = Math.pow(10, exponentOf10);\n        this._valueAsInteger = value._valueAsInteger * multiplier;\n      } else {\n        const divisor = Math.pow(10, -exponentOf10);\n        const division = _integerDivide(value._valueAsInteger, divisor);\n        this._valueAsInteger = _round(division.q, division.r,\n              division.d, 'nearest');\n      }\n      return;\n    }\n    if (typeof value == 'object' && value instanceof Number) {\n      value = Number(value);\n    }\n    if (typeof value == 'number') {\n      const adjustedExponent = exponentOf10 + _NBR_DECIMAL_PLACES;\n      const multiplier = Math.pow(10, adjustedExponent);\n      const adjustedValue = value * multiplier;\n      if (Math.trunc(value) === value) {\n        if (adjustedExponent >= 0) {\n          this._valueAsInteger = value * multiplier;\n        } else {\n          this._valueAsInteger = Math.trunc(adjustedValue);\n        }\n      } else {\n        this._valueAsInteger = Math.round(adjustedValue);\n      }\n      return;\n    } else {\n      throw new Decimal9Error('Value is not a supported type:', [\n        ['type', typeof value],\n        ['value of value', value.toString()],\n      ]);\n    }\n  }\n\n  /** Get the underlying integer value.\n   * @return {number} The underlying JavaScript integer value used to\n   *   internally represent the Decimal9 value; this may not be accurate\n   *   if the value is not a safe Javascript integer. */\n  _getValue() {\n    return this._valueAsInteger;\n  }\n\n  /** Get the Decimal9 value as a Javascript number.\n   * @return {number} A representation of the Decimal9 value as a Javascript\n   *   number. */\n  toNumber() {\n    // Get the value as a javascript number.\n    const result = this._getValue() / _FACTOR;\n    return result;\n  }\n\n  /** The max safe integer value that Decimal9 uses internally,\n   *  as a static class value.\n   *\n   * This represents a slightly smaller number than Javascript uses, since\n   * Javascript has some conversion anomalies for what it deems to be\n   * safe integers.\n   *\n   * The value is 9000100000000000 = 9,000,100,000,000,000. */\n  static get MAX_SAFE_INTEGER() { return 9000100000000000; }\n  /** The negative of Decimal9.MAX_SAFE_INTEGER. */\n  static get MIN_SAFE_INTEGER() { return -Decimal9.MAX_SAFE_INTEGER; }\n  /** The maximum value that Decimal9 deems safe to work with.\n   *\n   * The value is 9000100 = 9,000,100 , i.e. nine million one hundred. */\n  static get MAX_SAFE_VALUE() { return 9000100; }\n  /** The negative of Decimal9.MAX_SAFE_VALUE. */\n  static get MIN_SAFE_VALUE() { return -Decimal9.MAX_SAFE_VALUE; }\n\n  /** Convert the Decimal9 value to a string, showing all decimal places,\n   * even if they include trailing zeros.\n   * @return {string} A string reflecting the represented numeric value. */\n  toString() {\n    const parts = _integerDivide(new BigInt(this._valueAsInteger), _FACTOR);\n    parts.r = parts.r.toJSNumber();\n    let result = parts.q.abs().toString() + '.' +\n          Math.abs(parts.r).toString().padStart(9, '0');\n    result = result.replace(/0{1,8}$/, '');\n    parts.q = parts.q.toJSNumber();\n    if (parts.q < 0 || (parts.q === 0 && parts.r < 0)) {\n      result = '-' + result;\n    }\n    return result\n  }\n\n  /** Test whether the Decimal9 value is in the safe range.\n   * @return {boolean} A true/false indication of whether the Decimal9\n   *   value is within the safe range, endpoints included. */\n  isSafe() {\n    if (this._valueAsInteger >= Decimal9.MIN_SAFE_INTEGER &&\n          this._valueAsInteger <= Decimal9.MAX_SAFE_INTEGER) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /** Test whether this Decimal9 value is less than another one.\n   * @param {Decimal9} value - A Decimal9 instance to compare with.\n   * @return {boolean} A true/false indication of whether this numeric value\n   *   is less than the numeric value of the argument. */\n  isLess(value) {\n    _confirmTypes(value, Decimal9);\n    const result = this._valueAsInteger < value._valueAsInteger;\n    return result;\n  }\n\n  /** Test whether this Decimal9 value is less than or equal to another one.\n   * @param {Decimal9} value - A Decimal9 instance to compare with.\n   * @return {boolean} A true/false indication of whether this numeric value\n   *   is less than or equal to the numeric value of the argument. */\n  isLessEqual(value) {\n    _confirmTypes(value, Decimal9);\n    const result = this._valueAsInteger <= value._valueAsInteger;\n    return result;\n  }\n\n  /** Test whether this Decimal9 value is equal to another one.\n   * @param {Decimal9} value - A Decimal9 instance to compare with.\n   * @return {boolean} A true/false indication of whether this numeric value\n   *   is equal to the numeric value of the argument. */\n  isEqual(value) {\n    if (value === null) {\n      return false;\n    }\n    _confirmTypes(value, Decimal9);\n    /*\n    if (!(value instanceof Decimal9)) {\n      return false;\n    }\n    */\n    const result = this._valueAsInteger === value._valueAsInteger;\n    return result;\n  }\n\n  /** Test whether this Decimal9 value is not equal to another one.\n   * @param {Decimal9} value - A Decimal9 instance to compare with.\n   * @return {boolean} A true/false indication of whether this numeric value\n   *   is not equal to the numeric value of the argument. */\n  isNotEqual(value) {\n    const result = !this.isEqual(value);\n    return result;\n  }\n\n  /** Test whether this Decimal9 value is greater than or equal to another one.\n   * @param {Decimal9} value - A Decimal9 instance to compare with.\n   * @return {boolean} A true/false indication of whether this numeric value\n   *   is greater than or equal to the numeric value of the argument. */\n  isGreaterEqual(value) {\n    _confirmTypes(value, Decimal9);\n    const result = this._valueAsInteger >= value._valueAsInteger;\n    return result;\n  }\n\n  /** Test whether this Decimal9 value is greater than another one.\n   * @param {Decimal9} value - A Decimal9 instance to compare with.\n   * @return {boolean} A true/false indication of whether this numeric value\n   *   is greater than the numeric value of the argument. */\n  isGreater(value) {\n    _confirmTypes(value, Decimal9);\n    const result = this._valueAsInteger > value._valueAsInteger;\n    return result;\n  }\n\n  /** Add a value to this value, producing a new value.\n   *\n   * @param {Decimal9} value - The value to be added to this one.\n   * @return {Decimal9} The sum of this and value. */\n  plus(value) {\n    _confirmTypes(value, Decimal9);\n    const asInteger = this._valueAsInteger + value._valueAsInteger;\n    const result = new Decimal9(asInteger, -_NBR_DECIMAL_PLACES);\n    return result;\n  }\n\n  /** Subtract a value from this value, producing a new value.\n   *\n   * @param {Decimal9} value - The value to be subtracted from this one.\n   * @return {Decimal9} The difference of this minus value. */\n  minus(value) {\n    _confirmTypes(value, Decimal9);\n    const asInteger = this._valueAsInteger - value._valueAsInteger;\n    const result = new Decimal9(asInteger, -_NBR_DECIMAL_PLACES);\n    return result;\n  }\n\n  /** Arithmetically negate this value, producing a new value.\n   *\n   * @return {Decimal9} The negative of this. */\n  negative() {\n    const asInteger = -this._valueAsInteger;\n    const result = new Decimal9(asInteger, -_NBR_DECIMAL_PLACES);\n    return result;\n  }\n\n  /** Multiply this value by another value, producing a new value.\n   *\n   * @param {Decimal9|number|Number} value - The value to be multiplied by.\n   *   this one\n   * @param {string} [rounding='truncate'] - An indication of what kind of\n   *   rounding should be done.  Should be a value in K.ROUND:\n   *\n   *   - 'truncate' = Truncate any value beyond 9 decimal places.\n   *   - 'away' = Round away from zero to 9 decimal places.\n   *   - 'nearest' = Round to the nearest 9-decimal-place value,\n   *       rounding to an even digit in the 9th decimal place if there\n   *       is a tie for the nearest value.\n   * @return {Decimal9} The product of the two values, rounded as requested. */\n  times(value, rounding='truncate') {\n    _confirmTypes(value, Decimal9, 'number', Number);\n    if (!(value instanceof Decimal9)) {\n      value = new Decimal9(value);\n    }\n    const product = new BigInt(this._valueAsInteger)\n          .multiply(new BigInt(value._valueAsInteger));\n    const scaledProduct = _integerDivide(product, _FACTOR);\n    const asInteger = _round(scaledProduct.q, scaledProduct.r, _FACTOR,\n          rounding);\n    const result = new Decimal9(asInteger, -_NBR_DECIMAL_PLACES);\n    return result;\n  }\n\n  /** Divide this value by another value, producing a new value.\n   *\n   * @param {Decimal9|number|Number} value - The divisor value.\n   * @param {string} [rounding='truncate'] - An indication of what kind of\n   *   rounding should be done.  Should be a value in K.ROUND:\n   *\n   *   - 'truncate' = Truncate any value beyond 9 decimal places.\n   *   - 'away' = Round away from zero to 9 decimal places.\n   *   - 'nearest' = Round to the nearest 9-decimal-place value,\n   *       rounding to an even digit in the 9th decimal place if there\n   *       is a tie for the nearest value.\n   * @return {Decimal9} The quotient of this divided by value, after any\n   *   indicated rounding. */\n  divideBy(value, rounding='truncate') {\n    _confirmTypes(value, Decimal9, 'number', Number);\n    if (!(value instanceof Decimal9)) {\n      value = new Decimal9(Number(value));\n    }\n    if (value._valueAsInteger === 0) {\n      throw new Decimal9Error('Divide by zero.');\n    }\n    const division = _integerDivide(\n          BigInt(this._valueAsInteger).multiply(_FACTOR_BIGINT),\n          BigInt(value._valueAsInteger));\n    const asInteger = _round(division.q, division.r,\n          division.d.abs(), rounding);\n    const result = new Decimal9(asInteger, -_NBR_DECIMAL_PLACES);\n    return result;\n  }\n\n}\n\nDecimal9.ulp = _ulp;\n\n/** A mutable subclass of Decimal9 for accumulating totals.\n *\n * Totals can be accumulated through standard addition and subtraction\n * operations, `plus` and `minus`, without creating new instances.\n *\n * The constructor does not take any parameters and always initializes\n * a new instance to a zero value.\n */\nclass Decimal9Total extends Decimal9 {\n\n  constructor() {\n    super();\n    this._valueAsInteger = 0;\n  }\n\n  /** Add a value to this value, accumulating the result in this.\n   *\n   * @param {Decimal9} value - The value to be added to this one\n   * @return {Decimal9Total} This, which now carries the sum. */\n  plus(value) {\n    _confirmTypes(value, Decimal9);\n    this._valueAsInteger += value._valueAsInteger;\n    return this;\n  }\n\n  /** Subtract a value from this value, accumulating the result in this.\n   *\n   * @param {Decimal9} value - The value to be subtracted from this one\n   * @return {Decimal9Total} This, which now carries the difference. */\n  minus(value) {\n    _confirmTypes(value, Decimal9);\n    this._valueAsInteger -= value._valueAsInteger;\n    return this;\n  }\n}\n\n/** Perform big integer division.\n * @param {number|big-integer} numerator - The numerator.\n * @param {number|big-integer} denominator - The denominator.\n * @return {Object} A data object containing the quotient, remainder, and\n * denominator, all as big integers.\n */\nfunction _integerDivide(numerator, denominator) {\n  // return BigInt quotient , remainder, and denominator.\n  // first convert numerator and denominator to BigInt's as needed.\n  if (typeof numerator === 'number') {\n    numerator = BigInt(numerator);\n  }\n  if (typeof denominator === 'number') {\n    denominator = BigInt(denominator);\n  }\n  const division = numerator.divmod(denominator);\n  const result = { q: division.quotient, r: division.remainder,\n        d: denominator};\n  return result;\n}\n\n/** Round a big integer value based on its remainder, a modulus, and\n *  a rounding setting of 'truncate', 'away', or 'nearest'.\n *  @param {big-integer} asInteger - The value to round.\n *  @param {big-integer} remainder - The remainder to be rounded.\n *  @param {big-integer} modulus - Round to multiples of this value.\n *  @param {string} rounding - Values of 'truncate', 'away', or 'nearest'.\n *  @return {number} A Javascript integer appropriately rounded.\n */\nfunction _round(asInteger, remainder, modulus, rounding='truncate') {\n  // Round the value of asInteger + remainder / modulus to an integer.\n  //\n  // Return a Javascript number\n  //\n  // Give the correct answer whenever it and asInteger are safe integers.\n  //\n  // Assumptions:\n  //   asInteger, remainder, and modulus are BigInt integers.\n  //   //NOT ASSUMED: asInteger and remainder are the same sign or one of them\n  //         is zero.\n  //   //NOT ASSUMED: modulus is positive.\n  //   Twice the modulus is a safe integer.\n  //   remainder is less in absolute value than modulus.\n  //\n  // This function is only used internally, and the assumptions are not\n  // asserted.\n  if (rounding === 'away' && !remainder.isZero()) {\n    asInteger = asInteger.plus(asInteger.isZero() ?\n          (remainder.isPositive() ? BIGINT_ONE : BIGINT_MINUS_ONE) :\n          (asInteger.isPositive() ? BIGINT_ONE : BIGINT_MINUS_ONE));\n  } else if (rounding === 'nearest') {\n    const factorCompare = remainder.abs().multiply(BIGINT_TWO);\n    const modulusAbs = modulus instanceof BigInt ?\n          modulus.abs() : Math.abs(modulus);\n    if (factorCompare.gt(modulusAbs) ||\n          (factorCompare.equals(modulusAbs) && asInteger.isOdd())) {\n      asInteger = asInteger.plus(asInteger.isZero() ?\n            (remainder.isPositive() ? BIGINT_ONE : BIGINT_MINUS_ONE) :\n            (asInteger.isPositive() ? BIGINT_ONE : BIGINT_MINUS_ONE));\n    }\n  }\n  asInteger = asInteger.toJSNumber();\n  return asInteger;\n}\n\nfunction _confirmTypes(value, ...requiredTypes) {\n  /* Raise an Decimal9Error if value is not an instance of the\n  required class or of the required type.\n  */\n  for (let requiredType of requiredTypes) {\n    if ((typeof requiredType == 'string' && typeof value == requiredType) ||\n          (value === null && requiredType === null) ||\n          ((typeof requiredType == 'object' ||\n            typeof requiredType == 'function') &&\n            requiredType !== null &&\n            value instanceof requiredType)) {\n      return true;\n    }\n  }\n  throw new Decimal9Error(\n    'Value is not an instance of the required type:', [\n    ['value type', typeof value],\n    ['value', String(value)],\n    ['required types', requiredTypes.map((x) => (': ' + x).slice(2,102))],\n  ]);\n}\n\nexport { Decimal9, Decimal9Total, Decimal9Error };\n\n",
    "static": true,
    "longname": "/home/circ/devel/rcv/meeks-prf-js-github/src/decimal9.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "_NBR_DECIMAL_PLACES",
    "memberof": "src/decimal9.js",
    "static": true,
    "longname": "src/decimal9.js~_NBR_DECIMAL_PLACES",
    "access": "private",
    "export": false,
    "importPath": "meeks-prf-js/src/decimal9.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "_FACTOR",
    "memberof": "src/decimal9.js",
    "static": true,
    "longname": "src/decimal9.js~_FACTOR",
    "access": "private",
    "export": false,
    "importPath": "meeks-prf-js/src/decimal9.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "_FACTOR_BIGINT",
    "memberof": "src/decimal9.js",
    "static": true,
    "longname": "src/decimal9.js~_FACTOR_BIGINT",
    "access": "private",
    "export": false,
    "importPath": "meeks-prf-js/src/decimal9.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "BIGINT_ONE",
    "memberof": "src/decimal9.js",
    "static": true,
    "longname": "src/decimal9.js~BIGINT_ONE",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/decimal9.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "name": "BIGINT_MINUS_ONE",
    "memberof": "src/decimal9.js",
    "static": true,
    "longname": "src/decimal9.js~BIGINT_MINUS_ONE",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/decimal9.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "variable",
    "name": "BIGINT_TWO",
    "memberof": "src/decimal9.js",
    "static": true,
    "longname": "src/decimal9.js~BIGINT_TWO",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/decimal9.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "_ulp",
    "memberof": "src/decimal9.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/decimal9.js~_ulp",
    "access": "private",
    "export": false,
    "importPath": "meeks-prf-js/src/decimal9.js",
    "importStyle": null,
    "description": "Unit of least precision.",
    "lineNumber": 34,
    "return": {
      "nullable": null,
      "types": [
        "Decimal9"
      ],
      "spread": false,
      "description": "A value of the smallest positive value represented\n  by a Decimal9 value: 1 * 10^-9 = 0.000000001."
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "_integerDivide",
    "memberof": "src/decimal9.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/decimal9.js~_integerDivide",
    "access": "private",
    "export": false,
    "importPath": "meeks-prf-js/src/decimal9.js",
    "importStyle": null,
    "description": "Perform big integer division.",
    "lineNumber": 393,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "big-integer"
        ],
        "spread": false,
        "optional": false,
        "name": "numerator",
        "description": "The numerator."
      },
      {
        "nullable": null,
        "types": [
          "number",
          "big-integer"
        ],
        "spread": false,
        "optional": false,
        "name": "denominator",
        "description": "The denominator."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A data object containing the quotient, remainder, and\ndenominator, all as big integers."
    },
    "ignore": true
  },
  {
    "__docId__": 84,
    "kind": "function",
    "name": "_round",
    "memberof": "src/decimal9.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/decimal9.js~_round",
    "access": "private",
    "export": false,
    "importPath": "meeks-prf-js/src/decimal9.js",
    "importStyle": null,
    "description": "Round a big integer value based on its remainder, a modulus, and\n a rounding setting of 'truncate', 'away', or 'nearest'.",
    "lineNumber": 416,
    "params": [
      {
        "nullable": null,
        "types": [
          "big-integer"
        ],
        "spread": false,
        "optional": false,
        "name": "asInteger",
        "description": "The value to round."
      },
      {
        "nullable": null,
        "types": [
          "big-integer"
        ],
        "spread": false,
        "optional": false,
        "name": "remainder",
        "description": "The remainder to be rounded."
      },
      {
        "nullable": null,
        "types": [
          "big-integer"
        ],
        "spread": false,
        "optional": false,
        "name": "modulus",
        "description": "Round to multiples of this value."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "rounding",
        "description": "Values of 'truncate', 'away', or 'nearest'."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A Javascript integer appropriately rounded."
    },
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "_confirmTypes",
    "memberof": "src/decimal9.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/decimal9.js~_confirmTypes",
    "access": "private",
    "export": false,
    "importPath": "meeks-prf-js/src/decimal9.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 452,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "requiredTypes",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "class",
    "name": "Decimal9",
    "memberof": "src/decimal9.js",
    "static": true,
    "longname": "src/decimal9.js~Decimal9",
    "access": "public",
    "export": true,
    "importPath": "meeks-prf-js/src/decimal9.js",
    "importStyle": "{Decimal9}",
    "description": "An immutable class for expressing numbers to nine decimal places.\n\nThis is useful for counting votes in STV tabulations.\n\nThis class provides defined behavior, relatively free from\nexternal influences, providing values are kept within a safe range.\nInternally, values are stored as integer Javascript number values.\n\nValues that are outside the safe range may not be relied upon\nto provide accurate results. It is the responsibilty of code using this\nclass to ensure that values stay within the safe range.\n\nMultiplication and division can require greater precision in\nintermediate results before rounding or truncation than Javascript\nnumbers can provide.\n\nTo support the required capacity for numerical precision, the Javascript\nnumbers are converted to big integers, currently using the npm\nbig-integer package and BigInt() constructor, for performing\nmultiplication and division.\nThe results, after applicable rounding\n(including truncation) are converted back to native Javascript numbers.\nIt is left to the application to check or otherwise ensure that the\nresulting values can be adequately represented as safe Javascript\nintegers.",
    "lineNumber": 65,
    "interface": false,
    "extends": [
      "Object"
    ]
  },
  {
    "__docId__": 87,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/decimal9.js~Decimal9",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/decimal9.js~Decimal9#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@throw",
        "tagValue": "{Decimal9Error} If either `value` or `exponentOf10` is not a\n  supported value or type."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "Number",
          "Decimal9",
          "null"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "value",
        "description": "A numeric value that\n  the new instance should represent; if null, the result is zero."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "exponentOf10",
        "description": "Number indicating how many powers of 10\n  the `value` should be be multiplied by to get the instance's true\n  numeric value; `exponentOf10` can be negative."
      }
    ]
  },
  {
    "__docId__": 88,
    "kind": "member",
    "name": "_valueAsInteger",
    "memberof": "src/decimal9.js~Decimal9",
    "static": false,
    "longname": "src/decimal9.js~Decimal9#_valueAsInteger",
    "access": "private",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "_getValue",
    "memberof": "src/decimal9.js~Decimal9",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/decimal9.js~Decimal9#_getValue",
    "access": "private",
    "description": "Get the underlying integer value.",
    "lineNumber": 133,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The underlying JavaScript integer value used to\n  internally represent the Decimal9 value; this may not be accurate\n  if the value is not a safe Javascript integer."
    },
    "ignore": true,
    "params": []
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "toNumber",
    "memberof": "src/decimal9.js~Decimal9",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/decimal9.js~Decimal9#toNumber",
    "access": "public",
    "description": "Get the Decimal9 value as a Javascript number.",
    "lineNumber": 140,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A representation of the Decimal9 value as a Javascript\n  number."
    },
    "params": []
  },
  {
    "__docId__": 97,
    "kind": "get",
    "name": "MAX_SAFE_INTEGER",
    "memberof": "src/decimal9.js~Decimal9",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/decimal9.js~Decimal9.MAX_SAFE_INTEGER",
    "access": "public",
    "description": "The max safe integer value that Decimal9 uses internally,\n as a static class value.\n\nThis represents a slightly smaller number than Javascript uses, since\nJavascript has some conversion anomalies for what it deems to be\nsafe integers.\n\nThe value is 9000100000000000 = 9,000,100,000,000,000.",
    "lineNumber": 154,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "get",
    "name": "MIN_SAFE_INTEGER",
    "memberof": "src/decimal9.js~Decimal9",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/decimal9.js~Decimal9.MIN_SAFE_INTEGER",
    "access": "public",
    "description": "The negative of Decimal9.MAX_SAFE_INTEGER.",
    "lineNumber": 156,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "get",
    "name": "MAX_SAFE_VALUE",
    "memberof": "src/decimal9.js~Decimal9",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/decimal9.js~Decimal9.MAX_SAFE_VALUE",
    "access": "public",
    "description": "The maximum value that Decimal9 deems safe to work with.\n\nThe value is 9000100 = 9,000,100 , i.e. nine million one hundred.",
    "lineNumber": 160,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "get",
    "name": "MIN_SAFE_VALUE",
    "memberof": "src/decimal9.js~Decimal9",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/decimal9.js~Decimal9.MIN_SAFE_VALUE",
    "access": "public",
    "description": "The negative of Decimal9.MAX_SAFE_VALUE.",
    "lineNumber": 162,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "toString",
    "memberof": "src/decimal9.js~Decimal9",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/decimal9.js~Decimal9#toString",
    "access": "public",
    "description": "Convert the Decimal9 value to a string, showing all decimal places,\neven if they include trailing zeros.",
    "lineNumber": 167,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A string reflecting the represented numeric value."
    },
    "params": []
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "isSafe",
    "memberof": "src/decimal9.js~Decimal9",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/decimal9.js~Decimal9#isSafe",
    "access": "public",
    "description": "Test whether the Decimal9 value is in the safe range.",
    "lineNumber": 183,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A true/false indication of whether the Decimal9\n  value is within the safe range, endpoints included."
    },
    "params": []
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "isLess",
    "memberof": "src/decimal9.js~Decimal9",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/decimal9.js~Decimal9#isLess",
    "access": "public",
    "description": "Test whether this Decimal9 value is less than another one.",
    "lineNumber": 196,
    "params": [
      {
        "nullable": null,
        "types": [
          "Decimal9"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "A Decimal9 instance to compare with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A true/false indication of whether this numeric value\n  is less than the numeric value of the argument."
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "isLessEqual",
    "memberof": "src/decimal9.js~Decimal9",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/decimal9.js~Decimal9#isLessEqual",
    "access": "public",
    "description": "Test whether this Decimal9 value is less than or equal to another one.",
    "lineNumber": 206,
    "params": [
      {
        "nullable": null,
        "types": [
          "Decimal9"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "A Decimal9 instance to compare with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A true/false indication of whether this numeric value\n  is less than or equal to the numeric value of the argument."
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "isEqual",
    "memberof": "src/decimal9.js~Decimal9",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/decimal9.js~Decimal9#isEqual",
    "access": "public",
    "description": "Test whether this Decimal9 value is equal to another one.",
    "lineNumber": 216,
    "params": [
      {
        "nullable": null,
        "types": [
          "Decimal9"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "A Decimal9 instance to compare with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A true/false indication of whether this numeric value\n  is equal to the numeric value of the argument."
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "isNotEqual",
    "memberof": "src/decimal9.js~Decimal9",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/decimal9.js~Decimal9#isNotEqual",
    "access": "public",
    "description": "Test whether this Decimal9 value is not equal to another one.",
    "lineNumber": 234,
    "params": [
      {
        "nullable": null,
        "types": [
          "Decimal9"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "A Decimal9 instance to compare with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A true/false indication of whether this numeric value\n  is not equal to the numeric value of the argument."
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "isGreaterEqual",
    "memberof": "src/decimal9.js~Decimal9",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/decimal9.js~Decimal9#isGreaterEqual",
    "access": "public",
    "description": "Test whether this Decimal9 value is greater than or equal to another one.",
    "lineNumber": 243,
    "params": [
      {
        "nullable": null,
        "types": [
          "Decimal9"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "A Decimal9 instance to compare with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A true/false indication of whether this numeric value\n  is greater than or equal to the numeric value of the argument."
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "isGreater",
    "memberof": "src/decimal9.js~Decimal9",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/decimal9.js~Decimal9#isGreater",
    "access": "public",
    "description": "Test whether this Decimal9 value is greater than another one.",
    "lineNumber": 253,
    "params": [
      {
        "nullable": null,
        "types": [
          "Decimal9"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "A Decimal9 instance to compare with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A true/false indication of whether this numeric value\n  is greater than the numeric value of the argument."
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "plus",
    "memberof": "src/decimal9.js~Decimal9",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/decimal9.js~Decimal9#plus",
    "access": "public",
    "description": "Add a value to this value, producing a new value.",
    "lineNumber": 263,
    "params": [
      {
        "nullable": null,
        "types": [
          "Decimal9"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to be added to this one."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Decimal9"
      ],
      "spread": false,
      "description": "The sum of this and value."
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "minus",
    "memberof": "src/decimal9.js~Decimal9",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/decimal9.js~Decimal9#minus",
    "access": "public",
    "description": "Subtract a value from this value, producing a new value.",
    "lineNumber": 274,
    "params": [
      {
        "nullable": null,
        "types": [
          "Decimal9"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to be subtracted from this one."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Decimal9"
      ],
      "spread": false,
      "description": "The difference of this minus value."
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "negative",
    "memberof": "src/decimal9.js~Decimal9",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/decimal9.js~Decimal9#negative",
    "access": "public",
    "description": "Arithmetically negate this value, producing a new value.",
    "lineNumber": 284,
    "return": {
      "nullable": null,
      "types": [
        "Decimal9"
      ],
      "spread": false,
      "description": "The negative of this."
    },
    "params": []
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "times",
    "memberof": "src/decimal9.js~Decimal9",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/decimal9.js~Decimal9#times",
    "access": "public",
    "description": "Multiply this value by another value, producing a new value.",
    "lineNumber": 303,
    "params": [
      {
        "nullable": null,
        "types": [
          "Decimal9",
          "number",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to be multiplied by.\n  this one"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'truncate'",
        "defaultRaw": "'truncate'",
        "name": "rounding",
        "description": "An indication of what kind of\n  rounding should be done.  Should be a value in K.ROUND:\n\n  - 'truncate' = Truncate any value beyond 9 decimal places.\n  - 'away' = Round away from zero to 9 decimal places.\n  - 'nearest' = Round to the nearest 9-decimal-place value,\n      rounding to an even digit in the 9th decimal place if there\n      is a tie for the nearest value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Decimal9"
      ],
      "spread": false,
      "description": "The product of the two values, rounded as requested."
    }
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "divideBy",
    "memberof": "src/decimal9.js~Decimal9",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/decimal9.js~Decimal9#divideBy",
    "access": "public",
    "description": "Divide this value by another value, producing a new value.",
    "lineNumber": 330,
    "params": [
      {
        "nullable": null,
        "types": [
          "Decimal9",
          "number",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The divisor value."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'truncate'",
        "defaultRaw": "'truncate'",
        "name": "rounding",
        "description": "An indication of what kind of\n  rounding should be done.  Should be a value in K.ROUND:\n\n  - 'truncate' = Truncate any value beyond 9 decimal places.\n  - 'away' = Round away from zero to 9 decimal places.\n  - 'nearest' = Round to the nearest 9-decimal-place value,\n      rounding to an even digit in the 9th decimal place if there\n      is a tie for the nearest value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Decimal9"
      ],
      "spread": false,
      "description": "The quotient of this divided by value, after any\n  indicated rounding."
    }
  },
  {
    "__docId__": 114,
    "kind": "class",
    "name": "Decimal9Total",
    "memberof": "src/decimal9.js",
    "static": true,
    "longname": "src/decimal9.js~Decimal9Total",
    "access": "public",
    "export": true,
    "importPath": "meeks-prf-js/src/decimal9.js",
    "importStyle": "{Decimal9Total}",
    "description": "A mutable subclass of Decimal9 for accumulating totals.\n\nTotals can be accumulated through standard addition and subtraction\noperations, `plus` and `minus`, without creating new instances.\n\nThe constructor does not take any parameters and always initializes\na new instance to a zero value.",
    "lineNumber": 359,
    "interface": false,
    "extends": [
      "Decimal9"
    ]
  },
  {
    "__docId__": 115,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/decimal9.js~Decimal9Total",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/decimal9.js~Decimal9Total#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 361,
    "undocument": true
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "_valueAsInteger",
    "memberof": "src/decimal9.js~Decimal9Total",
    "static": false,
    "longname": "src/decimal9.js~Decimal9Total#_valueAsInteger",
    "access": "private",
    "description": null,
    "lineNumber": 363,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "plus",
    "memberof": "src/decimal9.js~Decimal9Total",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/decimal9.js~Decimal9Total#plus",
    "access": "public",
    "description": "Add a value to this value, accumulating the result in this.",
    "lineNumber": 370,
    "params": [
      {
        "nullable": null,
        "types": [
          "Decimal9"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to be added to this one"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Decimal9Total"
      ],
      "spread": false,
      "description": "This, which now carries the sum."
    }
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "minus",
    "memberof": "src/decimal9.js~Decimal9Total",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/decimal9.js~Decimal9Total#minus",
    "access": "public",
    "description": "Subtract a value from this value, accumulating the result in this.",
    "lineNumber": 380,
    "params": [
      {
        "nullable": null,
        "types": [
          "Decimal9"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to be subtracted from this one"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Decimal9Total"
      ],
      "spread": false,
      "description": "This, which now carries the difference."
    }
  },
  {
    "__docId__": 121,
    "kind": "class",
    "name": "Decimal9Error",
    "memberof": "src/decimal9.js",
    "static": true,
    "longname": "src/decimal9.js~Decimal9Error",
    "access": "public",
    "export": true,
    "importPath": "meeks-prf-js/src/decimal9.js",
    "importStyle": "{Decimal9Error}",
    "description": "An error type used with the Decimal9 class.",
    "lineNumber": 23,
    "interface": false,
    "extends": [
      "src/util_basic.js~UtilBaseError"
    ]
  },
  {
    "__docId__": 122,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/decimal9.js~Decimal9Error",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/decimal9.js~Decimal9Error#constructor",
    "access": "public",
    "description": "The calling convention is the same as for UtilBaseError.\nInitialize with a message, other values, and a prior error.",
    "lineNumber": 26
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "src/errors.js",
    "content": "/**\n * @copyright 2016-2019 David Cary;\n * @license Apache-2.0\n *\n * @module MeekErrs\n * @summary Meek's method base classes and functions for errors.\n */\n\nimport {UtilBaseError, UBF} from './util_basic.js';\n\n/** An error class that identifies invalid data values and types.\n *\n * This is most typically used for data that is supplied from outside the\n * package.\n */\nexport class MeekValueError extends UtilBaseError {\n  /** The calling convention is the same as for UtilBaseError.\n   * Initialize with a message, other values, and a prior error. */\n  constructor(message, otherValues=[], priorError=null) {\n    super(message, otherValues, priorError);\n  }\n}\n\n\n/** An error class for possible implementation errors in this package. */\nexport class MeekImplementationError extends UtilBaseError {\n  /** The calling convention is the same as for UtilBaseError.\n   * Initialize with a message, other values, and a prior error. */\n  constructor(message, otherValues=[], priorError=null) {\n    super(message, otherValues, priorError);\n  }\n}\n\n",
    "static": true,
    "longname": "/home/circ/devel/rcv/meeks-prf-js-github/src/errors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "class",
    "name": "MeekValueError",
    "memberof": "src/errors.js",
    "static": true,
    "longname": "src/errors.js~MeekValueError",
    "access": "public",
    "export": true,
    "importPath": "meeks-prf-js/src/errors.js",
    "importStyle": "{MeekValueError}",
    "description": "An error class that identifies invalid data values and types.\n\nThis is most typically used for data that is supplied from outside the\npackage.",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "src/util_basic.js~UtilBaseError"
    ]
  },
  {
    "__docId__": 125,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors.js~MeekValueError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors.js~MeekValueError#constructor",
    "access": "public",
    "description": "The calling convention is the same as for UtilBaseError.\nInitialize with a message, other values, and a prior error.",
    "lineNumber": 19
  },
  {
    "__docId__": 126,
    "kind": "class",
    "name": "MeekImplementationError",
    "memberof": "src/errors.js",
    "static": true,
    "longname": "src/errors.js~MeekImplementationError",
    "access": "public",
    "export": true,
    "importPath": "meeks-prf-js/src/errors.js",
    "importStyle": "{MeekImplementationError}",
    "description": "An error class for possible implementation errors in this package.",
    "lineNumber": 26,
    "interface": false,
    "extends": [
      "src/util_basic.js~UtilBaseError"
    ]
  },
  {
    "__docId__": 127,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/errors.js~MeekImplementationError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/errors.js~MeekImplementationError#constructor",
    "access": "public",
    "description": "The calling convention is the same as for UtilBaseError.\nInitialize with a message, other values, and a prior error.",
    "lineNumber": 29
  },
  {
    "__docId__": 128,
    "kind": "file",
    "name": "src/index.js",
    "content": "\"use strict\";\nimport WithJson from './with_json.js';\n\nWithJson.cliTabulate();\n\n",
    "static": true,
    "longname": "/home/circ/devel/rcv/meeks-prf-js-github/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 129,
    "kind": "file",
    "name": "src/meek.js",
    "content": "/**\n * @copyright 2016-2019 David Cary;\n * @license Apache-2.0\n *\n * @module Meek\n *\n * @summary Tabulate RCV / STV per prfound.org's Meek's method.\n */\n\nimport {UBF} from \"./util_basic.js\";\nimport K from \"./constants.js\";\nimport Results from \"./results.js\";\nimport {MeekValueError, MeekImplementationError}\n      from \"./errors.js\";\nimport {Status} from './status.js';\nimport {Validator} from './validate.js';\nimport {Progress} from './progress.js';\n\n// with TYPETREE, force override of default ballotTree option:\n//   0 = no override,\n//   1 = no tree, list of lists,\n//   2 = static tree,\n//   3 = dynamic tree\nconst TYPETREE = 0;\n\n/**\n * Tabulate an RCV / STV contest per prfound.org's Meek's method.\n *\n * This is a convenience function for accessing the `Tabulation` class.\n *\n * Create an instance of the `Tabulation` class, using the supplied\n * arguments, then call the instance's `tabulate()` method,\n * returning the results from that method.\n *\n * Arguments\n * ---------\n * The same as the constructor method of the `Tabulation` class.\n *\n * Returns\n * -------\n * The same as the `tabulate()` method of the `Tabulation` class.\n *\n * Throws\n * ------\n * The same as the `tabulate()` method of the `Tabulation` class.\n *\n */\nexport function tabulate(nbrSeatsToFill, candidates, ballots,\n      maxRankingLevels, tieBreaker, excluded, protectedzz, options={},\n      progressCallback=null) {\n  return new Tabulation(nbrSeatsToFill, candidates, ballots,\n      maxRankingLevels, tieBreaker, excluded, protectedzz, options,\n      progressCallback\n      ).tabulate();\n}\n\n/**\n * The nodes of a ballot tree.\n *\n * A node represents a candidate Id for a candidate or a tabulation\n * category for exhausted votes (such as overvotes, abstentions, or\n * other exhausted votes), or a node can be the root of the ballot tree\n * which does not represent any of those other things.\n */\nclass RankingNode {\n  /**\n   * @param {string} name - The candidate Id of the candidate that the\n   *   node represents, a tabulation category label, or ':root' for the\n   *   root node.\n   */\n  constructor(name) {\n    /** The name of the node, as given by the constructor parameter.\n     * @type {string} */\n    this.name = name;\n    /** The number of ballots represented by the node, an integer.\n     * @type {number} */\n    this.ballotCount = 0;\n    /** A data object of the node's children, if any,\n     *    keyed by child name\n     *    and values being the child nodes.\n     * @type {Object} */\n    this.children = {};\n    /** The number of children for this node.\n     * @type {number} */\n    this.nbrChildren = 0;\n  }\n}\n\n/** A collection of statistics for building and using a ballot tree.\n *\n *  Supports accumulating counts and elapsed times from one instance\n *  into another.\n */\nclass NodeStats {\n  /**\n   * @param {string} label - A descriptive name for the use of this\n   *   instance.\n   */\n  constructor(label) {\n    /** A descriptive name for the use of this instance.\n     * @type {string} */\n    this.label = label;\n    /** The number of nodes in the tree or in a subtree.\n     * @type {number} */\n    this.nbrNodes = 0;\n    /** The number of nodes leaves in the tree or in a subtree.\n     * @type {number} */\n    this.nbrLeaves = 0;\n    /** The number of visits to nodes during a process.\n     * @type {number} */\n    this.nbrVisited = 0;\n    /** The number of rounds tabulated while stats were gathered.\n     * @type {number} */\n    this.nbrRounds = 0;\n    /** The number of iterations tabulated while stats were gathered.\n     * @type {number} */\n    this.nbrIterations = 0;\n    /** The number of nodes added to a tree during a process.\n     * @type {number} */\n    this.nbrAdded = 0;\n    /** The number of nodes deleted from a tree during a process.\n     * @type {number} */\n    this.nbrDeleted = 0;\n    /** The amount of elapsed wall time during a process.\n     * @type {number} */\n    this.elapsedTime = 0;\n    /** The start wall time for a process.\n     * @type {number} */\n    this.startTime = Date.now();\n  }\n\n  /** Converts the stats to a human-readable string that can be printed.\n   * @return {string} A human-readable string showing the stats. */\n  toString() {\n    const result = String(this.label)+': nodes='+this.nbrNodes+\n          ' leaves='+this.nbrLeaves+' visited='+this.nbrVisited+\n          ' rounds='+this.nbrRounds+' iterations='+this.nbrIterations+\n          ' added='+this.nbrAdded+' deleted='+this.nbrDeleted+\n          ' elapsed='+this.elapsedTime.toFixed(3);\n    return result;\n  }\n\n  /** Accumulate the counts, etc. from another NodeStats instance\n   * into this one.\n   * @param {NodeStats} other - Statistics to add to this. */\n  add(other) {\n    if (!(other instanceof NodeStats)) {\n      return;\n    }\n    this.nbrNodes += other.nbrNodes;\n    this.nbrLeaves += other.nbrLeaves;\n    this.nbrVisited += other.nbrVisited;\n    this.nbrRounds += other.nbrRounds;\n    this.nbrIterations += other.nbrIterations;\n    this.nbrAdded += other.nbrAdded;\n    this.nbrDeleted += other.nbrDeleted;\n    this.elapsedTime += other.elapsedTime;\n    return;\n  }\n\n  /** Record accumulated elapsed time and allow for tracking another\n   *    interval of elapsed time.\n   * @return {number} The number of seconds of elapsed time in the\n   *   most recently concluded interval.\n   */\n  setElapsedTime() {\n    const now = Date.now();\n    const moreTime = (now - this.startTime) / 1000;\n    this.elapsedTime += moreTime;\n    this.startTime = now;\n    return moreTime;\n  }\n}\n\n/**\n * A class for Meek tabulations per prfound.org's reference rule,\n * plus extensions.\n *\n * Implements the tabulation logic for Meek RCV / STV as described at:\n *\n *   https://prfound.org/resources/reference/reference-meek-rule/\n *\n * Typical use of this class is to instantiate it and then run its\n * tabulate() method to get the results.\n *\n * This tabulation class differs from the reference rule for Meek's\n * method, as described by prfound.org in several ways.\n *\n * This tabulation routine accepts ballots that have anomalous\n * ranking patterns, such as duplicate rankings (ranking the same\n * candidate at more than one ranking level), skipped ranking levels,\n * and overvoted ranking levels (more than one candidate ranked at the\n * same ranking level).\n * The prfound.org algorithm is described in terms that implicitly\n * assume that such duplicate rankings and overvoted ranking levels do\n * not exist in the ballots it processes.\n *\n * For a duplicate ranking, this tabulation will consider only the most\n * preferred ranking of a candidate, rankings at less preferred ranking\n * levels for the same candidate are ignored.\n *\n * An empty ranking level, a ranking level without a ranking, is\n * ignored, whether or not less preferred ranking levels do have\n * rankings.\n *\n * An overvoted ranking level causes that ranking level and all less\n * preferred ranking levels to be ignored.\n *\n *\n * Terminology\n * -----------\n *\n * Several arguments or parts of an argument are or can be an ordered\n * collection of string values.\n *\n * An ordered collection of string values may be represented as one of\n * the following:\n *\n *   + an array of strings\n *   + a delimiter-first string, which is a string in which the first\n *     character is the delimiter, followed by the component string\n *     values separated by the delimiter.\n *     The delimiter character may not be part of any of the component\n *     string values.\n *\n * The following Javascript expressions specify equivalent ordered\n * collections of string values:\n *\n * ```\n *  ['A', 'B', '', 'C', '#', 'D']\n *  ' A B  C # D'\n *  '|A|B||C|#|D'\n * ```\n *\n * As a special case, the empty string is considered a delimiter-first\n * string that repreesents the empty array.\n * Also, a delimiter-first string with just one character represents an\n * array with just one empty string in it.\n *\n * Values that use an ordered collection of string values include those\n * for specifying candidates, a tieBreaker, the rankings for a ballot,\n * and certain values for the sub-option 'alternativeDefeats'.\n *\n * Other values require an unordered collection of string values.\n * They are specified as an ordered collection of string values,\n * either as an array of strings or as a delimiter-first string,\n * but the ordering is not significant.\n * This is used for the excluded and protected values.\n *\n */\nexport class Tabulation {\n  /**\n   * Initialize a tabulation for a Meek STV contest per prfound.org\n   *\n   * @param {number} nbrSeatsToFill -\n   *   The number of seats to fill, an integer that is at least one.\n   *   This is also sometimes referred to as the maximum allowed number\n   *   of winners or the number of candidates to elect.\n   *\n   * @param {string|array<string>} candidates -\n   *   An ordered collection of strings, each of which servers as the\n   *   unique candidate identifier for its candidate.\n   *   A candidate identifier is sometimes referred to as a\n   *   a candidate ID, a candId, a candidate name, or a ranking code.\n   *   A candidate identifier may not begin with a colon (':'),\n   *   may not be the empty string, and may not be the string '#'.\n   *\n   * @param {array} ballots - An array of ballot groups.\n   *\n   * A ballot group represents a number of ballots with the same\n   * rankings.\n   * A ballot group can be specified as an array of length two with\n   * the following values:\n   *\n   * - multiple\n   *   A positive integer indicating how many individual ballots are\n   *   summarized into this ballot group.\n   *\n   * - rankings\n   *   An ordered collection of strings,\n   *   each of which is a candidate identifier or other\n   *   ranking code,\n   *   ordered from most preferred first to least preferred last.\n   *\n   *   Other ranking codes are:\n   *\n   *   - The empty string, indicating an empty ranking level.\n   *   - The string '#', indicating an overvote ranking.\n   *\n   *   A trailing empty ranking does not have to be specified.\n   *\n   * A ballot group can also be specified with just its rankings,\n   * letting its multiple default to 1.\n   * The rankings can be specified\n   * either as an array of strings or as a delimiter-first string.\n   *\n   * So the following are equivalent ways of specifying a ballot group\n   * that represents just one ballot:\n   * ```\n   *  [1, [\"A\", \"B\", \"C\"]]\n   *  [1, \" A B C\"]\n   *  [1, \">A>B>C\"]\n   *  [\"A\", \"B\", \"C\"]\n   *  \" A B C\"\n   * ```\n   * @param {number|null} maxRankingLevels -\n   *   The maximum number of candidates that each voter is allowed to\n   *   rank on a ballot, i.e. the maximum length of a ballot's rankings,\n   *   when expressed as an array.\n   *   The value for maxRankingLevels must be null\n   *   or an integer that is at least three.\n   *   If it is null,\n   *   there is no restriction on the length of a ballot's rankings.\n   *\n   * @param {array<string>|string} tieBreaker -\n   *   An ordered collection of candidate identifiers.\n   *   Whenever two or more candidates are tied to be defeated,\n   *   the tied candidate that is listed earliest in the tieBreaker\n   *   is chosen to be defeated,\n   *   provided that all of the tied candidates are listed in the\n   *   tieBreaker.\n   *\n   *   The tieBreaker can represent a random ordering of the candidates,\n   *   determined by lot.\n   *   This is a sufficient tie breaking procedure\n   *   that is compatible with the prfound.org reference rule.\n   *\n   * @param {array<string>|string} excluded -\n   *   An unordered collection of candidate identifiers\n   *   for those candidates that are excluded (a.k.a. withdrawn)\n   *   from the tabulation.\n   *   An excluded candidate is not eligible to be elected\n   *   or receive votes,\n   *   is never a hopeful candidate during the tabulation,\n   *   and is designated as defeated before the first round of\n   *   tabulation begins.\n   *\n   * @param {array<string>|string} protectedzz -\n   *   An unordered collection of candidate identifiers\n   *   that are protected from being defeated\n   *   and so are guaranteed of being elected.\n   *\n   *   A protected candidated is not allowed to also be an excluded\n   *   candidate.\n   *   The number of protected candidates may not be more than the\n   *   number of seats to fill.\n   *\n   *   Designating protected candidates can be useful for example\n   *   when filling a vacancy by retabulating the ballots of a\n   *   previous election.\n   *\n   *   When there are protected candidates,\n   *   there are separate quotas for protected candidates and\n   *   unprotected candidates,\n   *   in order to assure that an excess of unprotected candidates\n   *   are not elected.\n   *\n   *   Protected candidates are elected subject to a protected quota,\n   *   which is equal to what the regular quota would otherwise be\n   *   if no candidates were protected.\n   *   A protected candidate will be elected at the end\n   *   of a tabulation if the candidate was not already elected by\n   *   reaching the protected quota.\n   *\n   *   Unprotected candidates are elected subject to a quota that is\n   *   typically higher than the regular quota, and declines as\n   *   protected candidates increase their non-surplus votes.\n   *   If all protected candidates are elected by reaching the\n   *   protected quota,\n   *   the quota for unprotected candidates reduces to approximately\n   *   (allowing for small differences related to rounding and finite\n   *   precision arithmetic)\n   *   what the regular quota would be if no candidates were\n   *   protected.\n   *\n   *   More specifically, the quota for unprotected candidates\n   *   is based on the number seats\n   *   that are available to unprotected candidates\n   *   and the number of votes\n   *   that are counting for\n   *   or could be transferred to unprotected candidates,\n   *   given the current protected quota.\n   *\n   *   The number of seats available to unprotected candidates is\n   *   the number of seats to be filled by the contest\n   *   minus the number of protected candidates.\n   *   The number of seats available to unprotected candidates\n   *   plus one\n   *   is used in the denominator of the quota calculation.\n   *\n   *   The number of votes used in the numerator\n   *   of the unprotected quota calculation\n   *   is equal to the number of votes counting for unprotected\n   *   candidates\n   *   plus the number of surplus votes counting for protected\n   *   candidates\n   *   (surplus votes in excess of the protected quota).\n   *   Votes counting for each protected candidate,\n   *   but only up to the protected quota,\n   *   are not included in the calculation of the numerator\n   *   of the unprotected quota.\n   *\n   *\n   * @param {Object} options -\n   * A data object of tabulation options\n   * containing zero or more of the following keys and values.\n   * For each key and value, the Javascript identifier is shown and its\n   * literal string value is shown in parentheses.\n   *\n   *  __Default value__: an empty object, such as `{ }`, is expanded to\n   *  a data object with each option's default value:\n   * ~~~\n   * {\n   *   \"always_count_votes\": true,\n   *   \"alternative_defeats\": \"N\",\n   *   \"type_of_altdefs\": \"if_no_new_electeds\",\n   *   \"ballot_tree\": \"dynamic\"\n   * }\n   * ~~~\n   *\n   * - `alwaysCountVotes` ('always_count_votes')\n   *   A boolean value indicating whether to count votes for the\n   *   first round even if the number of hopeful candidates is less\n   *   than or equal to the number of seats to fill, i.e. all of the\n   *   hopeful candidates can be elected regardless of what the\n   *   first-round vote totals are or whether any votes are counted.\n   *\n   *   Allowed values for this option are:\n   *\n   *   - `yes` (true) : Always count votes for the first round.\n   *\n   *   - `no` (false) : Do not count votes for any round if winners can\n   *     otherwise be determined.\n   *\n   *   A value of false specifies tabulation behavior that strictly\n   *   follows the reference rule.\n   *   A value of true provides for an extension\n   *   which does not change which candidates are elected\n   *   and produces the same vote totals as the reference rule,\n   *   except for always producing first-round vote totals.\n   *\n   *   __Default value__: `yes` (true)\n   *\n   * - `alternativeDefeats` ('alternative_defeats')\n   *   A value indicating whether or in which rounds the option to\n   *   perform alternative defeats should be\n   *   exercised if they are otherwise allowed.\n   *   Alternative defeats are also known as multiple simultaneous\n   *   defeats or batch defeats and can involve deferred distribution\n   *   of surplus.\n   *   The value may be a string or an ordered collection of string\n   *   values.\n   *\n   *   The value for this option may be one of the following\n   *   case-insensitive string values,\n   *   indicating when to do alternative defeats, if they are\n   *   allowed:\n   *\n   *   - `yes` ('Y') : yes, every round\n   *\n   *   - `never` ('N') : no, never\n   *\n   *   The value for this option may also be\n   *   an ordered collection of string values,\n   *   each string value equal to\n   *   one of the values listed above,\n   *   one for each round of the tabulation.\n   *   Extra values are allowed and are ignored.\n   *\n   *   Any sequence of round-by-round choices may be replicated with\n   *   this kind of value.\n   *\n   *   __Default value__: `never` ('N')\n   *\n   *   The reference rule for when alternative defeats are\n   *   allowed is designed with the goal that performing\n   *   alternative defeats will not change which candidates are elected\n   *   compared to defeating at most one candidate per round.\n   *   However since Meek's Method only calculates approximations of\n   *   an exact solution to a system of equations, there may be\n   *   cases where performing alternative defeats produces\n   *   a different set of winners.\n   *\n   * - `typeOfAltDefs` ('type_of_altdefs')\n   *   A string value indicating when during a round or iteration\n   *   the tabulation should check for multiple simultaneous\n   *   defeats,\n   *   provided that they are allowed by the 'alternativeDefeats'\n   *   option for that round.\n   *   Allowed values for this option are:\n   *\n   *   - `perReferenceRule` ('per_reference_rule')\n   *     Check for alternative defeats according to the\n   *     reference rule, at the end of step B.2.e,\n   *     i.e. when it is assured that at least one more iteration\n   *     will be performed for the round.\n   *\n   *     This option will not check for\n   *     alternative defeats for the last iteration of a round.\n   *     Some rounds have only one iteration,\n   *     and this option will not check for alternative defeats\n   *     in such rounds.\n   *     For example, a first round which does not elect any\n   *     candidates will have only one iteration.\n   *\n   *   - `beforeSingleDefeats` ('before_single_defeats')\n   *     Check for multiple simultaneous defeats\n   *     at the beginning of reference rule step B.3,\n   *     the step for checking for a single defeat,\n   *     after the last iteration for the round has been completed\n   *     and there were no candidates elected in the round.\n   *\n   *   - `ifNoNewElecteds` ('if_no_new_electeds')\n   *     Check for multiple simultaneous defeats\n   *     in the middle of step B.2.e,\n   *     after checking that there are no candidates elected in\n   *     the round,\n   *     but before checking any conditions for total surplus.\n   *\n   *     This option combines the effects of `perReferenceRule` and\n   *     `beforeSingleDefeats` and will check for alternative defeats\n   *     after votes are counted for every iteration,\n   *     provided that no candidates have been elected in the round.\n   *\n   *   __Default value__: `ifNoNewElecteds` ('if_no_new_electeds')\n   *\n   * - `ballotTree` ('ballot_tree')\n   *\n   *   This option specifies whether and how to perform some internal\n   *   optimizations in how ballots are stored for vote counting.\n   *   Storing ballot rankings in a tree structure can significantly\n   *   speed up a larger tabulation.\n   *   Using a tree structure promotes summarization of earlier rankings\n   *   across ballots and ballot groups,\n   *   which means an iteration can have fewer pieces of data to look\n   *   at and fewer calculations to perform.\n   *\n   *   Valid values for this option include:\n   *\n   *   - `dynamic` ('dynamic')\n   *\n   *     A dynamic balllot tree is typically the fastest option\n   *     for larger tabulations.\n   *     A dynamic ballot tree maximally summarizes ballot rankings\n   *     across ballots and ballot groups,\n   *     and it only contains tree nodes that might be needed\n   *     during a round.\n   *     The tree is adjusted between rounds to maintain its optimal\n   *     content and structure.\n   *\n   *   - `static` ('static')\n   *\n   *     A static ballot tree is typically the second fastest option\n   *     for larger tabulations\n   *     and it is often nearly as fast as\n   *     using a dynamic ballot tree.\n   *     A full ballot tree is built before any rounds are tabulated\n   *     and no adjustments are made between rounds.\n   *\n   *   - `none` ('none')\n   *\n   *     A ballot tree is not used.\n   *     This is typically the slowest option for larger tabulations,\n   *     often much slower.\n   *     However it is also the simplest approach and most directly\n   *     follows the language of the reference rule.\n   *\n   *   __Default value__: `dynamic` ('dynamic')\n   *\n   * @param {Progress|function} progressCallback -\n   *   Determines whether and how tabulation progress is reported.\n   *\n   *   The value can be an instance of Progress or a callback function.\n   *\n   *   If it is a callback function, a new Progress instance is\n   *   created using that callback function.\n   *\n   *   If no value is provided, no progress reporting is performed.\n   *\n   * @throws {*} Same as for `Tabulation.tabulate()`.\n   *\n   */\n  constructor(nbrSeatsToFill, candidates, ballots,\n        maxRankingLevels, tieBreaker, excluded=[], protectedzz=[],\n        options={}, progressCallback) {\n    try {\n      this._nbrSeatsToFill = nbrSeatsToFill;\n      this._candidates = candidates;\n      this._ballots = ballots;\n      this._maxRankingLevels = maxRankingLevels;\n      this._tieBreaker = tieBreaker;\n      this._excluded = excluded;\n      this._protectedzz = protectedzz;\n      this._options = options;\n      if (progressCallback instanceof Progress) {\n        this._progress = progressCallback;\n        if (!this._progress.nbrBallotGroups ||\n              this._progress.nbrBallotGroups === 1) {\n          this._progress.setNbrBallotGroups(Array.isArray(this._ballots) ?\n                this._ballots.length : 10);\n        }\n      } else {\n        this._progress = new Progress(progressCallback);\n        this._progress.setNbrBallotGroups(Array.isArray(this._ballots) ?\n              this._ballots.length : 10);\n      }\n      const validator = new Validator();\n      this._nbrSeatsToFill = validator.nbrSeatsToFill(\n            this._nbrSeatsToFill);\n      this._candidates = validator.candidates(this._candidates);\n      this._maxRankingLevels = validator.maxRankingLevels(\n            this._maxRankingLevels);\n      this._tieBreaker = validator.tieBreaker(this._tieBreaker,\n            this._candidates);\n      this._excluded = validator.excluded(this._excluded, this._candidates);\n      this._protectedzz = validator.protectedCandidates(this._protectedzz,\n            this._candidates, this._excluded, this._nbrSeatsToFill);\n      const optionsValidated = validator.options(this._options);\n      this._options = {};\n      this._options[K.OPTIONS.alternativeDefeats._value] =\n            K.OPTIONS.alternativeDefeats.never;\n      this._options[K.OPTIONS.typeOfAltDefs._value] =\n            K.OPTIONS.typeOfAltDefs.ifNoNewElecteds;\n      this._options[K.OPTIONS.alwaysCountVotes._value] =\n            K.OPTIONS.alwaysCountVotes.yes;\n      this._options[K.OPTIONS.ballotTree._value] =\n            K.OPTIONS.ballotTree.dynamic;\n      if ([1, 2, 3].indexOf(TYPETREE) >= 0) {\n        this._options[K.OPTIONS.ballotTree._value] = [null,\n          K.OPTIONS.ballotTree.none,\n          K.OPTIONS.ballotTree.static,\n          K.OPTIONS.ballotTree.dynamic,\n        ][TYPETREE];\n      }\n      Object.assign(this._options, optionsValidated);\n      if (this._options[K.OPTIONS.ballotTree._value] ===\n            K.OPTIONS.ballotTree.static) {\n        this._progress.useBallotTree();\n      }\n      if (this._options[K.OPTIONS.ballotTree._value] ===\n            K.OPTIONS.ballotTree.dynamic) {\n        this._progress.useBallotTree(true);\n      }\n      this._progress.setNbrOriginalHopefuls(\n            this._candidates.length - this._excluded.size);\n      this._ballots = validator.ballots(this._ballots,\n            this._candidates, this._maxRankingLevels, this._progress);\n    }\n    catch (exc) {\n      console.debug(UBF.describeError(exc));\n      if (exc instanceof MeekValueError ||\n            exc instanceof MeekImplementationError) {\n        throw exc;\n      }\n      console.error(UBF.describeError(exc));\n      if (exc instanceof RangeError ||\n             exc instanceof ReferenceError ||\n             exc instanceof SyntaxError ||\n             exc instanceof TypeError) {\n        throw new MeekImplementationError(\n              'Likely Meek implementation error:', [], exc);\n      }\n      throw exc;\n    }\n  }\n\n  /**\n   * Perform a tabulation of an RCV / STV Meek contest.\n   *\n   * Normally this method is called with no arguments.\n   * However to facilitate unit testing,\n   * a data object may be provided as way\n   * to artificially stop the tabulation\n   * at various points in a given round.\n   *\n   * @param {Object} [kwargs={}] -\n   *\n   * A data object with zero or more of the following properties.\n   *\n   * If a property is missing or has a `null` value,\n   * the tabulation is not artificially stopped at that point.\n   *\n   * - 'stopAtBegin'\n   *\n   *   The number of a round; stop at the beginning of that round,\n   *   after checking whether to proceed with the round,\n   *   but before doing any iterations.\n   *\n   * - 'stopAfterStatusUpdate'\n   *\n   *   The number of a round; stop after all iterations for the round\n   *   have completed\n   *   and after updates to the vote tally and status\n   *   have been made.\n   *\n   * - 'stopAtEnd'\n   *\n   *   The number of a round; stop at the end of that round.\n   *\n   * @return {Results}\n   * An instance of Results, which contains the following three members:\n   *\n   * - `elected`\n   *\n   *   A set of candidate identifiers for the candidates\n   *   that have been elected by the tabulation\n   *\n   * - `statuses`\n   *\n   *   A data object keyed by candidate identifier for every candidate,\n   *   and with each value a Status instance,\n   *   which has the following properties:\n   *\n   *   - candidate\n   *\n   *     The candidate's identifier.\n   *\n   *   - status\n   *\n   *     A string indicating the candidate's status: 'elected' or\n   *     'defeated'.\n   *\n   *   - nbrRound\n   *\n   *     The 1-based number of the round for which votes were\n   *     calculated when the candidate was elected or defeated;\n   *     zero if the candidate was excluded.\n   *\n   *   - votes\n   *\n   *     The number of votes the candidate had when elected or\n   *     defeated; null if the candidate was excluded.\n   *\n   *   - keepFactor\n   *\n   *     The fraction of a ballot's vote weight that counted for\n   *     the candidate when votes were last tallied/distributed.\n   *\n   *   - destiny\n   *\n   *     An indication of whether the candidate was excluded or\n   *     protected or neither, i.e. normal.  This attribute may be\n   *     omitted in some formats, including JSON formats, if the\n   *     destiny is normal.\n   *\n   * - `tally`\n   *\n   *   A data object, keyed by candidate identifiers\n   *   and labels for other tabulation categories.\n   *   Values are arrays of round-by-round vote totals\n   *   or other statistics.\n   *\n   *   A vote total for the kth round\n   *   is accessed with an index of k-1.\n   *   A candidate has a vote total only for those rounds\n   *   which started with the candidate\n   *   as a hopeful or elected candidate.\n   *\n   *   In addition to candidates, there are vote totals or counts for\n   *   all rounds for each of the following keys / tabulation\n   *   categories:\n   *\n   *   - ':Votes for candidates'\n   *   - ':Overvotes'\n   *   - ':Abstentions'\n   *   - ':Other exhausted'\n   *   - ':Total votes'\n   *   - ':Protected quota\n   *   - ':Quota votes\n   *   - ':Quota'\n   *   - ':Total surplus'\n   *   - ':Iterations'\n   *\n   *   Numbers of votes are returned as Decimal9 instances,\n   *   but are typically converted\n   *   to Javascript numbers or JSON numbers in other formats.\n   *   Counts are returned as Javascript integers.\n   *\n   *   ':Protected quota' and ':Quota votes' are present\n   *   only if there are some protected candidates.\n   *\n   *   ':Quota votes' identifies the number of votes\n   *   used to calculate the ':Quota' for unprotected candidates.\n   *   The quota votes amount is equal to\n   *   the number of votes counting for unprotected candidates,\n   *   plus any surplus votes for protected candidates\n   *   (based on the protected quota).\n   *\n   *   The array for the ':Iterations' key contains integer values,\n   *   indicating the number of iterations that were performed for the\n   *   round.\n   *\n   * @throw {Error}\n   * The error that can be one of the following types:\n   *\n   * - MeekValueError\n   *\n   *   If any values passed to this function or to the `Tabulation()`\n   *   constructor do not pass validation checks.\n   *\n   * - MeekImplementationError\n   *\n   *   If an inconsistency is detected during the tabulation\n   *   that is not attributable to invalid arguments, resource\n   *   constraints, resource availability, or other external\n   *   interventions.\n   *   If this exception type is raised,\n   *   it might be because this Javascript package\n   *   contains a logic error.\n   *\n   * - Other exceptions\n   *\n   *   Other exceptions defined by Javascript and its standard libraries\n   *   can be raised,\n   *   for example as a result of unavailable or insufficient resources.\n   *\n   *   This function does not otherwise impose restrictions on the size\n   *   of the tabulation,\n   *   including the number of seats to be elected, the number of\n   *   candidates, the number of ballots or ballot groups, the number\n   *   of rankings per ballot, or the length of candidate identifiers.\n   *   The size of a tabulation that can be performed is\n   *   primarily dependent on the resources of the hardware and software\n   *   configuration on which the tabulation runs and the rate of\n   *   convergence of Meek's method.\n   *\n   * The MeekValueError and MeekImplementationError classes are\n   * indirectly subclasses of the Error class and neither is a\n   * subclass of the other, directly or indirectly.\n   *\n   */\n  tabulate(kwargs={}) {\n    let results;\n    try {\n      this._testing = {'stopAtBegin': null, 'stopAfterStatusUpdate': null,\n            'stopAtEnd': null};\n      Object.assign(this._testing, kwargs);\n      results = this._tabulateMeeks();\n    }\n    catch (exc) {\n      if (exc instanceof MeekValueError ||\n            exc instanceof MeekImplementationError) {\n        throw exc;\n      }\n      console.error(UBF.describeError(exc));\n      if (exc instanceof RangeError ||\n             exc instanceof ReferenceError ||\n             exc instanceof SyntaxError ||\n             exc instanceof TypeError) {\n        throw new MeekImplementationError(\n              'Likely Meek implementation error:', [], exc);\n      }\n      throw exc;\n    }\n    return results;\n  }\n\n  _otherCategories() {\n    const result = {};\n    K.OTHER_LABELS_LIST.forEach((otherLabel) => {\n      if (this._protectedzz.size === 0 &&\n            (otherLabel === K.LABEL.protectedQuota ||\n            otherLabel === K.LABEL.quotaVotes)) {\n        return;\n      }\n      result[otherLabel] = [];\n    });\n    return result;\n  }\n\n  _tabulateMeeks() {\n    /*\n    Tabulate a Meek's STV contest.\n\n    This method is for internal use only.\n    */\n    this._tabulateSetup();\n    while (this._processAMeeksRound()) {\n      if (this._testing['stopAtEnd'] === this._nbrRound) {\n        break;\n      }\n    }\n    this._progress.setRoundProgress(this._nbrRound, this._nbrIteration,\n          this._hopeful().size);\n    return new Results(this._elected(), this._statuses, this._tallies);\n  }\n\n  /* */\n  _tabulateSetup() {\n    /*\n    Create instance values needed for tabulation\n    */\n    this._nbrRound = 0;\n    this._tallies = {};\n    this._candidates.forEach((candidate) => {\n      this._tallies[candidate] = [];\n    });\n    this._tallies = Object.assign(this._tallies, this._otherCategories());\n    this._nbrUnprotectedSeats = this._nbrSeatsToFill - this._protectedzz.size;\n    // Reference rule step A, Initialize Election\n    this._statuses = {};\n    this._candidates.forEach((candidate) => {\n      this._statuses[candidate] = new Status(candidate, null, this._nbrRound,\n            undefined, undefined, this._getCandidateDestiny(candidate));\n    });\n    for (let cstatus in this._statuses) {\n      if (this._excluded.has(cstatus)) {\n        this._statuses[cstatus].status = K.STATUS.defeated;\n      }\n    }\n    this._omega = K.ULP.times(1000);\n    this._keepFactors = {};\n    this._candidates.forEach((candidate) => {\n      this._keepFactors[candidate] = K.ONE;\n    });\n    this._maxWellRanked = this._maxRankingLevels === null ?\n          this._candidates.length :\n          Math.min(this._candidates.length, this._maxRankingLevels);\n    this._totalNodeStats = new NodeStats('total')\n    this._currentNodeStats = new NodeStats('build ballot tree')\n    if (this._options[K.OPTIONS.ballotTree._value] ===\n          K.OPTIONS.ballotTree.static) {\n      this._buildBallotTree();\n    } else if (this._options[K.OPTIONS.ballotTree._value] ===\n          K.OPTIONS.ballotTree.dynamic) {\n      this._buildDynamicBallotTree();\n    }\n    this._currentNodeStats.setElapsedTime();\n    this._totalNodeStats.add(this._currentNodeStats);\n  }\n\n  _subTreeToString(node, prefix='', isLastChild=false) {\n    let lines = prefix + '\"'+node.name+'\" '+node.ballotCount+'\\n';\n    const childKeys = [];\n    for (let childKey in node.children) {\n      childKeys.push(childKey);\n    }\n    childKeys.sort();\n    childKeys.forEach((child, ix) => {\n      const newPrefix = prefix === '' ?\n            ' + ' :\n            prefix.slice(0,-2) + (isLastChild ? ' ' : '|') + '  + ';\n      lines += this._subTreeToString(node.children[child], newPrefix,\n            ix === childKeys.length - 1);\n    });\n    return lines;\n  }\n\n  _printBallotTree(label) {\n    let lines = String(label)+': '+this._currentNodeStats.toString() + '\\n';\n    lines += this._subTreeToString(this._ballotTree);\n    console.debug(lines.join('\\n'));\n  }\n\n  _buildDynamicBallotTree() {\n    this._ballotTree = new RankingNode(':root');\n    this._ballotTree.ballotGroups = this._ballots;\n    this._currentNodeStats.nbrNodes = 1;\n    this._currentNodeStats.nbrLeaves = 1;\n    this._currentNodeStats.nbrAdded = 1;\n    this._currentNodeStats.nbrVisited = 1;\n    this._ballotTree.ballotGroups.forEach((ballotGroup, ix) => {\n      ballotGroup.wellRanked = new Set();\n      ballotGroup.lastUsedIndex = -1;\n      this._ballotTree.ballotCount += ballotGroup.getMultiple();\n      if ((ix + 1) % this._progress.treeInitPeriod === 0) {\n        this._progress.setDynamicTreeInitProgress(ix + 1);\n      }\n    });\n    this._progress.setDynamicTreeInitProgress(this._progress.completedLabel);\n    this._hopefulParents = Array.from(this._hopeful()).reduce(\n          (result, hopeful) => {\n      result[hopeful] = new Set();\n      return result;\n    }, {});\n    this._expandBallotTreeFromParent(this._ballotTree, this._progress);\n    this._currentNodeStats.setElapsedTime();\n  }\n\n  _expandBallotTreeFromParent(parentNode, progress=null) {\n    parentNode.ballotGroups.forEach((ballotGroup, ix) => {\n      this._distributeBallotGroup(ballotGroup, parentNode);\n      if(progress && (ix + 1) % progress.treeBuildPeriod === 0) {\n        progress.setTreeBuildProgress(ix + 1);\n      }\n    });\n    if(progress) {\n      progress.setTreeBuildProgress(progress.completedLabel);\n    }\n    parentNode.ballotGroups = [];\n  }\n\n  _distributeBallotGroup(ballotGroup, parentNode) {\n    const multiple = ballotGroup.getMultiple();\n    const rankings = ballotGroup.getRankings();\n    for(ballotGroup.lastUsedIndex++;\n          ballotGroup.lastUsedIndex < rankings.length;\n          ballotGroup.lastUsedIndex++\n          ) {\n      const rankingCode = rankings[ballotGroup.lastUsedIndex];\n      if (rankingCode === K.RANKING_CODE.undervote ||\n            ballotGroup.wellRanked.has(rankingCode)) {\n        continue;\n      }\n      ballotGroup.wellRanked.add(rankingCode);\n      if  (this._excluded.has(rankingCode)) {\n        continue;\n      }\n      if (this._statuses[rankingCode] &&\n            this._statuses[rankingCode].status === K.STATUS.defeated) {\n        continue;\n      }\n      const tabCat = rankingCode === K.RANKING_CODE.overvote ?\n            K.LABEL.overvotes : rankingCode;\n      const childNode = this._getOrMakeChild(tabCat, parentNode);\n      childNode.ballotCount += multiple;\n      if (tabCat === K.LABEL.overvotes) {\n        ballotGroup.lastUsedIndex = rankings.length + 1;\n        break;\n      }\n      if (this._statuses[rankingCode].status === K.STATUS.hopeful) {\n        childNode.ballotGroups.push(ballotGroup);\n        break;\n      }\n      parentNode = childNode;\n    }\n\n    if (ballotGroup.lastUsedIndex === rankings.length) {\n      const exhaustedLabel =\n            ballotGroup.wellRanked.size < this._maxWellRanked ?\n            K.LABEL.abstentions : K.LABEL.otherExhausted;\n      const childNode = this._getOrMakeChild(exhaustedLabel, parentNode);\n      childNode.ballotCount += multiple;\n    }\n  }\n\n  _getOrMakeChild(name, parentNode) {\n    let childNode = parentNode.children[name];\n    if (!childNode) {\n      childNode = parentNode.children[name] =\n            new RankingNode(name);\n      if ('ballotGroups' in parentNode) {\n        childNode.ballotGroups = [];\n        if (name in this._statuses &&\n              this._statuses[name].status === K.STATUS.hopeful) {\n          this._hopefulParents[name].add(parentNode);\n        }\n      }\n      this.nodeCount++;\n      parentNode.nbrChildren++;\n      this._currentNodeStats.nbrNodes++;\n      this._currentNodeStats.nbrAdded++;\n      if (parentNode.nbrChildren > 1) {\n        this._currentNodeStats.nbrLeaves++;\n      }\n    }\n    this._currentNodeStats.nbrVisited++;\n    return childNode;\n  }\n\n  _transformBallotTree(newElecteds, newDefeateds) {\n    if (this._ballotTree && this._ballotTree.ballotGroups) {\n      this._currentNodeStats = new NodeStats('transform round '+\n            this._nbrRound);\n      if (newElecteds.size) {\n        this._expandBallotTreeFromNewElecteds(newElecteds);\n      } else {\n        this._transferNodesOfNewDefeateds(newDefeateds);\n      }\n      this._currentNodeStats.setElapsedTime();\n      this._totalNodeStats.add(this._currentNodeStats);\n    }\n  }\n\n  _expandBallotTreeFromNewElecteds(newElecteds) {\n    newElecteds.forEach(newElected => {\n      this._hopefulParents[newElected].forEach(newElectedParent => {\n        const parentNode = newElectedParent.children[newElected];\n        this._currentNodeStats.nbrVisited++;\n        this._expandBallotTreeFromParent(parentNode);\n      });\n      delete this._hopefulParents[newElected];\n    });\n  }\n\n  _transferNodesOfNewDefeateds(newDefeateds) {\n    newDefeateds.forEach(newDefeated => {\n      this._hopefulParents[newDefeated].forEach(parentNode => {\n        const defeatedNode = parentNode.children[newDefeated];\n        parentNode.ballotGroups = defeatedNode.ballotGroups;\n        this._currentNodeStats.nbrVisited += 2;\n        delete parentNode.children[newDefeated];\n        this._currentNodeStats.nbrDeleted++;\n        this._currentNodeStats.nbrNodes--;\n        this._currentNodeStats.nbrLeaves--;\n        this._expandBallotTreeFromParent(parentNode);\n      });\n      delete this._hopefulParents[newDefeated];\n    });\n  }\n\n  _buildBallotTree() {\n    this._ballotTree = new RankingNode(':root');\n    this._currentNodeStats.nbrNodes = 1;\n    this._currentNodeStats.nbrLeaves = 1;\n    this._currentNodeStats.nbrAdded = 1;\n    this._currentNodeStats.nbrVisited = 1;\n    const nbrHopeful = this._hopeful().size;\n    this._ballots.forEach((ballot, ix) => {\n      const multiple = ballot.getMultiple();\n      const rankings = ballot.getRankings();\n      let currentNode = this._ballotTree;\n      const wellRanked = new Set();\n      let depth = 0;\n      let nbrWellRanked = 0;\n      currentNode.ballotCount += multiple;\n      const hadNoOvervote = rankings.every((rankingCode, ix) => {\n        if (rankingCode === K.RANKING_CODE.undervote ||\n              wellRanked.has(rankingCode)) {\n          return true;\n        }\n        if (rankingCode !== K.RANKING_CODE.overvote) {\n          nbrWellRanked++;\n        }\n        wellRanked.add(rankingCode);\n        if  (this._excluded.has(rankingCode)) {\n          return true;\n        }\n        const tabCat = rankingCode === K.RANKING_CODE.overvote ?\n              K.LABEL.overvotes : rankingCode;\n        const childNode = this._getOrMakeChild(tabCat, currentNode);\n        /*\n        if (!(rankingCode in currentNode.children)) {\n\n          currentNode.children[rankingCode] = new RankingNode(rankingCode);\n          this.nodeCount++;\n          currentNode.nbrChildren++;\n          if (currentNode.nbrChildren > 1) {\n            this.nodeLeafCount++;\n          }\n        }\n        */\n        depth++;\n        childNode.ballotCount += multiple;\n        currentNode = childNode;\n        if (rankingCode === K.RANKING_CODE.overvote) {\n          return false;\n        }\n        return true;\n      });\n      if (hadNoOvervote &&\n            (depth < nbrHopeful - 1 || nbrHopeful === 0)) {\n        const exhaustedLabel =\n              nbrWellRanked < this._maxWellRanked ?\n              K.LABEL.abstentions : K.LABEL.otherExhausted;\n        const childNode = this._getOrMakeChild(exhaustedLabel, currentNode);\n        /*\n        if (!(exhaustedLabel in currentNode.children)) {\n          currentNode.children[exhaustedLabel] =\n                new RankingNode(exhaustedLabel);\n          this.nodeCount++;\n          currentNode.nbrChildren++;\n          if (currentNode.nbrChildren > 1) {\n            this.nodeLeafCount++;\n          }\n        }\n        */\n        childNode.ballotCount += multiple;\n        currentNode = childNode; // is needed ?\n      }\n      if((ix + 1) % this._progress.treeBuildPeriod === 0) {\n        this._progress.setTreeBuildProgress(ix + 1);\n      }\n    });\n    this._progress.setTreeBuildProgress(this._progress.completedLabel);\n  }\n\n  _processAMeeksRound() {\n    /*\n    Process vote counting for a Meek round\n\n    Return a boolean indicating whether to continue with another round.\n    */\n    if (this._nbrRound > 0 ||\n          (this._nbrRound === 0 &&\n          this._options[K.OPTIONS.alwaysCountVotes._value] ===\n            K.OPTIONS.alwaysCountVotes.no)) {\n      // Reference rule step B.1, Test count complete\n      const nbrElectedOrProtected = UBF.setUnion(\n            this._elected(), this._protectedzz).size;\n      if (nbrElectedOrProtected === this._nbrSeatsToFill ||\n            this._hopeful().size + this._elected().size\n            <= this._nbrSeatsToFill) {\n        // Reference rule step C.1, Elect remaining\n        if (nbrElectedOrProtected < this._nbrSeatsToFill) {\n          this._electCandidates(this._hopeful());\n        // Reference rule step C.2, Defeat remaining\n        } else {\n          this._electCandidates(UBF.setDifference(this._protectedzz,\n                this._elected()));\n          this._defeatCandidates(this._hopeful());\n        }\n        return false;\n      }\n    }\n    this._nbrRound += 1;\n    this._totalNodeStats.nbrRounds++\n    if (this._nbrRound > this._candidates.length + 2) {\n      throw new MeekImplementationError(\n            'Error: Tabulation requires too many rounds', [\n            ['starting round #', this._nbrRound],\n            ['nbr of candidates', this._candidates.length],\n      ]);\n      return false;\n    }\n    if (this._nbrRound > 1) {\n      this._transformBallotTree(this._newElecteds, this._defeatThisRound);\n    }\n    if (this._testing['stopAtBegin'] === this._nbrRound) {\n      return false;\n    }\n    this._prevTotalSurplus = null;\n    this._nbrIteration = 0;\n    this._defeatThisRound = new Set();\n    this._nbrHopefuls = this._hopeful().size;\n    // Reference rule step B.2, Iterate\n    while (this._processAMeeksIteration()) {\n      this._prevTotalSurplus = this._totalSurplus;\n    }\n    for (let label in this._iterTally) {\n      const votes = this._iterTally[label];\n      if (this._statuses[label] === undefined ||\n            this._statuses[label].status !== K.STATUS.defeated) {\n        this._tallies[label].push(votes);\n      }\n    }\n    if (this._testing['stopAfterStatusUpdate'] === this._nbrRound) {\n      return false;\n    }\n    if (!this._newElecteds.size) {\n      // Check for alternative / multiple / batch / simultaneous defeats\n      // before single defeats\n      if (this._getAltDefeatsOption() === K.OPTIONS.alternativeDefeats.yes &&\n            this._options[K.OPTIONS.typeOfAltDefs._value] ===\n            K.OPTIONS.typeOfAltDefs.beforeSingleDefeats) {\n        this._defeatThisRound = this._getStvAlternativeDefeats();\n      }\n      // Reference rule step B.3, Defeat low candidate\n      if (!this._defeatThisRound.size && this._hopeful().size) {\n        this._defeatThisRound = this._getSingleDefeatCandidate();\n      }\n      this._defeatCandidates(this._defeatThisRound);\n    }\n    if (this._testing['stopAtEnd'] === this._nbrRound) {\n      return false;\n    }\n    this._progress.setRoundProgress(this._nbrRound, this._nbrIteration,\n          this._hopeful().size);\n    return true;\n  }\n\n  _processAMeeksIteration() {\n    this._nbrIteration += 1;\n    this.totalNbrIterations++;\n    this._initIterTally();\n    // Reference rule step B.2.a, Distribute votes\n    this._currentNodeStats = new NodeStats('distribute round '+this._nbrRound+\n          ' iteration '+this._nbrIteration);\n    this._currentNodeStats.nbrIterations = 1;\n    if (this._ballotTree) {\n      this._distributeVotesByTree();\n    } else {\n      this._distributeVotes();\n    }\n    this._currentNodeStats.setElapsedTime();\n    this._totalNodeStats.add(this._currentNodeStats);\n    this._totalCandidateVotes = this._getTotalCandidateVotes();\n    this._iterTally[K.LABEL.totalCandidateVotes] = (\n          this._totalCandidateVotes);\n    this._iterTally[K.LABEL.totalVotes] = (\n          this._iterTally[K.LABEL.totalCandidateVotes]\n          .plus(this._iterTally[K.LABEL.overvotes])\n          .plus(this._iterTally[K.LABEL.abstentions])\n          .plus(this._iterTally[K.LABEL.otherExhausted]));\n    //# Reference rule step B.2.b, Update quota\n    this._setQuota();\n    this._updateCandidateStatusTally();\n\n    if (this._testing['stopAfterStatusUpdate'] === this._nbrRound) {\n      return false;\n    }\n\n    // Reference rule step B.2.c, Find winners\n    // candidates with more than a quota of votes are elected\n    this._newElecteds = this._getNewElecteds();\n    if (this._newElecteds.size) {\n      this._electCandidates(this._newElecteds);\n    }\n    // Reference rule step B.2.d, Calculate the total surplus\n    this._totalSurplus = this._getTotalSurplus();\n    this._iterTally[K.LABEL.totalSurplus] = this._totalSurplus;\n    // Reference rule step B.2.e, Test for iteration finished\n    // Test whether this is the final iteration for the round\n    if (this._newElecteds.size) {\n      return false;\n    }\n    // Check for alternative / multiple / batch / simultaneous defeats\n    // if no new electeds\n    if (this._getAltDefeatsOption() === K.OPTIONS.alternativeDefeats.yes &&\n          this._options[K.OPTIONS.typeOfAltDefs._value] ===\n          K.OPTIONS.typeOfAltDefs.ifNoNewElecteds) {\n      this._defeatThisRound = this._getStvAlternativeDefeats();\n      if (this._defeatThisRound.size) {\n        return false;\n      }\n    }\n    if (this._totalSurplus.isLess(this._omega)) {\n      return false;\n    }\n    if (this._prevTotalSurplus !== null &&\n          this._totalSurplus.isGreaterEqual(this._prevTotalSurplus)) {\n      return false;\n    }\n    // Check for alternative / multiple / batch / simultaneous defeats\n    // per reference rule, possibly with deferred surplus distribution\n    if (this._getAltDefeatsOption() === K.OPTIONS.alternativeDefeats.yes &&\n          this._options[K.OPTIONS.typeOfAltDefs._value] ===\n          K.OPTIONS.typeOfAltDefs.perRefRule) {\n      this._defeatThisRound = this._getStvAlternativeDefeats();\n      if (this._defeatThisRound.size) {\n        return false;\n      }\n    }\n    // Reference rule step B.2.f, Update keep factors\n    this._updateKeepFactors();\n    this._progress.setIterationProgress(this._nbrRound, this._nbrIteration,\n          this._nbrHopefuls);\n    return true;\n  }\n\n  _initIterTally() {\n    this._iterTally = {};\n    for (let tabCode in this._tallies) {\n      if (this._statuses[tabCode] !== undefined &&\n            this._statuses[tabCode].status === K.STATUS.defeated) {\n        this._iterTally[tabCode] = null;\n      } else {\n        this._iterTally[tabCode] = K.ZERO;\n      }\n    }\n    this._iterTally[K.LABEL.nbrIterations] = this._nbrIteration;\n  }\n\n  _distributeVotesByTree() {\n    /*\n    Distribute votes from ballots to candidates using the ballot tree\n    */\n    this._distributeFromNode(this._ballotTree, K.ONE, 0);\n  }\n\n  _distributeFromNode(node, ballotWeight, depth) {\n    depth++;\n    this._currentNodeStats.nbrVisited++;\n    const parentMultiple = node.ballotCount;\n    const rankingCode = node.name;\n    if (node.name !== ':root' &&\n          (!this._statuses[rankingCode] ||\n          this._statuses[rankingCode].status !== K.STATUS.defeated)) {\n      let rankingKeep = ballotWeight;\n      if (this._statuses[rankingCode] !== undefined) {\n        if ((this._statuses[rankingCode].status === K.STATUS.hopeful ||\n              this._statuses[rankingCode].status === K.STATUS.elected)\n              ) {\n          rankingKeep = ballotWeight.times(\n                this._keepFactors[rankingCode], K.ROUND.away);\n        }\n      }\n      try {\n      this._iterTally[rankingCode] = (\n            this._iterTally[rankingCode].plus(\n            rankingKeep.times(parentMultiple)));\n      }\n      catch (exc) {\n        throw new MeekImplementationError(\n              'Error: Failure to accumulate votes to iteration tally.', [\n              ['node name', node.name],\n              ['node ballotCount', node.ballotCount],\n              ['rankingCode', rankingCode],\n              ['iterTally[rankingCode]',\n                JSON.stringify(this._iterTally[rankingCode])],\n        ], exc);\n      }\n      ballotWeight = ballotWeight.minus(rankingKeep);\n    }\n    if (ballotWeight.isEqual(K.ZERO)) {\n      return;\n    }\n    for (let childName in node.children) {\n      const child = node.children[childName];\n      this._distributeFromNode(child, ballotWeight, depth);\n    }\n  }\n\n  _distributeVotes() {\n    /*\n    Distribute votes from ballots to candidates without using the ballot tree\n    */\n    this._ballots.forEach((ballot) => {\n      let ballotWeight = K.ONE;\n      const wellRanked = new Set();\n      const multiple = ballot.getMultiple();\n      ballot.getRankings().every((rankingCode, rankingIndex) => {\n        if (rankingCode === K.RANKING_CODE.overvote) {\n          this._iterTally[K.LABEL.overvotes] = (\n                this._iterTally[K.LABEL.overvotes].plus(\n                ballotWeight.times(multiple)));\n          ballotWeight = K.ZERO;\n          this._currentNodeStats.nbrVisited++;\n          return false;\n        }\n        if (this._statuses[rankingCode] !== undefined) {\n          if ((this._statuses[rankingCode].status === K.STATUS.hopeful ||\n                this._statuses[rankingCode].status === K.STATUS.elected) &&\n                !wellRanked.has(rankingCode)) {\n            const rankingKeep = ballotWeight.times(\n                  this._keepFactors[rankingCode], K.ROUND.away);\n            this._iterTally[rankingCode] = (\n                  this._iterTally[rankingCode].plus(\n                  rankingKeep.times(multiple)));\n            ballotWeight = ballotWeight.minus(rankingKeep);\n            this._currentNodeStats.nbrVisited++;\n            if (ballotWeight.isEqual(K.ZERO)) {\n              return false;\n            }\n          }\n          wellRanked.add(rankingCode);\n        }\n        return true;\n      });\n\n      if (ballotWeight.isGreater(K.ZERO)) {\n        this._currentNodeStats.nbrVisited++;\n        const exhaustedVotes = ballotWeight.times(multiple);\n        if (wellRanked.size < this._maxWellRanked) {\n          this._iterTally[K.LABEL.abstentions] = (\n                this._iterTally[K.LABEL.abstentions].plus(exhaustedVotes));\n        } else {\n          this._iterTally[K.LABEL.otherExhausted] = (\n                this._iterTally[K.LABEL.otherExhausted].plus(exhaustedVotes));\n        }\n      }\n    });\n  }\n\n  _getCandidateDestiny(candidate) {\n    let result = K.DESTINY.normal;\n    if (this._excluded.has(candidate)) {\n      result = K.DESTINY.excluded;\n    } else if (this._protectedzz.has(candidate)) {\n      result = K.DESTINY.protected;\n    }\n    return result;\n  }\n\n  _getTotalCandidateVotes() {\n    let result = K.ZERO;\n    for (let candidate in this._statuses) {\n      if (this._iterTally[candidate] !== null) {\n        result = result.plus(this._iterTally[candidate]);\n      }\n    }\n    return result;\n  }\n\n  _setQuota() {\n    let quota = this._totalCandidateVotes.divideBy(this._nbrSeatsToFill + 1);\n    quota = quota.plus(K.ULP);\n    this._quota = quota;\n    if (this._protectedzz.size) {\n      this._protectedQuota = quota;\n      this._iterTally[K.LABEL.protectedQuota] = this._protectedQuota;\n      this._protectedVotes = K.ZERO;\n      this._protectedzz.forEach((candidate) => {\n        this._protectedVotes = this._protectedVotes.plus(\n              this._iterTally[candidate].isLess(this._protectedQuota) ?\n              this._iterTally[candidate] : this._protectedQuota);\n      });\n      this._quotaVotes = this._totalCandidateVotes.minus(this._protectedVotes);\n      this._iterTally[K.LABEL.quotaVotes] = this._quotaVotes;\n      quota = this._quotaVotes.divideBy(this._nbrUnprotectedSeats + 1);\n      this._quota = quota.plus(K.ULP);\n    }\n    this._iterTally[K.LABEL.quota] = this._quota;\n  }\n\n  _getQuota(candidate) {\n    const result = (this._protectedzz.has(candidate) ?\n          this._protectedQuota : this._quota);\n    return result;\n  }\n\n  _updateCandidateStatusTally() {\n    for (let candidate in this._statuses) {\n      const candidateStatus = this._statuses[candidate];\n      if (candidateStatus.status === K.STATUS.hopeful) {\n        candidateStatus.nbrRound = this._nbrRound;\n        candidateStatus.votes = this._iterTally[candidate];\n      }\n      candidateStatus.keepFactor = this._keepFactors[candidate];\n    }\n  }\n\n  _getTotalSurplus() {\n    let result = K.ZERO;\n    for (let candidate in this._statuses) {\n      if (this._statuses[candidate].status === K.STATUS.elected) {\n        result = result.plus(this._iterTally[candidate]\n              .minus(this._getQuota(candidate)));\n      }\n    }\n    return result;\n  }\n\n  _updateKeepFactors() {\n    for (let candidate in this._keepFactors) {\n      const keepFactor = this._keepFactors[candidate];\n      if (this._statuses[candidate].status === K.STATUS.elected) {\n        const quota = this._getQuota(candidate);\n        const product = keepFactor.times(quota, K.ROUND.away);\n        const newKeepFactor = product.divideBy(this._iterTally[candidate],\n              K.ROUND.away);\n        this._keepFactors[candidate] = newKeepFactor;\n      }\n    }\n  }\n\n  _elected() {\n    /*\n    Provide a set of the elected candidates\n    */\n    const electedCandidates = new Set();\n    for (let candidate in this._statuses) {\n      if (this._statuses[candidate].status === K.STATUS.elected) {\n        electedCandidates.add(candidate);\n      }\n    }\n    return electedCandidates;\n  }\n\n  _hopeful() {\n    /*\n    Provide a set of the hopeful candidates\n    */\n    const hopefulCandidates = new Set();\n    for (let candidate in this._statuses) {\n      if (this._statuses[candidate].status === K.STATUS.hopeful) {\n        hopefulCandidates.add(candidate);\n      }\n    }\n    return hopefulCandidates;\n  }\n\n  _hopefulVotes() {\n    /*\n    Get a dict of hopeful candidates and their vote totals\n    */\n    const hopefulVotes = {};\n    this._hopeful().forEach((candidate) => {\n      hopefulVotes[candidate] = this._statuses[candidate].votes;\n    });\n    return hopefulVotes;\n  }\n\n  _getNewElecteds() {\n    /*\n    Get a dict of hopeful candidates that have reached the quota\n    */\n    const newElecteds = new Set();\n    this._hopeful().forEach((candidate) => {\n      if (this._iterTally[candidate].isGreaterEqual(\n            this._getQuota(candidate))) {\n        newElecteds.add(candidate);\n      }\n    });\n    return newElecteds;\n  }\n\n  _electCandidates(candidates) {\n    /*\n    Update the status of each candidate in the list\n    */\n    candidates.forEach((candidate) => {\n      if (this._statuses[candidate] instanceof Status &&\n            this._statuses[candidate].status === K.STATUS.hopeful) {\n            this._statuses[candidate].status = K.STATUS.elected;\n      } else {\n        throw new MeekImplementationError(\n          'Attempting to elect a candidate that is not hopeful.', [\n          ['candidate', candidate],\n          ['status', this._statuses[candidate].status],\n          ['round', this._nbrRound]\n        ]);\n      }\n    });\n  }\n\n  _defeatable() {\n    /*\n    Provide a set of the hopeful candidates that are not protectedzz\n    */\n    const result = new Set();\n    this._hopeful().forEach((candidate) => {\n      if (!this._protectedzz.has(candidate)) {\n        result.add(candidate);\n      }\n    });\n    return result;\n  }\n\n  _defeatableVotes() {\n    /*\n    Get a dict of defeatable candidates and their vote totals\n    */\n    const defeatableVotes = {};\n    this._defeatable().forEach((candidate) => {\n      defeatableVotes[candidate] = this._statuses[candidate].votes;\n    });\n    return defeatableVotes;\n  }\n\n  _defeatCandidates(candidates) {\n    /*\n    Defeat the collection of candidates\n    */\n    candidates.forEach((candidate) => {\n      if (this._statuses[candidate] instanceof Status &&\n            this._statuses[candidate].status === K.STATUS.hopeful &&\n            !this._protectedzz.has(candidate)) {\n        this._statuses[candidate].status = K.STATUS.defeated;\n        this._keepFactors[candidate] = K.ZERO;\n      } else {\n        throw MeekImplementationError(\n          'Attempting to defeat a candidate that is not defeatable.', [\n          ['candidate', candidate],\n          ['status', this._statuses[candidate].status],\n          ['round', this._nbrRound]\n        ]);\n      }\n    });\n  }\n\n  _getSingleDefeatCandidate() {\n    /*\n    Get the candidate with the fewest votes, after resolving any tie\n\n    Returns\n    -------\n    A singleton set of the unprotected, hopeful candidate with the\n    fewest votes, after resolving any tie.\n\n    Raises\n    ------\n    MeekValueError\n      If there is a tied candidate not in this._tieBreaker.\n\n    */\n    const defeatableVotes = this._defeatableVotes();\n    let minVotes = K.ONE.times(K.Decimal.MAX_SAFE_VALUE + 1);\n    for (let candidate in defeatableVotes) {\n      const candidateVotes = defeatableVotes[candidate];\n      if (candidateVotes.isLess(minVotes)) {\n        minVotes = candidateVotes;\n      }\n    }\n    const defeatThreshold = minVotes.plus(this._totalSurplus);\n    const trailingCandidates = new Set()\n    for (let candidate in defeatableVotes) {\n      const votes = defeatableVotes[candidate];\n      if (votes.isLessEqual(defeatThreshold)) {\n        trailingCandidates.add(candidate);\n      }\n    }\n    const defeatCandidate = this._resolveTie(trailingCandidates);\n    return new Set([defeatCandidate]);\n  }\n\n  _resolveTie(tiedCandidates) {\n    /*\n    Select the tied candidate that is earliest in the tieBreaker.\n\n    Arguments\n    ---------\n    tiedCandidates\n      A set of one or more candidates that are tied.\n\n    Returns\n    -------\n    The candidate name with the lowest tieBreaker index.\n\n    Raises\n    ------\n    MeekValueError\n      If there is a tied candidate not in this._tieBreaker.\n\n    */\n    if (tiedCandidates.size <= 1) {\n      return Array.from(tiedCandidates)[0];\n    }\n    const notInTieBreaker = UBF.setDifference(tiedCandidates,\n          UBF.getKeys(this._tieBreaker));\n    if (notInTieBreaker.size) {\n      throw new MeekValueError('Tied candidate is not in tieBreaker:', [\n            ['candidate', Array.from(notInTieBreaker)[0]],\n            ['round', this._nbrRound],\n            ['tiedCandidates', tiedCandidates],\n            ['tieBreaker', this._tieBreaker],\n      ]);\n    }\n    const tiedCandidatesByIndex = {};\n    tiedCandidates.forEach((candidate) => {\n      tiedCandidatesByIndex[this._tieBreaker[candidate]] = candidate;\n    });\n    let minIndex = Infinity;\n    tiedCandidates.forEach((candidate) => {\n      const index = this._tieBreaker[candidate];\n      if (index < minIndex) {\n        minIndex = index;\n      }\n    });\n\n    const selectedCandidate = tiedCandidatesByIndex[minIndex];\n    return selectedCandidate;\n  }\n\n  _getAltDefeatsOption() {\n    /*\n    Get the value for alternative defeats for the current round\n\n    Returns\n    -------\n    A string that is the option for alternative defeats in the round\n\n    Raises\n    ------\n    MeekValueError\n      If the option is stored as a tuple of strings, one per round, but\n      the tuple is too short.\n\n    */\n    const optionsValue = this._options[K.OPTIONS.alternativeDefeats._value];\n    let altDefeatsOption;\n    if (typeof optionsValue === 'string') {\n      altDefeatsOption = optionsValue;\n    } else {\n      if (optionsValue instanceof Array &&\n            this._nbrRound <= optionsValue.length) {\n        altDefeatsOption = optionsValue[this._nbrRound - 1];\n      } else {\n        throw new MeekValueError(\n              'Round by round value for alternative defeats option'+\n              ' is too short:', [\n              ['nbrRound', this._nbrRound],\n              ['optionsValue.length', optionsValue.length],\n              ['optionsValue', optionsValue],\n        ]);\n      }\n    }\n    return altDefeatsOption;\n  }\n\n  _getStvAlternativeDefeats() {\n    /*\n    Get largest set of STV candidates that can be alternatively defeated\n\n    Returns\n    -------\n    A set of candidates that can be alternatively defeated per the\n    conditions of the reference rule, but allowing for protectedzz,\n    hopeful candidates.  In particular, only defeatable candidates, i.e.\n    unprotectedzz hopeful candidates, are treated as eligible for defeat,\n    either now or at a later point in the tabulation.\n\n    */\n    const totalSurplusVotes = this._totalSurplus;\n    const defeatableVotes = this._defeatableVotes();\n    let totalVotesToDefeat = UBF.getOwnItems(defeatableVotes).reduce(\n          (sum, item) => { return sum.plus(item.value); }, K.ZERO);\n    const byVotes = UBF.getOwnItems(defeatableVotes).sort((a,b) => {\n          return a.value.isLess(b.value) ? 1 :\n                a.value.isEqual(b.value) ? 0 : -1;\n    });\n    let candidatesToDefeat = new Set(UBF.getKeys(defeatableVotes));\n    const nbrElected = this._elected().size;\n    // Breaking out of this loop produces a set of candidates to defeat,\n    //     possibly an empty set.\n    // Not breaking out of this loop will produce an empty set.\n    //let nbrDefeated = byVotes.length;\n    byVotes.some((item, ix) => {\n      const candidate = item.name;\n      const lowestRemainingVotes = item.value;\n      totalVotesToDefeat = totalVotesToDefeat.minus(lowestRemainingVotes);\n      candidatesToDefeat.delete(candidate);\n      const nbrRemaining = ix + 1\n      //nbrDefeated -= 1\n      //let mostVotesToDefeat = (nbrRemaining < byVotes.length ?\n      //      byVotes[ix+1].value : K.ZERO);\n      // Reference rule terminology:\n      //   candidate c is byVotes[ix + 1].name if ix + 1 is a valid index\n      //   votes v is mostVotesToDefeat\n      //   votes v'' is lowestRemainingVotes\n      const cond_2 = (totalVotesToDefeat.plus(totalSurplusVotes).isLess(\n              lowestRemainingVotes));\n      const cond_1 = (nbrRemaining + nbrElected >= this._nbrSeatsToFill);\n      const condAltDef = cond_1 && cond_2;\n      // Test top-level conditions\n      if (condAltDef) {\n        return true;\n      }\n      return false;\n    });\n    return candidatesToDefeat;\n  }\n\n}\n\n\n",
    "static": true,
    "longname": "/home/circ/devel/rcv/meeks-prf-js-github/src/meek.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "name": "TYPETREE",
    "memberof": "src/meek.js",
    "static": true,
    "longname": "src/meek.js~TYPETREE",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/meek.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "function",
    "name": "tabulate",
    "memberof": "src/meek.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/meek.js~tabulate",
    "access": "public",
    "export": true,
    "importPath": "meeks-prf-js/src/meek.js",
    "importStyle": "{tabulate}",
    "description": "Tabulate an RCV / STV contest per prfound.org's Meek's method.\n\nThis is a convenience function for accessing the `Tabulation` class.\n\nCreate an instance of the `Tabulation` class, using the supplied\narguments, then call the instance's `tabulate()` method,\nreturning the results from that method.\n\nArguments\n---------\nThe same as the constructor method of the `Tabulation` class.\n\nReturns\n-------\nThe same as the `tabulate()` method of the `Tabulation` class.\n\nThrows\n------\nThe same as the `tabulate()` method of the `Tabulation` class.",
    "lineNumber": 48,
    "params": [
      {
        "name": "nbrSeatsToFill",
        "types": [
          "*"
        ]
      },
      {
        "name": "candidates",
        "types": [
          "*"
        ]
      },
      {
        "name": "ballots",
        "types": [
          "*"
        ]
      },
      {
        "name": "maxRankingLevels",
        "types": [
          "*"
        ]
      },
      {
        "name": "tieBreaker",
        "types": [
          "*"
        ]
      },
      {
        "name": "excluded",
        "types": [
          "*"
        ]
      },
      {
        "name": "protectedzz",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "progressCallback",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "class",
    "name": "RankingNode",
    "memberof": "src/meek.js",
    "static": true,
    "longname": "src/meek.js~RankingNode",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/meek.js",
    "importStyle": null,
    "description": "The nodes of a ballot tree.\n\nA node represents a candidate Id for a candidate or a tabulation\ncategory for exhausted votes (such as overvotes, abstentions, or\nother exhausted votes), or a node can be the root of the ballot tree\nwhich does not represent any of those other things.",
    "lineNumber": 65,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/meek.js~RankingNode",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~RankingNode#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The candidate Id of the candidate that the\n  node represents, a tabulation category label, or ':root' for the\n  root node."
      }
    ]
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "name",
    "memberof": "src/meek.js~RankingNode",
    "static": false,
    "longname": "src/meek.js~RankingNode#name",
    "access": "public",
    "description": "The name of the node, as given by the constructor parameter.",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "ballotCount",
    "memberof": "src/meek.js~RankingNode",
    "static": false,
    "longname": "src/meek.js~RankingNode#ballotCount",
    "access": "public",
    "description": "The number of ballots represented by the node, an integer.",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "children",
    "memberof": "src/meek.js~RankingNode",
    "static": false,
    "longname": "src/meek.js~RankingNode#children",
    "access": "public",
    "description": "A data object of the node's children, if any,\n   keyed by child name\n   and values being the child nodes.",
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "nbrChildren",
    "memberof": "src/meek.js~RankingNode",
    "static": false,
    "longname": "src/meek.js~RankingNode#nbrChildren",
    "access": "public",
    "description": "The number of children for this node.",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "class",
    "name": "NodeStats",
    "memberof": "src/meek.js",
    "static": true,
    "longname": "src/meek.js~NodeStats",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/meek.js",
    "importStyle": null,
    "description": "A collection of statistics for building and using a ballot tree.\n\n Supports accumulating counts and elapsed times from one instance\n into another.",
    "lineNumber": 94,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 139,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/meek.js~NodeStats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~NodeStats#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 99,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "A descriptive name for the use of this\n  instance."
      }
    ]
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "label",
    "memberof": "src/meek.js~NodeStats",
    "static": false,
    "longname": "src/meek.js~NodeStats#label",
    "access": "public",
    "description": "A descriptive name for the use of this instance.",
    "lineNumber": 102,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "nbrNodes",
    "memberof": "src/meek.js~NodeStats",
    "static": false,
    "longname": "src/meek.js~NodeStats#nbrNodes",
    "access": "public",
    "description": "The number of nodes in the tree or in a subtree.",
    "lineNumber": 105,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "nbrLeaves",
    "memberof": "src/meek.js~NodeStats",
    "static": false,
    "longname": "src/meek.js~NodeStats#nbrLeaves",
    "access": "public",
    "description": "The number of nodes leaves in the tree or in a subtree.",
    "lineNumber": 108,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 143,
    "kind": "member",
    "name": "nbrVisited",
    "memberof": "src/meek.js~NodeStats",
    "static": false,
    "longname": "src/meek.js~NodeStats#nbrVisited",
    "access": "public",
    "description": "The number of visits to nodes during a process.",
    "lineNumber": 111,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "nbrRounds",
    "memberof": "src/meek.js~NodeStats",
    "static": false,
    "longname": "src/meek.js~NodeStats#nbrRounds",
    "access": "public",
    "description": "The number of rounds tabulated while stats were gathered.",
    "lineNumber": 114,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "name": "nbrIterations",
    "memberof": "src/meek.js~NodeStats",
    "static": false,
    "longname": "src/meek.js~NodeStats#nbrIterations",
    "access": "public",
    "description": "The number of iterations tabulated while stats were gathered.",
    "lineNumber": 117,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "nbrAdded",
    "memberof": "src/meek.js~NodeStats",
    "static": false,
    "longname": "src/meek.js~NodeStats#nbrAdded",
    "access": "public",
    "description": "The number of nodes added to a tree during a process.",
    "lineNumber": 120,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "nbrDeleted",
    "memberof": "src/meek.js~NodeStats",
    "static": false,
    "longname": "src/meek.js~NodeStats#nbrDeleted",
    "access": "public",
    "description": "The number of nodes deleted from a tree during a process.",
    "lineNumber": 123,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "elapsedTime",
    "memberof": "src/meek.js~NodeStats",
    "static": false,
    "longname": "src/meek.js~NodeStats#elapsedTime",
    "access": "public",
    "description": "The amount of elapsed wall time during a process.",
    "lineNumber": 126,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 149,
    "kind": "member",
    "name": "startTime",
    "memberof": "src/meek.js~NodeStats",
    "static": false,
    "longname": "src/meek.js~NodeStats#startTime",
    "access": "public",
    "description": "The start wall time for a process.",
    "lineNumber": 129,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "toString",
    "memberof": "src/meek.js~NodeStats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~NodeStats#toString",
    "access": "public",
    "description": "Converts the stats to a human-readable string that can be printed.",
    "lineNumber": 134,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A human-readable string showing the stats."
    },
    "params": []
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "add",
    "memberof": "src/meek.js~NodeStats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~NodeStats#add",
    "access": "public",
    "description": "Accumulate the counts, etc. from another NodeStats instance\ninto this one.",
    "lineNumber": 146,
    "params": [
      {
        "nullable": null,
        "types": [
          "NodeStats"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "Statistics to add to this."
      }
    ],
    "return": null
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "setElapsedTime",
    "memberof": "src/meek.js~NodeStats",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~NodeStats#setElapsedTime",
    "access": "public",
    "description": "Record accumulated elapsed time and allow for tracking another\n   interval of elapsed time.",
    "lineNumber": 166,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The number of seconds of elapsed time in the\n  most recently concluded interval."
    },
    "params": []
  },
  {
    "__docId__": 163,
    "kind": "class",
    "name": "Tabulation",
    "memberof": "src/meek.js",
    "static": true,
    "longname": "src/meek.js~Tabulation",
    "access": "public",
    "export": true,
    "importPath": "meeks-prf-js/src/meek.js",
    "importStyle": "{Tabulation}",
    "description": "A class for Meek tabulations per prfound.org's reference rule,\nplus extensions.\n\nImplements the tabulation logic for Meek RCV / STV as described at:\n\n  https://prfound.org/resources/reference/reference-meek-rule/\n\nTypical use of this class is to instantiate it and then run its\ntabulate() method to get the results.\n\nThis tabulation class differs from the reference rule for Meek's\nmethod, as described by prfound.org in several ways.\n\nThis tabulation routine accepts ballots that have anomalous\nranking patterns, such as duplicate rankings (ranking the same\ncandidate at more than one ranking level), skipped ranking levels,\nand overvoted ranking levels (more than one candidate ranked at the\nsame ranking level).\nThe prfound.org algorithm is described in terms that implicitly\nassume that such duplicate rankings and overvoted ranking levels do\nnot exist in the ballots it processes.\n\nFor a duplicate ranking, this tabulation will consider only the most\npreferred ranking of a candidate, rankings at less preferred ranking\nlevels for the same candidate are ignored.\n\nAn empty ranking level, a ranking level without a ranking, is\nignored, whether or not less preferred ranking levels do have\nrankings.\n\nAn overvoted ranking level causes that ranking level and all less\npreferred ranking levels to be ignored.\n\n\nTerminology\n-----------\n\nSeveral arguments or parts of an argument are or can be an ordered\ncollection of string values.\n\nAn ordered collection of string values may be represented as one of\nthe following:\n\n  + an array of strings\n  + a delimiter-first string, which is a string in which the first\n    character is the delimiter, followed by the component string\n    values separated by the delimiter.\n    The delimiter character may not be part of any of the component\n    string values.\n\nThe following Javascript expressions specify equivalent ordered\ncollections of string values:\n\n```\n ['A', 'B', '', 'C', '#', 'D']\n ' A B  C # D'\n '|A|B||C|#|D'\n```\n\nAs a special case, the empty string is considered a delimiter-first\nstring that repreesents the empty array.\nAlso, a delimiter-first string with just one character represents an\narray with just one empty string in it.\n\nValues that use an ordered collection of string values include those\nfor specifying candidates, a tieBreaker, the rankings for a ballot,\nand certain values for the sub-option 'alternativeDefeats'.\n\nOther values require an unordered collection of string values.\nThey are specified as an ordered collection of string values,\neither as an array of strings or as a delimiter-first string,\nbut the ordering is not significant.\nThis is used for the excluded and protected values.",
    "lineNumber": 251,
    "interface": false
  },
  {
    "__docId__": 164,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#constructor",
    "access": "public",
    "description": "Initialize a tabulation for a Meek STV contest per prfound.org",
    "lineNumber": 583,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "nbrSeatsToFill",
        "description": "The number of seats to fill, an integer that is at least one.\n  This is also sometimes referred to as the maximum allowed number\n  of winners or the number of candidates to elect."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "candidates",
        "description": "An ordered collection of strings, each of which servers as the\n  unique candidate identifier for its candidate.\n  A candidate identifier is sometimes referred to as a\n  a candidate ID, a candId, a candidate name, or a ranking code.\n  A candidate identifier may not begin with a colon (':'),\n  may not be the empty string, and may not be the string '#'."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "ballots",
        "description": "An array of ballot groups.\n\nA ballot group represents a number of ballots with the same\nrankings.\nA ballot group can be specified as an array of length two with\nthe following values:\n\n- multiple\n  A positive integer indicating how many individual ballots are\n  summarized into this ballot group.\n\n- rankings\n  An ordered collection of strings,\n  each of which is a candidate identifier or other\n  ranking code,\n  ordered from most preferred first to least preferred last.\n\n  Other ranking codes are:\n\n  - The empty string, indicating an empty ranking level.\n  - The string '#', indicating an overvote ranking.\n\n  A trailing empty ranking does not have to be specified.\n\nA ballot group can also be specified with just its rankings,\nletting its multiple default to 1.\nThe rankings can be specified\neither as an array of strings or as a delimiter-first string.\n\nSo the following are equivalent ways of specifying a ballot group\nthat represents just one ballot:\n```\n [1, [\"A\", \"B\", \"C\"]]\n [1, \" A B C\"]\n [1, \">A>B>C\"]\n [\"A\", \"B\", \"C\"]\n \" A B C\"\n```"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "maxRankingLevels",
        "description": "The maximum number of candidates that each voter is allowed to\n  rank on a ballot, i.e. the maximum length of a ballot's rankings,\n  when expressed as an array.\n  The value for maxRankingLevels must be null\n  or an integer that is at least three.\n  If it is null,\n  there is no restriction on the length of a ballot's rankings."
      },
      {
        "nullable": null,
        "types": [
          "array<string>",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "tieBreaker",
        "description": "An ordered collection of candidate identifiers.\n  Whenever two or more candidates are tied to be defeated,\n  the tied candidate that is listed earliest in the tieBreaker\n  is chosen to be defeated,\n  provided that all of the tied candidates are listed in the\n  tieBreaker.\n\n  The tieBreaker can represent a random ordering of the candidates,\n  determined by lot.\n  This is a sufficient tie breaking procedure\n  that is compatible with the prfound.org reference rule."
      },
      {
        "nullable": null,
        "types": [
          "array<string>",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "excluded",
        "description": "An unordered collection of candidate identifiers\n  for those candidates that are excluded (a.k.a. withdrawn)\n  from the tabulation.\n  An excluded candidate is not eligible to be elected\n  or receive votes,\n  is never a hopeful candidate during the tabulation,\n  and is designated as defeated before the first round of\n  tabulation begins."
      },
      {
        "nullable": null,
        "types": [
          "array<string>",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "protectedzz",
        "description": "An unordered collection of candidate identifiers\n  that are protected from being defeated\n  and so are guaranteed of being elected.\n\n  A protected candidated is not allowed to also be an excluded\n  candidate.\n  The number of protected candidates may not be more than the\n  number of seats to fill.\n\n  Designating protected candidates can be useful for example\n  when filling a vacancy by retabulating the ballots of a\n  previous election.\n\n  When there are protected candidates,\n  there are separate quotas for protected candidates and\n  unprotected candidates,\n  in order to assure that an excess of unprotected candidates\n  are not elected.\n\n  Protected candidates are elected subject to a protected quota,\n  which is equal to what the regular quota would otherwise be\n  if no candidates were protected.\n  A protected candidate will be elected at the end\n  of a tabulation if the candidate was not already elected by\n  reaching the protected quota.\n\n  Unprotected candidates are elected subject to a quota that is\n  typically higher than the regular quota, and declines as\n  protected candidates increase their non-surplus votes.\n  If all protected candidates are elected by reaching the\n  protected quota,\n  the quota for unprotected candidates reduces to approximately\n  (allowing for small differences related to rounding and finite\n  precision arithmetic)\n  what the regular quota would be if no candidates were\n  protected.\n\n  More specifically, the quota for unprotected candidates\n  is based on the number seats\n  that are available to unprotected candidates\n  and the number of votes\n  that are counting for\n  or could be transferred to unprotected candidates,\n  given the current protected quota.\n\n  The number of seats available to unprotected candidates is\n  the number of seats to be filled by the contest\n  minus the number of protected candidates.\n  The number of seats available to unprotected candidates\n  plus one\n  is used in the denominator of the quota calculation.\n\n  The number of votes used in the numerator\n  of the unprotected quota calculation\n  is equal to the number of votes counting for unprotected\n  candidates\n  plus the number of surplus votes counting for protected\n  candidates\n  (surplus votes in excess of the protected quota).\n  Votes counting for each protected candidate,\n  but only up to the protected quota,\n  are not included in the calculation of the numerator\n  of the unprotected quota."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "A data object of tabulation options\ncontaining zero or more of the following keys and values.\nFor each key and value, the Javascript identifier is shown and its\nliteral string value is shown in parentheses.\n\n __Default value__: an empty object, such as `{ }`, is expanded to\n a data object with each option's default value:\n~~~\n{\n  \"always_count_votes\": true,\n  \"alternative_defeats\": \"N\",\n  \"type_of_altdefs\": \"if_no_new_electeds\",\n  \"ballot_tree\": \"dynamic\"\n}\n~~~\n\n- `alwaysCountVotes` ('always_count_votes')\n  A boolean value indicating whether to count votes for the\n  first round even if the number of hopeful candidates is less\n  than or equal to the number of seats to fill, i.e. all of the\n  hopeful candidates can be elected regardless of what the\n  first-round vote totals are or whether any votes are counted.\n\n  Allowed values for this option are:\n\n  - `yes` (true) : Always count votes for the first round.\n\n  - `no` (false) : Do not count votes for any round if winners can\n    otherwise be determined.\n\n  A value of false specifies tabulation behavior that strictly\n  follows the reference rule.\n  A value of true provides for an extension\n  which does not change which candidates are elected\n  and produces the same vote totals as the reference rule,\n  except for always producing first-round vote totals.\n\n  __Default value__: `yes` (true)\n\n- `alternativeDefeats` ('alternative_defeats')\n  A value indicating whether or in which rounds the option to\n  perform alternative defeats should be\n  exercised if they are otherwise allowed.\n  Alternative defeats are also known as multiple simultaneous\n  defeats or batch defeats and can involve deferred distribution\n  of surplus.\n  The value may be a string or an ordered collection of string\n  values.\n\n  The value for this option may be one of the following\n  case-insensitive string values,\n  indicating when to do alternative defeats, if they are\n  allowed:\n\n  - `yes` ('Y') : yes, every round\n\n  - `never` ('N') : no, never\n\n  The value for this option may also be\n  an ordered collection of string values,\n  each string value equal to\n  one of the values listed above,\n  one for each round of the tabulation.\n  Extra values are allowed and are ignored.\n\n  Any sequence of round-by-round choices may be replicated with\n  this kind of value.\n\n  __Default value__: `never` ('N')\n\n  The reference rule for when alternative defeats are\n  allowed is designed with the goal that performing\n  alternative defeats will not change which candidates are elected\n  compared to defeating at most one candidate per round.\n  However since Meek's Method only calculates approximations of\n  an exact solution to a system of equations, there may be\n  cases where performing alternative defeats produces\n  a different set of winners.\n\n- `typeOfAltDefs` ('type_of_altdefs')\n  A string value indicating when during a round or iteration\n  the tabulation should check for multiple simultaneous\n  defeats,\n  provided that they are allowed by the 'alternativeDefeats'\n  option for that round.\n  Allowed values for this option are:\n\n  - `perReferenceRule` ('per_reference_rule')\n    Check for alternative defeats according to the\n    reference rule, at the end of step B.2.e,\n    i.e. when it is assured that at least one more iteration\n    will be performed for the round.\n\n    This option will not check for\n    alternative defeats for the last iteration of a round.\n    Some rounds have only one iteration,\n    and this option will not check for alternative defeats\n    in such rounds.\n    For example, a first round which does not elect any\n    candidates will have only one iteration.\n\n  - `beforeSingleDefeats` ('before_single_defeats')\n    Check for multiple simultaneous defeats\n    at the beginning of reference rule step B.3,\n    the step for checking for a single defeat,\n    after the last iteration for the round has been completed\n    and there were no candidates elected in the round.\n\n  - `ifNoNewElecteds` ('if_no_new_electeds')\n    Check for multiple simultaneous defeats\n    in the middle of step B.2.e,\n    after checking that there are no candidates elected in\n    the round,\n    but before checking any conditions for total surplus.\n\n    This option combines the effects of `perReferenceRule` and\n    `beforeSingleDefeats` and will check for alternative defeats\n    after votes are counted for every iteration,\n    provided that no candidates have been elected in the round.\n\n  __Default value__: `ifNoNewElecteds` ('if_no_new_electeds')\n\n- `ballotTree` ('ballot_tree')\n\n  This option specifies whether and how to perform some internal\n  optimizations in how ballots are stored for vote counting.\n  Storing ballot rankings in a tree structure can significantly\n  speed up a larger tabulation.\n  Using a tree structure promotes summarization of earlier rankings\n  across ballots and ballot groups,\n  which means an iteration can have fewer pieces of data to look\n  at and fewer calculations to perform.\n\n  Valid values for this option include:\n\n  - `dynamic` ('dynamic')\n\n    A dynamic balllot tree is typically the fastest option\n    for larger tabulations.\n    A dynamic ballot tree maximally summarizes ballot rankings\n    across ballots and ballot groups,\n    and it only contains tree nodes that might be needed\n    during a round.\n    The tree is adjusted between rounds to maintain its optimal\n    content and structure.\n\n  - `static` ('static')\n\n    A static ballot tree is typically the second fastest option\n    for larger tabulations\n    and it is often nearly as fast as\n    using a dynamic ballot tree.\n    A full ballot tree is built before any rounds are tabulated\n    and no adjustments are made between rounds.\n\n  - `none` ('none')\n\n    A ballot tree is not used.\n    This is typically the slowest option for larger tabulations,\n    often much slower.\n    However it is also the simplest approach and most directly\n    follows the language of the reference rule.\n\n  __Default value__: `dynamic` ('dynamic')"
      },
      {
        "nullable": null,
        "types": [
          "Progress",
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "progressCallback",
        "description": "Determines whether and how tabulation progress is reported.\n\n  The value can be an instance of Progress or a callback function.\n\n  If it is a callback function, a new Progress instance is\n  created using that callback function.\n\n  If no value is provided, no progress reporting is performed."
      }
    ],
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "Same as for `Tabulation.tabulate()`."
      }
    ]
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "_nbrSeatsToFill",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_nbrSeatsToFill",
    "access": "private",
    "description": null,
    "lineNumber": 587,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "_candidates",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_candidates",
    "access": "private",
    "description": null,
    "lineNumber": 588,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "_ballots",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_ballots",
    "access": "private",
    "description": null,
    "lineNumber": 589,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "_maxRankingLevels",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_maxRankingLevels",
    "access": "private",
    "description": null,
    "lineNumber": 590,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "_tieBreaker",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_tieBreaker",
    "access": "private",
    "description": null,
    "lineNumber": 591,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "_excluded",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_excluded",
    "access": "private",
    "description": null,
    "lineNumber": 592,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "_protectedzz",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_protectedzz",
    "access": "private",
    "description": null,
    "lineNumber": 593,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "_options",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_options",
    "access": "private",
    "description": null,
    "lineNumber": 594,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "member",
    "name": "_progress",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_progress",
    "access": "private",
    "description": null,
    "lineNumber": 596,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "tabulate",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#tabulate",
    "access": "public",
    "description": "Perform a tabulation of an RCV / STV Meek contest.\n\nNormally this method is called with no arguments.\nHowever to facilitate unit testing,\na data object may be provided as way\nto artificially stop the tabulation\nat various points in a given round.",
    "lineNumber": 832,
    "unknown": [
      {
        "tagName": "@throw",
        "tagValue": "{Error}\nThe error that can be one of the following types:\n\n- MeekValueError\n\n  If any values passed to this function or to the `Tabulation()`\n  constructor do not pass validation checks.\n\n- MeekImplementationError\n\n  If an inconsistency is detected during the tabulation\n  that is not attributable to invalid arguments, resource\n  constraints, resource availability, or other external\n  interventions.\n  If this exception type is raised,\n  it might be because this Javascript package\n  contains a logic error.\n\n- Other exceptions\n\n  Other exceptions defined by Javascript and its standard libraries\n  can be raised,\n  for example as a result of unavailable or insufficient resources.\n\n  This function does not otherwise impose restrictions on the size\n  of the tabulation,\n  including the number of seats to be elected, the number of\n  candidates, the number of ballots or ballot groups, the number\n  of rankings per ballot, or the length of candidate identifiers.\n  The size of a tabulation that can be performed is\n  primarily dependent on the resources of the hardware and software\n  configuration on which the tabulation runs and the rate of\n  convergence of Meek's method.\n\nThe MeekValueError and MeekImplementationError classes are\nindirectly subclasses of the Error class and neither is a\nsubclass of the other, directly or indirectly."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "kwargs",
        "description": "A data object with zero or more of the following properties.\n\nIf a property is missing or has a `null` value,\nthe tabulation is not artificially stopped at that point.\n\n- 'stopAtBegin'\n\n  The number of a round; stop at the beginning of that round,\n  after checking whether to proceed with the round,\n  but before doing any iterations.\n\n- 'stopAfterStatusUpdate'\n\n  The number of a round; stop after all iterations for the round\n  have completed\n  and after updates to the vote tally and status\n  have been made.\n\n- 'stopAtEnd'\n\n  The number of a round; stop at the end of that round."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Results"
      ],
      "spread": false,
      "description": "An instance of Results, which contains the following three members:\n\n- `elected`\n\n  A set of candidate identifiers for the candidates\n  that have been elected by the tabulation\n\n- `statuses`\n\n  A data object keyed by candidate identifier for every candidate,\n  and with each value a Status instance,\n  which has the following properties:\n\n  - candidate\n\n    The candidate's identifier.\n\n  - status\n\n    A string indicating the candidate's status: 'elected' or\n    'defeated'.\n\n  - nbrRound\n\n    The 1-based number of the round for which votes were\n    calculated when the candidate was elected or defeated;\n    zero if the candidate was excluded.\n\n  - votes\n\n    The number of votes the candidate had when elected or\n    defeated; null if the candidate was excluded.\n\n  - keepFactor\n\n    The fraction of a ballot's vote weight that counted for\n    the candidate when votes were last tallied/distributed.\n\n  - destiny\n\n    An indication of whether the candidate was excluded or\n    protected or neither, i.e. normal.  This attribute may be\n    omitted in some formats, including JSON formats, if the\n    destiny is normal.\n\n- `tally`\n\n  A data object, keyed by candidate identifiers\n  and labels for other tabulation categories.\n  Values are arrays of round-by-round vote totals\n  or other statistics.\n\n  A vote total for the kth round\n  is accessed with an index of k-1.\n  A candidate has a vote total only for those rounds\n  which started with the candidate\n  as a hopeful or elected candidate.\n\n  In addition to candidates, there are vote totals or counts for\n  all rounds for each of the following keys / tabulation\n  categories:\n\n  - ':Votes for candidates'\n  - ':Overvotes'\n  - ':Abstentions'\n  - ':Other exhausted'\n  - ':Total votes'\n  - ':Protected quota\n  - ':Quota votes\n  - ':Quota'\n  - ':Total surplus'\n  - ':Iterations'\n\n  Numbers of votes are returned as Decimal9 instances,\n  but are typically converted\n  to Javascript numbers or JSON numbers in other formats.\n  Counts are returned as Javascript integers.\n\n  ':Protected quota' and ':Quota votes' are present\n  only if there are some protected candidates.\n\n  ':Quota votes' identifies the number of votes\n  used to calculate the ':Quota' for unprotected candidates.\n  The quota votes amount is equal to\n  the number of votes counting for unprotected candidates,\n  plus any surplus votes for protected candidates\n  (based on the protected quota).\n\n  The array for the ':Iterations' key contains integer values,\n  indicating the number of iterations that were performed for the\n  round."
    }
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "_testing",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_testing",
    "access": "private",
    "description": null,
    "lineNumber": 835,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{\"stopAtBegin\": *, \"stopAfterStatusUpdate\": *, \"stopAtEnd\": *}"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "_otherCategories",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_otherCategories",
    "access": "private",
    "description": null,
    "lineNumber": 858,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "_tabulateMeeks",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_tabulateMeeks",
    "access": "private",
    "description": null,
    "lineNumber": 871,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "_tabulateSetup",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_tabulateSetup",
    "access": "private",
    "description": null,
    "lineNumber": 889,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "_nbrRound",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_nbrRound",
    "access": "private",
    "description": null,
    "lineNumber": 893,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "_tallies",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_tallies",
    "access": "private",
    "description": null,
    "lineNumber": 894,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "member",
    "name": "_nbrUnprotectedSeats",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_nbrUnprotectedSeats",
    "access": "private",
    "description": null,
    "lineNumber": 899,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "member",
    "name": "_statuses",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_statuses",
    "access": "private",
    "description": null,
    "lineNumber": 901,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "_omega",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_omega",
    "access": "private",
    "description": null,
    "lineNumber": 911,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "member",
    "name": "_keepFactors",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_keepFactors",
    "access": "private",
    "description": null,
    "lineNumber": 912,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "member",
    "name": "_maxWellRanked",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_maxWellRanked",
    "access": "private",
    "description": null,
    "lineNumber": 916,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "member",
    "name": "_totalNodeStats",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_totalNodeStats",
    "access": "private",
    "description": null,
    "lineNumber": 919,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "member",
    "name": "_currentNodeStats",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_currentNodeStats",
    "access": "private",
    "description": null,
    "lineNumber": 920,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "_subTreeToString",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_subTreeToString",
    "access": "private",
    "description": null,
    "lineNumber": 932,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      },
      {
        "name": "isLastChild",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "_printBallotTree",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_printBallotTree",
    "access": "private",
    "description": null,
    "lineNumber": 949,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "label",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "_buildDynamicBallotTree",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_buildDynamicBallotTree",
    "access": "private",
    "description": null,
    "lineNumber": 955,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "_ballotTree",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_ballotTree",
    "access": "private",
    "description": null,
    "lineNumber": 956,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "_hopefulParents",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_hopefulParents",
    "access": "private",
    "description": null,
    "lineNumber": 971,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "_expandBallotTreeFromParent",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_expandBallotTreeFromParent",
    "access": "private",
    "description": null,
    "lineNumber": 980,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "parentNode",
        "types": [
          "*"
        ]
      },
      {
        "name": "progress",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      }
    ],
    "return": null
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "_distributeBallotGroup",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_distributeBallotGroup",
    "access": "private",
    "description": null,
    "lineNumber": 993,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "ballotGroup",
        "types": [
          "*"
        ]
      },
      {
        "name": "parentNode",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "_getOrMakeChild",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_getOrMakeChild",
    "access": "private",
    "description": null,
    "lineNumber": 1037,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "parentNode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "method",
    "name": "_transformBallotTree",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_transformBallotTree",
    "access": "private",
    "description": null,
    "lineNumber": 1061,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "newElecteds",
        "types": [
          "*"
        ]
      },
      {
        "name": "newDefeateds",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "_expandBallotTreeFromNewElecteds",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_expandBallotTreeFromNewElecteds",
    "access": "private",
    "description": null,
    "lineNumber": 1075,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "newElecteds",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "_transferNodesOfNewDefeateds",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_transferNodesOfNewDefeateds",
    "access": "private",
    "description": null,
    "lineNumber": 1086,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "newDefeateds",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "_buildBallotTree",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_buildBallotTree",
    "access": "private",
    "description": null,
    "lineNumber": 1102,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "_processAMeeksRound",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_processAMeeksRound",
    "access": "private",
    "description": null,
    "lineNumber": 1178,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "member",
    "name": "_prevTotalSurplus",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_prevTotalSurplus",
    "access": "private",
    "description": null,
    "lineNumber": 1222,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "member",
    "name": "_nbrIteration",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_nbrIteration",
    "access": "private",
    "description": null,
    "lineNumber": 1223,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "_defeatThisRound",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_defeatThisRound",
    "access": "private",
    "description": null,
    "lineNumber": 1224,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "_nbrHopefuls",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_nbrHopefuls",
    "access": "private",
    "description": null,
    "lineNumber": 1225,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "_processAMeeksIteration",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_processAMeeksIteration",
    "access": "private",
    "description": null,
    "lineNumber": 1262,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "member",
    "name": "_totalCandidateVotes",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_totalCandidateVotes",
    "access": "private",
    "description": null,
    "lineNumber": 1277,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "member",
    "name": "_newElecteds",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_newElecteds",
    "access": "private",
    "description": null,
    "lineNumber": 1295,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "member",
    "name": "_totalSurplus",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_totalSurplus",
    "access": "private",
    "description": null,
    "lineNumber": 1300,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "_initIterTally",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_initIterTally",
    "access": "private",
    "description": null,
    "lineNumber": 1341,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "_iterTally",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_iterTally",
    "access": "private",
    "description": null,
    "lineNumber": 1342,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "_distributeVotesByTree",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_distributeVotesByTree",
    "access": "private",
    "description": null,
    "lineNumber": 1354,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "_distributeFromNode",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_distributeFromNode",
    "access": "private",
    "description": null,
    "lineNumber": 1361,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "ballotWeight",
        "types": [
          "*"
        ]
      },
      {
        "name": "depth",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "_distributeVotes",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_distributeVotes",
    "access": "private",
    "description": null,
    "lineNumber": 1404,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "_getCandidateDestiny",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_getCandidateDestiny",
    "access": "private",
    "description": null,
    "lineNumber": 1455,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "candidate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "_getTotalCandidateVotes",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_getTotalCandidateVotes",
    "access": "private",
    "description": null,
    "lineNumber": 1465,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "_setQuota",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_setQuota",
    "access": "private",
    "description": null,
    "lineNumber": 1475,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "_quota",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_quota",
    "access": "private",
    "description": null,
    "lineNumber": 1478,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "member",
    "name": "_protectedQuota",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_protectedQuota",
    "access": "private",
    "description": null,
    "lineNumber": 1480,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 239,
    "kind": "member",
    "name": "_protectedVotes",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_protectedVotes",
    "access": "private",
    "description": null,
    "lineNumber": 1482,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "member",
    "name": "_quotaVotes",
    "memberof": "src/meek.js~Tabulation",
    "static": false,
    "longname": "src/meek.js~Tabulation#_quotaVotes",
    "access": "private",
    "description": null,
    "lineNumber": 1488,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "_getQuota",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_getQuota",
    "access": "private",
    "description": null,
    "lineNumber": 1496,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "candidate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "_updateCandidateStatusTally",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_updateCandidateStatusTally",
    "access": "private",
    "description": null,
    "lineNumber": 1502,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "_getTotalSurplus",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_getTotalSurplus",
    "access": "private",
    "description": null,
    "lineNumber": 1513,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "_updateKeepFactors",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_updateKeepFactors",
    "access": "private",
    "description": null,
    "lineNumber": 1524,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "_elected",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_elected",
    "access": "private",
    "description": null,
    "lineNumber": 1537,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "_hopeful",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_hopeful",
    "access": "private",
    "description": null,
    "lineNumber": 1550,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "_hopefulVotes",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_hopefulVotes",
    "access": "private",
    "description": null,
    "lineNumber": 1563,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "_getNewElecteds",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_getNewElecteds",
    "access": "private",
    "description": null,
    "lineNumber": 1574,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "_electCandidates",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_electCandidates",
    "access": "private",
    "description": null,
    "lineNumber": 1588,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "candidates",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "_defeatable",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_defeatable",
    "access": "private",
    "description": null,
    "lineNumber": 1607,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "method",
    "name": "_defeatableVotes",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_defeatableVotes",
    "access": "private",
    "description": null,
    "lineNumber": 1620,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "method",
    "name": "_defeatCandidates",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_defeatCandidates",
    "access": "private",
    "description": null,
    "lineNumber": 1631,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "candidates",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "_getSingleDefeatCandidate",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_getSingleDefeatCandidate",
    "access": "private",
    "description": null,
    "lineNumber": 1652,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "_resolveTie",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_resolveTie",
    "access": "private",
    "description": null,
    "lineNumber": 1687,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "tiedCandidates",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "_getAltDefeatsOption",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_getAltDefeatsOption",
    "access": "private",
    "description": null,
    "lineNumber": 1735,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "_getStvAlternativeDefeats",
    "memberof": "src/meek.js~Tabulation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/meek.js~Tabulation#_getStvAlternativeDefeats",
    "access": "private",
    "description": null,
    "lineNumber": 1771,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "file",
    "name": "src/progress.js",
    "content": "/**\n * @copyright 2016-2019 David Cary;\n * @license Apache-2.0\n *\n * @module Meek\n *\n * @summary Provide progress updates via a callback function.\n */\n\nconst FORCE_DELAY = 0;\n//const FORCE_DELAY = 10 * 1000 * 1000;\n\n/** A class for handling progress reports from a `Tabulation` initialization\n * and its `tabulate()` function.\n */\nexport class Progress {\n  /**\n   * @param {function} callback - The callback function that forwards\n   *    progress reports from the tabulation functions.\n   *\n   *    The callback function is called with one parameter, a plain old data\n   *    object with properties:\n   *\n   *    - `progressFraction` = A number between 0 and 100 inclusive, indicating\n   *         the current percentage of work completed\n   *    - `description` = A string that gives a description of the progress\n   *         that is being made.\n   */\n  constructor(callback) {\n    this.setCallback(callback);\n    /** The minimum amount of delay in milliseconds until the first progress\n     *    report can be sent.\n     * @type {number} */\n    this.firstDelay = 1;  // all delays in ms\n    /** The minimum amount of delay in milliseconds between sending successive\n     *    progress reports, except when reporting completion of a major\n     *    activity.\n     * @type {number} */\n    this.updateDelay = 100;\n    /** Indicates whether a ballot tree is used.\n     * @type {boolean} */\n    this.isBallotTreeUsed = false;\n    /** Indicates whether a dynamic ballot tree is used.\n     * @type {boolean} */\n    this.isDynamicTreeUsed = false;\n    this.setNbrBallotGroups();\n    this.setNbrOriginalHopefuls();\n    this.startTimers();\n    /** The amount of weight given to other activities.\n     * @type {number} */\n    this.otherBase = 1;\n    /** The amount of other activities that are completed, using the same\n     *    scale as `otherBase`.\n     * @type {number} */\n    this.otherCompleted = 0;\n    /** A number indicating the fraction of progress on the current major\n     *    activity.\n     * @type {number}*/\n    this.inProgress = 0;\n    /** The number of original hopeful candidates that have been elected or\n     * defeated.\n     * @type {number} */\n    this.nbrResolvedHopefuls = 0;\n    /** The descriptive message that is sent with a progress report.\n     * @type {string} */\n    this.description = 'Tabulation started.';\n    /** The amount of progress completed on the current major activity.\n     * @type {number} */\n    this.progress = 0;\n    /** The number of ballot groups that Tabulation() should validate\n     * between checking whether a progress report can be sent.\n     * @type {number} */\n    this.validationPeriod = 1001;\n    /** The number of ballot groups that tabulate() should queue for\n     *    building a tree between checking whether a progress report can be\n     *    sent.\n     * @type {number} */\n    this.treeInitPeriod = 1001;\n    /** The number of ballot groups that tabulate() should process while\n     *    building a ballot tree  between checking whether a progress report\n     *    can be sent.\n     * @type {number} */\n    this.treeBuildPeriod = 1001;\n    /** A special value indicating that a segment of activity has completed.\n     * @type {string} */\n    this.completedLabel = 'COMPLETE'\n    /** An indication of whether validation of ballot groups is complete.\n     * @type {boolean} */\n    this.validationComplete = false;\n    /** An indication of whether the build of a ballot tree is complete.\n     * @type {boolean} */\n    this.buildComplete = false;\n    /** An indication of whether the initialization for building a ballot tree\n     *    is complete.\n     * @type {boolean} */\n    this.initComplete = false;\n    /** A count of the maximum number of iterations in a round that has been\n     *    experienced so far in the tabulation.\n     * @type {number} */\n    this.maxNbrIterations = 1;\n  }\n\n  /** Set the callback function.\n   * @param {function} callback - The new callback function. */\n  setCallback(callback) {\n    /** The callback function that is used to send progress reports\n     *    back to the requester.\n     * @type {function} */\n    this.callback = (typeof callback == 'function') ? callback : null;\n  }\n\n  /** Start timers and the times at which the next status reports can be sent.\n   * @parameter {Date} [now=Date.now()] - A time when the timer is deemed to\n   * have started; not normally not provided, but useful for unit testing. */\n  startTimers(now) {\n    /** The time at which progress timing began.\n     * @type {Date} */\n    this.startTime = this.now = now || Date.now();\n    this.updateTimers(this.now);\n  }\n\n  /** Update the times at which the next progress reports can be sent.\n   * @parameter {Date} [now=Date.now()] - A time deemed to be the curent time;\n   * not normally not provided, but useful for unit testing. */\n  updateTimers(now) {\n    now = this.now = now || Date.now();\n    /** The earliest time that the first progress report can be sent.\n     * @type {Date} */\n    this.earliestFirstTime = now + this.firstDelay;\n    this.setEarliestUpdateTime(now);\n  }\n\n  /** Update the times at which the next update progress report can be sent.\n   * @parameter {Date} [now=Date.now()] - A time deemed to be the curent time;\n   * not normally not provided, but useful for unit testing. */\n  setEarliestUpdateTime(now) {\n    now = this.now = now || Date.now();\n    /** The earliest time at which the next update to a progress report can\n     *    be sent.\n     * @type {Date} */\n    this.earliestUpdateTime = now + this.updateDelay;\n  }\n\n  /** Indicate that the tabulation will use a ballot tree and whether\n   * the ballot tree is static or dynamic\n   * @parameter {boolean} [isDynamic=false] - If true indicates that a\n   *   dynamic ballot tree will be used, otherwise that a static ballot tree\n   *   will be used. */\n  useBallotTree(isDynamic=false) {\n    this.isBallotTreeUsed = true;\n    this.isDynamicTreeUsed = isDynamic;\n    this.otherBase = 2;\n  }\n\n  /** Set the number of ballot groups that will be processed by the\n   *    tabulation.\n   * @parameter {number|falsey} [nbrBallotGroups=1] The number of ballot\n   *   groups that will be processed by the tabulation. */\n  setNbrBallotGroups(nbrBallotGroups=1) {\n    /** The number of ballot groups used in the tabulation\n     * @type {number} */\n    this.nbrBallotGroups = nbrBallotGroups || 1;\n  }\n\n  /** Set the original number of hopeful candidates for the tabulation\n   * @parameter {number|falsey} [number=1] the original number of hopeful\n   * candidates for the tabulation. */\n  setNbrOriginalHopefuls(nbrOriginalHopefuls=1) {\n    /** The number of original hopeful candidates for the tabulation;\n     *    The number of candidates that must be defeated or elected,\n     *    possibly just one candidate per round, except for the last round.\n     * @type {number} */\n    this.nbrOriginalHopefuls = nbrOriginalHopefuls || 1;\n  }\n\n  /** Check whether enough time has elapsed that a next progress report can\n   *    be sent.\n   *    Optionally, and only for testing, force a busy-loop delay to slow down\n   *    the activities.\n   * @parameter {Date} [now=Date.now()] - A time deemed to be the curent time;\n   *   not normally not provided, but useful for unit testing.\n   * @return {boolean} A true/false indication of whether enough time has\n   *   elapsed. */\n  isTimeToUpdate(now) {\n    if (FORCE_DELAY > 0) {\n      let k = 537;\n      for (let twix=0; twix < FORCE_DELAY; twix++) {\n        k = ((k + 239) * 5317) % 293731;\n      }\n    }\n    now = this.now = now || Date.now();\n    const isTime = (Boolean(this.callback) &&\n          now >= this.earliestFirstTime &&\n          now >= this.earliestUpdateTime);\n    return isTime;\n  }\n\n  /** Check whether enough time has elapsed that a next progress report can\n   *    be sent.\n   *    If it has, send the progress report by calling the callback.\n   * @parameter {Date} [now=Date.now()] - A time deemed to be the curent time;\n   *   not normally not provided, but useful for unit testing.\n   */\n  checkToUpdate(now) {\n    now = this.now = now || Date.now();\n    if (!this.isTimeToUpdate(now)) {\n      return;\n    }\n    const progressFraction = this.getProgressFraction();\n    const response = {\n      progressFraction: progressFraction,\n      description: this.description,\n    };\n    this.callback(response);\n    this.setEarliestUpdateTime();\n  }\n\n  /** Calculate the progressFraction as a number between 0 and 100 inclusive,\n   *    indicating how much total progress has been completed.\n   * @return {number} The calculated progress Fraction. */\n  getProgressFraction() {\n    const maxNbrRounds = Math.max(1, this.nbrOriginalHopefuls - 1);\n    const progressAmount = Math.min(this.otherCompleted, this.otherBase) +\n          Math.min(this.inProgress, 1) +\n          Math.min(this.nbrResolvedHopefuls, maxNbrRounds);\n    const progressBase = Math.max(1, this.otherBase + maxNbrRounds);\n    let result = progressAmount / progressBase;\n    if (Number.isNaN(result)) {\n      result = 0;\n    }\n    this.progress = Math.trunc(result * 10000) / 100;\n    return result;\n  }\n\n  /** Set validation progress, subject to limits on frequency of sending\n   * progress reports.\n   * @param {number} progress - The number of ballot groups validated so far.\n   */\n  setValidationProgress(progress=0) {\n    if (progress === this.completedLabel) {\n      this.inProgress = 0;\n      this.description = 'Ballot validation complete.';\n      if (!this.validationComplete) {\n        this.validationComplete = true;\n        this.otherCompleted += 1;\n      }\n      this.checkToUpdate();\n    } else {\n      if (this.isTimeToUpdate() && !this.validationComplete &&\n            Number.isInteger(progress) && progress >= 0) {\n        this.inProgress = progress / this.nbrBallotGroups;\n        this.description = 'Ballot validation: '+\n              progress+' ballot groups, '+\n              (Math.trunc(this.inProgress * 1000) / 10).toFixed(1)+'%';\n        this.checkToUpdate(this.now);\n      }\n    }\n  }\n\n  /** Set ballot tree build progress, subject to limits on frequency of sending\n   * progress reports.\n   * @param {number} progress - The number of ballot groups built so far.\n   */\n  setTreeBuildProgress(progress=0) {\n    if (progress === this.completedLabel) {\n      this.inProgress = 0;\n      this.description = 'Build ballot tree complete.';\n      if (!this.buildComplete) {\n        this.buildComplete = true;\n        this.otherCompleted += this.isDynamicTreeUsed ? 0.5 : 1;\n      }\n      this.checkToUpdate();\n    } else {\n      if (this.isTimeToUpdate() && !this.buildComplete &&\n            Number.isInteger(progress) && progress >= 0) {\n        this.inProgress = progress / this.nbrBallotGroups;\n        this.description = 'Build ballot tree: '+\n              progress+' ballot groups, '+\n              (Math.trunc(this.inProgress * 1000) / 10).toFixed(1)+'%';\n        this.inProgress /= this.isDynamicTreeUsed ? 2 : 1;\n        this.checkToUpdate(this.now);\n      }\n    }\n  }\n\n  /** Set ballot tree initialization progress, subject to limits on\n   *   frequency of sending progress reports.\n   * @param {number} progress - The number of ballot groups initialized so far.\n   */\n  setDynamicTreeInitProgress(progress=0) {\n    if (progress === this.completedLabel) {\n      this.inProgress = 0;\n      this.description = 'Init for ballot tree complete.';\n      if (!this.initComplete) {\n        this.initComplete = true;\n        this.otherCompleted += 0.5;\n      }\n      this.checkToUpdate();\n    } else {\n      if (this.isTimeToUpdate() && !this.initComplete &&\n            Number.isInteger(progress) && progress >= 0) {\n        this.inProgress = progress / this.nbrBallotGroups;\n        this.description = 'Init for ballot tree: '+\n              progress+' ballot groups, '+\n              (Math.trunc(this.inProgress * 1000) / 10).toFixed(1)+'%';\n        this.inProgress /= 2;\n        this.checkToUpdate(this.now);\n      }\n    }\n  }\n\n  /** Set progress running iterations within a round, subject to limits on\n   *   frequency of sending progress reports.\n   * @param {number} nbrRound - The number of the round being tabulated.\n   * @param {number} nbrIteration - The number of the iteration just completed.\n   * @param {number} nbrHopefuls - The number of remaining hopeful candidates.\n   */\n  setIterationProgress(nbrRound, nbrIteration, nbrHopefuls) {\n    if (nbrIteration > this.maxNbrIterations) {\n      this.maxNbrIterations = nbrIteration;\n    }\n    this.inProgress = (nbrIteration + (this.isDynamicTreeUsed ? 1 : 0)) /\n          ((this.maxNbrIterations + 3 + (this.isDynamicTreeUsed ? 1 : 0))\n          * 1.1);\n    this.description = 'Round '+nbrRound+' iteration '+nbrIteration +\n      ' : '+nbrHopefuls+' hopefuls remain.';\n    this.checkToUpdate();\n  }\n\n  /** Set progress running rounds and\n   *    reducing the number of hopeful candidates, subject to limits on\n   *    the frequency of sending progress reports.\n   * @param {number} nbrRound - The number of the round nearly completed.\n   * @param {number} nbrIteration - The number of the iteration just completed.\n   * @param {number} nbrHopefuls - The number of remaining hopeful candidates.\n   */\n  setRoundProgress(nbrRound, nbrIteration, nbrHopefuls) {\n    if (!this.callback) {\n      return;\n    }\n    if (nbrIteration > this.maxNbrIterations) {\n      this.maxNbrIterations = nbrIteration;\n    }\n    this.inProgress = 0;\n    this.nbrResolvedHopefuls = this.nbrOriginalHopefuls - nbrHopefuls;\n    this.description = 'Round '+nbrRound+' complete : '+\n          nbrHopefuls+' hopefuls remain.';\n    this.checkToUpdate();\n  }\n}\n\nexport default Progress;\n\n",
    "static": true,
    "longname": "/home/circ/devel/rcv/meeks-prf-js-github/src/progress.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 260,
    "kind": "variable",
    "name": "FORCE_DELAY",
    "memberof": "src/progress.js",
    "static": true,
    "longname": "src/progress.js~FORCE_DELAY",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/progress.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@copyright",
        "tagValue": "2016-2019 David Cary;"
      },
      {
        "tagName": "@license",
        "tagValue": "Apache-2.0"
      },
      {
        "tagName": "@module",
        "tagValue": "Meek"
      },
      {
        "tagName": "@summary",
        "tagValue": "Provide progress updates via a callback function."
      }
    ],
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 261,
    "kind": "class",
    "name": "Progress",
    "memberof": "src/progress.js",
    "static": true,
    "longname": "src/progress.js~Progress",
    "access": "public",
    "export": true,
    "importPath": "meeks-prf-js/src/progress.js",
    "importStyle": "{Progress}",
    "description": "A class for handling progress reports from a `Tabulation` initialization\nand its `tabulate()` function.",
    "lineNumber": 16,
    "interface": false
  },
  {
    "__docId__": 262,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/progress.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/progress.js~Progress#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The callback function that forwards\n   progress reports from the tabulation functions.\n\n   The callback function is called with one parameter, a plain old data\n   object with properties:\n\n   - `progressFraction` = A number between 0 and 100 inclusive, indicating\n        the current percentage of work completed\n   - `description` = A string that gives a description of the progress\n        that is being made."
      }
    ]
  },
  {
    "__docId__": 263,
    "kind": "member",
    "name": "firstDelay",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#firstDelay",
    "access": "public",
    "description": "The minimum amount of delay in milliseconds until the first progress\n   report can be sent.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 264,
    "kind": "member",
    "name": "updateDelay",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#updateDelay",
    "access": "public",
    "description": "The minimum amount of delay in milliseconds between sending successive\n   progress reports, except when reporting completion of a major\n   activity.",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 265,
    "kind": "member",
    "name": "isBallotTreeUsed",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#isBallotTreeUsed",
    "access": "public",
    "description": "Indicates whether a ballot tree is used.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 266,
    "kind": "member",
    "name": "isDynamicTreeUsed",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#isDynamicTreeUsed",
    "access": "public",
    "description": "Indicates whether a dynamic ballot tree is used.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 267,
    "kind": "member",
    "name": "otherBase",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#otherBase",
    "access": "public",
    "description": "The amount of weight given to other activities.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 268,
    "kind": "member",
    "name": "otherCompleted",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#otherCompleted",
    "access": "public",
    "description": "The amount of other activities that are completed, using the same\n   scale as `otherBase`.",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 269,
    "kind": "member",
    "name": "inProgress",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#inProgress",
    "access": "public",
    "description": "A number indicating the fraction of progress on the current major\n   activity.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 270,
    "kind": "member",
    "name": "nbrResolvedHopefuls",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#nbrResolvedHopefuls",
    "access": "public",
    "description": "The number of original hopeful candidates that have been elected or\ndefeated.",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 271,
    "kind": "member",
    "name": "description",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#description",
    "access": "public",
    "description": "The descriptive message that is sent with a progress report.",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 272,
    "kind": "member",
    "name": "progress",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#progress",
    "access": "public",
    "description": "The amount of progress completed on the current major activity.",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 273,
    "kind": "member",
    "name": "validationPeriod",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#validationPeriod",
    "access": "public",
    "description": "The number of ballot groups that Tabulation() should validate\nbetween checking whether a progress report can be sent.",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 274,
    "kind": "member",
    "name": "treeInitPeriod",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#treeInitPeriod",
    "access": "public",
    "description": "The number of ballot groups that tabulate() should queue for\n   building a tree between checking whether a progress report can be\n   sent.",
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 275,
    "kind": "member",
    "name": "treeBuildPeriod",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#treeBuildPeriod",
    "access": "public",
    "description": "The number of ballot groups that tabulate() should process while\n   building a ballot tree  between checking whether a progress report\n   can be sent.",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 276,
    "kind": "member",
    "name": "completedLabel",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#completedLabel",
    "access": "public",
    "description": "A special value indicating that a segment of activity has completed.",
    "lineNumber": 86,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 277,
    "kind": "member",
    "name": "validationComplete",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#validationComplete",
    "access": "public",
    "description": "An indication of whether validation of ballot groups is complete.",
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 278,
    "kind": "member",
    "name": "buildComplete",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#buildComplete",
    "access": "public",
    "description": "An indication of whether the build of a ballot tree is complete.",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 279,
    "kind": "member",
    "name": "initComplete",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#initComplete",
    "access": "public",
    "description": "An indication of whether the initialization for building a ballot tree\n   is complete.",
    "lineNumber": 96,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 280,
    "kind": "member",
    "name": "maxNbrIterations",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#maxNbrIterations",
    "access": "public",
    "description": "A count of the maximum number of iterations in a round that has been\n   experienced so far in the tabulation.",
    "lineNumber": 100,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "setCallback",
    "memberof": "src/progress.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/progress.js~Progress#setCallback",
    "access": "public",
    "description": "Set the callback function.",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The new callback function."
      }
    ],
    "return": null
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "callback",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#callback",
    "access": "public",
    "description": "The callback function that is used to send progress reports\n   back to the requester.",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "startTimers",
    "memberof": "src/progress.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/progress.js~Progress#startTimers",
    "access": "public",
    "description": "Start timers and the times at which the next status reports can be sent.",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@parameter",
        "tagValue": "{Date} [now=Date.now()] - A time when the timer is deemed to\nhave started; not normally not provided, but useful for unit testing."
      }
    ],
    "params": [
      {
        "name": "now",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "startTime",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#startTime",
    "access": "public",
    "description": "The time at which progress timing began.",
    "lineNumber": 118,
    "type": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "updateTimers",
    "memberof": "src/progress.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/progress.js~Progress#updateTimers",
    "access": "public",
    "description": "Update the times at which the next progress reports can be sent.",
    "lineNumber": 125,
    "unknown": [
      {
        "tagName": "@parameter",
        "tagValue": "{Date} [now=Date.now()] - A time deemed to be the curent time;\nnot normally not provided, but useful for unit testing."
      }
    ],
    "params": [
      {
        "name": "now",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "earliestFirstTime",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#earliestFirstTime",
    "access": "public",
    "description": "The earliest time that the first progress report can be sent.",
    "lineNumber": 129,
    "type": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "setEarliestUpdateTime",
    "memberof": "src/progress.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/progress.js~Progress#setEarliestUpdateTime",
    "access": "public",
    "description": "Update the times at which the next update progress report can be sent.",
    "lineNumber": 136,
    "unknown": [
      {
        "tagName": "@parameter",
        "tagValue": "{Date} [now=Date.now()] - A time deemed to be the curent time;\nnot normally not provided, but useful for unit testing."
      }
    ],
    "params": [
      {
        "name": "now",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "earliestUpdateTime",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#earliestUpdateTime",
    "access": "public",
    "description": "The earliest time at which the next update to a progress report can\n   be sent.",
    "lineNumber": 141,
    "type": {
      "nullable": null,
      "types": [
        "Date"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "useBallotTree",
    "memberof": "src/progress.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/progress.js~Progress#useBallotTree",
    "access": "public",
    "description": "Indicate that the tabulation will use a ballot tree and whether\nthe ballot tree is static or dynamic",
    "lineNumber": 149,
    "unknown": [
      {
        "tagName": "@parameter",
        "tagValue": "{boolean} [isDynamic=false] - If true indicates that a\n  dynamic ballot tree will be used, otherwise that a static ballot tree\n  will be used."
      }
    ],
    "params": [
      {
        "name": "isDynamic",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "setNbrBallotGroups",
    "memberof": "src/progress.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/progress.js~Progress#setNbrBallotGroups",
    "access": "public",
    "description": "Set the number of ballot groups that will be processed by the\n   tabulation.",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@parameter",
        "tagValue": "{number|falsey} [nbrBallotGroups=1] The number of ballot\n  groups that will be processed by the tabulation."
      }
    ],
    "params": [
      {
        "name": "nbrBallotGroups",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      }
    ],
    "return": null
  },
  {
    "__docId__": 294,
    "kind": "member",
    "name": "nbrBallotGroups",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#nbrBallotGroups",
    "access": "public",
    "description": "The number of ballot groups used in the tabulation",
    "lineNumber": 162,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "setNbrOriginalHopefuls",
    "memberof": "src/progress.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/progress.js~Progress#setNbrOriginalHopefuls",
    "access": "public",
    "description": "Set the original number of hopeful candidates for the tabulation",
    "lineNumber": 168,
    "unknown": [
      {
        "tagName": "@parameter",
        "tagValue": "{number|falsey} [number=1] the original number of hopeful\ncandidates for the tabulation."
      }
    ],
    "params": [
      {
        "name": "nbrOriginalHopefuls",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      }
    ],
    "return": null
  },
  {
    "__docId__": 296,
    "kind": "member",
    "name": "nbrOriginalHopefuls",
    "memberof": "src/progress.js~Progress",
    "static": false,
    "longname": "src/progress.js~Progress#nbrOriginalHopefuls",
    "access": "public",
    "description": "The number of original hopeful candidates for the tabulation;\n   The number of candidates that must be defeated or elected,\n   possibly just one candidate per round, except for the last round.",
    "lineNumber": 173,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "isTimeToUpdate",
    "memberof": "src/progress.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/progress.js~Progress#isTimeToUpdate",
    "access": "public",
    "description": "Check whether enough time has elapsed that a next progress report can\n   be sent.\n   Optionally, and only for testing, force a busy-loop delay to slow down\n   the activities.",
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@parameter",
        "tagValue": "{Date} [now=Date.now()] - A time deemed to be the curent time;\n  not normally not provided, but useful for unit testing."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A true/false indication of whether enough time has\n  elapsed."
    },
    "params": [
      {
        "name": "now",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "checkToUpdate",
    "memberof": "src/progress.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/progress.js~Progress#checkToUpdate",
    "access": "public",
    "description": "Check whether enough time has elapsed that a next progress report can\n   be sent.\n   If it has, send the progress report by calling the callback.",
    "lineNumber": 204,
    "unknown": [
      {
        "tagName": "@parameter",
        "tagValue": "{Date} [now=Date.now()] - A time deemed to be the curent time;\n  not normally not provided, but useful for unit testing."
      }
    ],
    "params": [
      {
        "name": "now",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "getProgressFraction",
    "memberof": "src/progress.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/progress.js~Progress#getProgressFraction",
    "access": "public",
    "description": "Calculate the progressFraction as a number between 0 and 100 inclusive,\n   indicating how much total progress has been completed.",
    "lineNumber": 221,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The calculated progress Fraction."
    },
    "params": []
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "setValidationProgress",
    "memberof": "src/progress.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/progress.js~Progress#setValidationProgress",
    "access": "public",
    "description": "Set validation progress, subject to limits on frequency of sending\nprogress reports.",
    "lineNumber": 239,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "progress",
        "description": "The number of ballot groups validated so far."
      }
    ],
    "return": null
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "setTreeBuildProgress",
    "memberof": "src/progress.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/progress.js~Progress#setTreeBuildProgress",
    "access": "public",
    "description": "Set ballot tree build progress, subject to limits on frequency of sending\nprogress reports.",
    "lineNumber": 264,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "progress",
        "description": "The number of ballot groups built so far."
      }
    ],
    "return": null
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "setDynamicTreeInitProgress",
    "memberof": "src/progress.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/progress.js~Progress#setDynamicTreeInitProgress",
    "access": "public",
    "description": "Set ballot tree initialization progress, subject to limits on\n  frequency of sending progress reports.",
    "lineNumber": 290,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "progress",
        "description": "The number of ballot groups initialized so far."
      }
    ],
    "return": null
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "setIterationProgress",
    "memberof": "src/progress.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/progress.js~Progress#setIterationProgress",
    "access": "public",
    "description": "Set progress running iterations within a round, subject to limits on\n  frequency of sending progress reports.",
    "lineNumber": 318,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "nbrRound",
        "description": "The number of the round being tabulated."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "nbrIteration",
        "description": "The number of the iteration just completed."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "nbrHopefuls",
        "description": "The number of remaining hopeful candidates."
      }
    ],
    "return": null
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "setRoundProgress",
    "memberof": "src/progress.js~Progress",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/progress.js~Progress#setRoundProgress",
    "access": "public",
    "description": "Set progress running rounds and\n   reducing the number of hopeful candidates, subject to limits on\n   the frequency of sending progress reports.",
    "lineNumber": 337,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "nbrRound",
        "description": "The number of the round nearly completed."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "nbrIteration",
        "description": "The number of the iteration just completed."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "nbrHopefuls",
        "description": "The number of remaining hopeful candidates."
      }
    ],
    "return": null
  },
  {
    "__docId__": 333,
    "kind": "file",
    "name": "src/results.js",
    "content": "/**\n * @copyright 2016-2019 David Cary;\n * @license Apache-2.0\n *\n * @module Meek\n *\n * @summary Tabulate RCV / STV per prfound.org's Meek's method.\n */\n\nimport {UBF} from \"./util_basic.js\";\nimport K from \"./constants.js\";\nimport {MeekValueError, MeekImplementationError}\n      from \"./errors.js\";\nimport {Status} from './status.js';\n\n/**\n * The results of a tabulation.\n *\n * This class also includes various static functions that are\n * useful for converting those results to strings and printing them\n * to the console.\n */\nclass Results {\n  /**\n   * Store the three results of a tabulation.\n   * See the description of `Tabulation.tabulate()` for details.\n   * @param {Set<string>} elected - A set of elected candidate identifiers.\n   * @param {array<Status>} statuses - An array of statuses for each\n   *   candidate.\n   * @param {Object} tally - A data object with the round-by-round\n   *   tally of votes and other counts for each candidate and\n   *   other tabulation categories.\n   */\n  constructor(elected, statuses, tally) {\n    /** A set of elected candidate identifiers.\n     * @type {Set<string>} */\n    this.elected = elected;\n    /** An array of statuses for each candidate.\n     * @type {array<Status>} */\n    this.statuses = statuses;\n    /** A data object with the round-by-round tally of votes and other\n     * counts for each candidate and other tabulation categories.\n     * @type{Object} */\n    this.tally = tally;\n  }\n\n  /**\n   * Format as a string a set or array of elected candidate identifiers\n   *\n   * The resulting string can be a JSON fragment specifying an\n   * object property.\n   *\n   * @param {array|Set} elected\n   *   A set or array of elected candidate identifiers.\n   *\n   * @param {string} [prefix='']\n   *   A string that prefixes label.\n   *   This can specify a separating comma.\n   *\n   * @param {string} [label='\"elected\": ']\n   *   A string that labels the string.\n   *   This can specify a property key and its surrounding punctuation.\n   *\n   * @param {number} [indent1=2]\n   *   The number of spaces that prefix the first (and only) line.\n   *\n   * @param {string} [suffix='']\n   *   A string that is printed at the end of the line.\n   *   This can specify a separating comma.\n   *\n   * @return {string} A string representing elected in\n   *   standard sorted order.\n   */\n  static getElectedAsString(elected, prefix='', label='\"elected\": ',\n        indent1=2, suffix='') {\n\n    const electedArray = Array.from(elected);\n    electedArray.sort();\n    const coreContent = UBF.show(electedArray);\n    const result = ' '.repeat(indent1) + prefix + label+ coreContent + suffix;\n    return result;\n  }\n\n  /** See the corresponding static class method for description.\n   * This method implicitly uses this.elected, so only prefix, label,\n   * indent1, and suffix are parameters. */\n  getElectedAsString(prefix, label, indent1, suffix) {\n    return Results.getElectedAsString(this.elected, prefix, label,\n          indent1, suffix);\n  }\n\n  /**\n   * Format a data object of candidate statuses as a string\n   *\n   * The resulting string can be a JSON fragment specifying an\n   * object property.\n   *\n   * @param {Object} statuses\n   *   A data object of Status objects, keyed by candidate identifiers.\n   *\n   * @param {string} [prefix='']\n   *   A string that prefixes label2.\n   *   This can specify a separating comma.\n   *\n   * @param {string} [label='\"status\": ']\n   *   A string that labels the string.\n   *   This can specify a property key and its surrounding punctuation.\n   *\n   * @param {number} [indent1=2]\n   *   The number of spaces that prefix the first and last lines.\n   *\n   * @param {number} [indent2=4]\n   *   The number of spaces that prefix each line other than the\n   *   first and last lines.\n   *\n   * @param {string} [suffix='']\n   *   A string that is printed at the end of the last line.\n   *   This can specify a separating comma.\n   *\n   * @return {string} A string representing the statuses in\n   *   standard sorted order.\n   */\n  static getStatusesAsString(statuses, prefix='', label='\"status\": ',\n        indent1=2, indent2=4, suffix='') {\n    const statusItems = UBF.getOwnItems(statuses);\n    statusItems.forEach((item) => {\n      item.sortKey = Results.getSortKey(item.name, statuses);\n    });\n    statusItems.sort(Results.compareSortKeys);\n    let result = ' '.repeat(indent1)+prefix+label+'[\\n';\n    const lines = []\n    statusItems.forEach((item, index) => {\n      let line = ' '.repeat(indent2) + '[';\n      item.value.asArray().forEach((entry, ix) => {\n        line += ix === 0 ? '' : ', ';\n        if (typeof entry === 'string') {\n          line += UBF.show(entry);\n        } else if (entry instanceof K.Decimal) {\n          if (Number.isInteger(entry.toNumber())) {\n            line += String(entry.toNumber()) + '.0';\n          } else {\n            line += String(entry.toNumber());\n          }\n        } else {\n          line += String(entry);\n        }\n      });\n      line += index === statusItems.length - 1 ? ']' : '],';\n      lines.push(line);\n    });\n    result += lines.join('\\n');\n    result += '\\n'+' '.repeat(indent1)+']'+suffix;\n    return result;\n  }\n\n  /** See the corresponding static class method for description.\n   * This method implicitly uses this.statuses, so only prefix, label,\n   * indent1, indent2, and suffix are parameters. */\n  getStatusesAsString(prefix, label, indent1, indent2, suffix) {\n    return Results.getStatusesAsString(this.statuses, prefix, label,\n          indent1, indent2, suffix);\n  }\n\n  /**\n   * Format a tally data object as a string\n   *\n   * The resulting string can be a JSON fragment specifying an\n   * object property.\n   *\n   * @param {Object} tally\n   *   A tally data object, keyed by candidate identifiers\n   *   and labels for other tabulation categories.\n   *\n   * @param {Object} statuses\n   *   A data object of Status objects, keyed by candidate identifiers.\n   *\n   * @param {string} [prefix='']\n   *   A string that prefixes label2.\n   *   This can specify a separating comma.\n   *\n   * @param {string} [label='\"tally\": ']\n   *   A string that labels the string.\n   *   This can specify a property key and its surrounding punctuation.\n   *\n   * @param {number} [indent1=2]\n   *   The number of spaces that prefix the first and last lines.\n   *\n   * @param {number} [indent2=4]\n   *   The number of spaces that prefix each line other than the\n   *   first and last lines.\n   *\n   * @param {string} [suffix='']\n   *   A string that is printed at the end of the last line.\n   *   This can specify a separating comma.\n   *\n   * @return {string} A string representing the statuses in\n   *   standard sorted order.\n   */\n  static getTallyAsString(tally, statuses, prefix='', label='\"tally\": ',\n        indent1=2, indent2=4, suffix='') {\n    const tallyItems = UBF.getOwnItems(tally);\n    tallyItems.forEach((item) => {\n      item.sortKey = Results.getSortKey(item.name, statuses);\n    });\n    tallyItems.sort(Results.compareSortKeys);\n    let result = ' '.repeat(indent1)+prefix+label+'{\\n';\n    const lines = [];\n    tallyItems.forEach((item) => {\n      let line = ' '.repeat(indent2)+'\"'+item.name+'\": ';\n      line += '[';\n      item.value.forEach((entry, ix) => {\n        line += (ix === 0 ? '' : ', ');\n        if (entry instanceof K.Decimal) {\n          if (Number.isInteger(entry.toNumber())) {\n            line += entry.toNumber().toString() + '.0';\n          } else {\n            line += entry.toNumber().toString();\n          }\n        } else {\n          line += String(entry);\n        }\n      });\n      line += ']';\n      lines.push(line);\n    });\n    result += lines.join(',\\n');\n    result += '\\n'+' '.repeat(indent1)+'}'+suffix;\n    return result;\n  }\n\n  /** See the corresponding static class method for description.\n   * This method implicitly uses this.tally and this.statuses,\n   * so only prefix, label, indent1, indent2, and suffix are parameters.\n   */\n  getTallyAsString(prefix, label, indent1, indent2, suffix) {\n    return Results.getTallyAsString(this.tally, this.statuses, prefix, label,\n        indent1, indent2, suffix);\n  }\n\n  /**\n   * Get a sort key for a candidate identifier or other tabulation\n   * category label.\n   *\n   * The sort key can be used to provide a standardized sort order\n   * for candidates and other tabulation categories,\n   * that reflects the results of a tabulation.\n   *\n   * The sort codes will sort:\n   * - candidates before other tabulation categories\n   *   - elected candidates before hopeful candidates\n   *     - elected candidates by increasing round of election,\n   *       then by decreasing votes\n   *   - hopeful candidates before defeated candidates\n   *     - hopeful candidates by decreasing votes\n   *   - defeated candidates by decreasing round of defeat,\n   *     then by decreasing votes\n   * - Other tabulation categories are sorted in the order recorded\n   *   in `K.OTHER_LABELS_ORDER`.\n   *\n   * Any remaining ties for sort order among candidates are resolved\n   * by the sort order of candidate identifiers.\n   *\n   * @param {string} code - The candidate identifier or label for a\n   *   tabulation category.\n   * @param {Object} statuses\n   *   A data object of Status objects, keyed by candidate identifiers.\n   * @return {array<string|number|Decimal9>} A sort key as an array of\n   *   strings and numbers, and/or Decimal9 instances.\n   */\n  static getSortKey(code, statuses) {\n    let sortKey = [[9, code]];\n    if (statuses[code] !== undefined) {\n      const nbrRound = statuses[code].nbrRound;\n      let votes = statuses[code].votes;\n      if (votes === null) {\n        votes = K.ONE.negative();\n      }\n      if (statuses[code].status === K.STATUS.elected) {\n        sortKey = [1, 1, nbrRound, votes.negative(), code];\n      } else if (statuses[code].status === K.STATUS.hopeful) {\n        sortKey = [1, 2, -nbrRound, votes.negative(), code];\n      } else {\n        sortKey = [1, 3, -nbrRound, votes.negative(), code];\n      }\n    } else {\n      let otherLabelsIndex = K.OTHER_LABELS_LIST.indexOf(code);\n      if (otherLabelsIndex >= 0) {\n        sortKey = [2, otherLabelsIndex, code];\n      } else {\n        sortKey = [3, 1, code];\n      }\n    }\n    return sortKey;\n  }\n\n  /**\n   * Compare two sort keys that were built with `getSortKey()`.\n   *\n   * This function is useful as a comparison parameter to a sort\n   * function.\n   *\n   * @param {array} a - The first sort key to compare.\n   * @param {array} b - The second sort key to compare.\n   * @return {number} A comparison result value that is\n   *   less than zero if `a` sorts before `b`,\n   *   greater than zero if `a` sort after `b`,\n   *   and equal to zero if `a` sorts equal to `b`.\n   */\n  static compareSortKeys (a,b) {\n    let comparison = null;\n    a.sortKey.some((aKey, ix) => {\n      const bKey = b.sortKey[ix];\n      if (aKey instanceof K.Decimal) {\n        if (aKey.isLess(bKey)) {\n          comparison = -1;\n          return true;\n        }\n        if (aKey.isGreater(bKey)) {\n          comparison = 1;\n          return true;\n        }\n        comparison = 0;\n        return false;\n      }\n      if (aKey < bKey) {\n        comparison = -1;\n        return true;\n      }\n      if (aKey > bKey) {\n        comparison = 1;\n        return true;\n      }\n      comparison = 0;\n      return false;\n    });\n    return comparison;\n  }\n\n  /**\n   * Create an array with the keys of a tally in sorted order.\n   * @param {Object} tally - A tally data object.\n   * @param {Object} statuses\n   *   A data object of Status objects, keyed by candidate identifiers.\n   * @return {array<string>} - An array with the keys of tally in\n   *   sorted order. */\n  static getTallyOrderAsArray(tally, statuses) {\n    const tallyItems = UBF.getOwnItems(tally);\n\n    tallyItems.forEach((item) => {\n      item.sortKey = Results.getSortKey(item.name, statuses);\n    });\n    tallyItems.sort(Results.compareSortKeys);\n    const result = tallyItems.map((item) => {\n      return item.name;\n    });\n    return result;\n  }\n\n  /**\n   * Create a data object with sort-order indexes for\n   *   the keys of a tally object.\n   * @param {Object} tally - A tally data item.\n   * @param {Object} statuses\n   *   A data object of Status objects, keyed by candidate identifiers.\n   * @return {array<string>} - A data object keyed by the keys\n   *   of `tally` and values that are numbers indicating their\n   *   relative sort order.\n   */\n  static getTallyOrderAsLookup(tally, statuses) {\n    const asArray = Results.getTallyOrderAsArray(tally, statuses);\n    const result = {};\n    asArray.forEach((code, index) => {\n      result[code] = index;\n    });\n    return result;\n  }\n}\n\nexport default Results;\n\n",
    "static": true,
    "longname": "/home/circ/devel/rcv/meeks-prf-js-github/src/results.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 334,
    "kind": "class",
    "name": "Results",
    "memberof": "src/results.js",
    "static": true,
    "longname": "src/results.js~Results",
    "access": "public",
    "export": true,
    "importPath": "meeks-prf-js/src/results.js",
    "importStyle": "Results",
    "description": "The results of a tabulation.\n\nThis class also includes various static functions that are\nuseful for converting those results to strings and printing them\nto the console.",
    "lineNumber": 23,
    "interface": false
  },
  {
    "__docId__": 335,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/results.js~Results",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/results.js~Results#constructor",
    "access": "public",
    "description": "Store the three results of a tabulation.\nSee the description of `Tabulation.tabulate()` for details.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "Set<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "elected",
        "description": "A set of elected candidate identifiers."
      },
      {
        "nullable": null,
        "types": [
          "array<Status>"
        ],
        "spread": false,
        "optional": false,
        "name": "statuses",
        "description": "An array of statuses for each\n  candidate."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "tally",
        "description": "A data object with the round-by-round\n  tally of votes and other counts for each candidate and\n  other tabulation categories."
      }
    ]
  },
  {
    "__docId__": 336,
    "kind": "member",
    "name": "elected",
    "memberof": "src/results.js~Results",
    "static": false,
    "longname": "src/results.js~Results#elected",
    "access": "public",
    "description": "A set of elected candidate identifiers.",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "Set<string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 337,
    "kind": "member",
    "name": "statuses",
    "memberof": "src/results.js~Results",
    "static": false,
    "longname": "src/results.js~Results#statuses",
    "access": "public",
    "description": "An array of statuses for each candidate.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "array<Status>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 338,
    "kind": "member",
    "name": "tally",
    "memberof": "src/results.js~Results",
    "static": false,
    "longname": "src/results.js~Results#tally",
    "access": "public",
    "description": "A data object with the round-by-round tally of votes and other\ncounts for each candidate and other tabulation categories.\n@type{Object}",
    "lineNumber": 44,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "getElectedAsString",
    "memberof": "src/results.js~Results",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/results.js~Results.getElectedAsString",
    "access": "public",
    "description": "Format as a string a set or array of elected candidate identifiers\n\nThe resulting string can be a JSON fragment specifying an\nobject property.",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "array",
          "Set"
        ],
        "spread": false,
        "optional": false,
        "name": "elected",
        "description": "A set or array of elected candidate identifiers."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "prefix",
        "description": "A string that prefixes label.\n  This can specify a separating comma."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'\"elected\": '",
        "defaultRaw": "'\"elected\": '",
        "name": "label",
        "description": "A string that labels the string.\n  This can specify a property key and its surrounding punctuation."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "indent1",
        "description": "The number of spaces that prefix the first (and only) line."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "suffix",
        "description": "A string that is printed at the end of the line.\n  This can specify a separating comma."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A string representing elected in\n  standard sorted order."
    }
  },
  {
    "__docId__": 340,
    "kind": "method",
    "name": "getElectedAsString",
    "memberof": "src/results.js~Results",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/results.js~Results#getElectedAsString",
    "access": "public",
    "description": "See the corresponding static class method for description.\nThis method implicitly uses this.elected, so only prefix, label,\nindent1, and suffix are parameters.",
    "lineNumber": 87,
    "params": [
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "label",
        "types": [
          "*"
        ]
      },
      {
        "name": "indent1",
        "types": [
          "*"
        ]
      },
      {
        "name": "suffix",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "getStatusesAsString",
    "memberof": "src/results.js~Results",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/results.js~Results.getStatusesAsString",
    "access": "public",
    "description": "Format a data object of candidate statuses as a string\n\nThe resulting string can be a JSON fragment specifying an\nobject property.",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "statuses",
        "description": "A data object of Status objects, keyed by candidate identifiers."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "prefix",
        "description": "A string that prefixes label2.\n  This can specify a separating comma."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'\"status\": '",
        "defaultRaw": "'\"status\": '",
        "name": "label",
        "description": "A string that labels the string.\n  This can specify a property key and its surrounding punctuation."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "indent1",
        "description": "The number of spaces that prefix the first and last lines."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "4",
        "defaultRaw": 4,
        "name": "indent2",
        "description": "The number of spaces that prefix each line other than the\n  first and last lines."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "suffix",
        "description": "A string that is printed at the end of the last line.\n  This can specify a separating comma."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A string representing the statuses in\n  standard sorted order."
    }
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "getStatusesAsString",
    "memberof": "src/results.js~Results",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/results.js~Results#getStatusesAsString",
    "access": "public",
    "description": "See the corresponding static class method for description.\nThis method implicitly uses this.statuses, so only prefix, label,\nindent1, indent2, and suffix are parameters.",
    "lineNumber": 159,
    "params": [
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "label",
        "types": [
          "*"
        ]
      },
      {
        "name": "indent1",
        "types": [
          "*"
        ]
      },
      {
        "name": "indent2",
        "types": [
          "*"
        ]
      },
      {
        "name": "suffix",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "getTallyAsString",
    "memberof": "src/results.js~Results",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/results.js~Results.getTallyAsString",
    "access": "public",
    "description": "Format a tally data object as a string\n\nThe resulting string can be a JSON fragment specifying an\nobject property.",
    "lineNumber": 199,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "tally",
        "description": "A tally data object, keyed by candidate identifiers\n  and labels for other tabulation categories."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "statuses",
        "description": "A data object of Status objects, keyed by candidate identifiers."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "prefix",
        "description": "A string that prefixes label2.\n  This can specify a separating comma."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'\"tally\": '",
        "defaultRaw": "'\"tally\": '",
        "name": "label",
        "description": "A string that labels the string.\n  This can specify a property key and its surrounding punctuation."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "indent1",
        "description": "The number of spaces that prefix the first and last lines."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "4",
        "defaultRaw": 4,
        "name": "indent2",
        "description": "The number of spaces that prefix each line other than the\n  first and last lines."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "suffix",
        "description": "A string that is printed at the end of the last line.\n  This can specify a separating comma."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A string representing the statuses in\n  standard sorted order."
    }
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "getTallyAsString",
    "memberof": "src/results.js~Results",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/results.js~Results#getTallyAsString",
    "access": "public",
    "description": "See the corresponding static class method for description.\nThis method implicitly uses this.tally and this.statuses,\nso only prefix, label, indent1, indent2, and suffix are parameters.",
    "lineNumber": 235,
    "params": [
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      },
      {
        "name": "label",
        "types": [
          "*"
        ]
      },
      {
        "name": "indent1",
        "types": [
          "*"
        ]
      },
      {
        "name": "indent2",
        "types": [
          "*"
        ]
      },
      {
        "name": "suffix",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "getSortKey",
    "memberof": "src/results.js~Results",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/results.js~Results.getSortKey",
    "access": "public",
    "description": "Get a sort key for a candidate identifier or other tabulation\ncategory label.\n\nThe sort key can be used to provide a standardized sort order\nfor candidates and other tabulation categories,\nthat reflects the results of a tabulation.\n\nThe sort codes will sort:\n- candidates before other tabulation categories\n  - elected candidates before hopeful candidates\n    - elected candidates by increasing round of election,\n      then by decreasing votes\n  - hopeful candidates before defeated candidates\n    - hopeful candidates by decreasing votes\n  - defeated candidates by decreasing round of defeat,\n    then by decreasing votes\n- Other tabulation categories are sorted in the order recorded\n  in `K.OTHER_LABELS_ORDER`.\n\nAny remaining ties for sort order among candidates are resolved\nby the sort order of candidate identifiers.",
    "lineNumber": 270,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "The candidate identifier or label for a\n  tabulation category."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "statuses",
        "description": "A data object of Status objects, keyed by candidate identifiers."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array<string|number|Decimal9>"
      ],
      "spread": false,
      "description": "A sort key as an array of\n  strings and numbers, and/or Decimal9 instances."
    }
  },
  {
    "__docId__": 346,
    "kind": "method",
    "name": "compareSortKeys",
    "memberof": "src/results.js~Results",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/results.js~Results.compareSortKeys",
    "access": "public",
    "description": "Compare two sort keys that were built with `getSortKey()`.\n\nThis function is useful as a comparison parameter to a sort\nfunction.",
    "lineNumber": 309,
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "The first sort key to compare."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "The second sort key to compare."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A comparison result value that is\n  less than zero if `a` sorts before `b`,\n  greater than zero if `a` sort after `b`,\n  and equal to zero if `a` sorts equal to `b`."
    }
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "getTallyOrderAsArray",
    "memberof": "src/results.js~Results",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/results.js~Results.getTallyOrderAsArray",
    "access": "public",
    "description": "Create an array with the keys of a tally in sorted order.",
    "lineNumber": 346,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "tally",
        "description": "A tally data object."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "statuses",
        "description": "A data object of Status objects, keyed by candidate identifiers."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array<string>"
      ],
      "spread": false,
      "description": "An array with the keys of tally in\n  sorted order."
    }
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "getTallyOrderAsLookup",
    "memberof": "src/results.js~Results",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/results.js~Results.getTallyOrderAsLookup",
    "access": "public",
    "description": "Create a data object with sort-order indexes for\n  the keys of a tally object.",
    "lineNumber": 369,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "tally",
        "description": "A tally data item."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "statuses",
        "description": "A data object of Status objects, keyed by candidate identifiers."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array<string>"
      ],
      "spread": false,
      "description": "A data object keyed by the keys\n  of `tally` and values that are numbers indicating their\n  relative sort order."
    }
  },
  {
    "__docId__": 349,
    "kind": "file",
    "name": "src/status.js",
    "content": "/**\n * @copyright 2016-2019 David Cary;\n * @license Apache-2.0\n *\n * @module Status\n */\n\nimport K from \"./constants.js\";\n\n/**\n *\n * A class to record a candidate's status in a Meek tabulation.\n */\nexport class Status {\n  /**\n   * @param {(string|object)} candidate -\n   *   the candidate identifier for the candidate.\n   *\n   *   If the candidate argument is an object,\n   *   then expect that it is a Status or is Status-like\n   *   and initialize this Status object\n   *   from the corresponding keys of that object.\n   * @param {K.Decimal|null} [votes=K.ZERO] - The number of votes for the\n   *   candidate; null before the first round and for excluded\n   *   candidates.\n   * @param {number} [nbrRound=0] - The 1-based number of the\n   *   round for which this status applies or the round in which the\n   *   candidate was elected or defeated.\n   * @param {string} [status=K.STATUS.hopeful] - A string indicating the\n   *   status of the candidate.  The value should be one in K.STATUS.\n   * @param {number} [keepFactor=K.ONE] - The fraction of a ballot's\n   *   vote weight that is counted for the candidate.\n   * @param {string} [destiny=K.DESTINY.normal] - An indication of\n   *   whether the candidate was pre-designated as excluded or protected.\n   *   The value should be one in K.DESTINY.\n   *\n   */\n  constructor (candidate, votes=K.ZERO, nbrRound=0,\n        status=K.STATUS.hopeful, keepFactor=K.ONE,\n        destiny=K.DESTINY.normal) {\n    if (typeof(candidate) == 'object') {\n      /** The candidate identifier.\n       *  @type {string} */\n      this.candidate = candidate['candidate'];\n      /** The number of votes for the candidate when the candidate was\n       *    elected or defeated, or as of the most recent tabulation of\n       *    votes if the candidate is hopeful; `null` if the candidate\n       *    is excluded or if no rounds have been tabulated yet.\n       *  @type {K.Decimal|null} */\n      this.votes = candidate['votes'];\n      /** The 1-based number of the round for which votes applies,\n       *    possibly 0 if votes is null.\n       *  @type {number} */\n      this.nbrRound = candidate['nbrRound'];\n      /** A string indicating the status of\n       *    the candidate; a value in `K.STATUS`.\n       *  @type {string} */\n      this.status = candidate['status'];\n      /** The fraction of a ballot's vote weight that was counted for\n       *    the candidate.\n       *  @type {number} */\n      this.keepFactor = candidate['keepFactor'];\n      /** An indication of whether the candidate was pre-designated as\n       *    excluded, as protected, or neither.  The value should be\n       *    in `K.DESTINY`.\n       *  @type {string} destiny */\n      this.destiny = candidate['destiny'] || K.DESTINY.normal;\n    } else {\n      this.candidate = candidate;\n      this.votes = votes;\n      this.nbrRound = nbrRound;\n      this.status = status;\n      this.keepFactor = keepFactor;\n      this.destiny = destiny;\n    }\n    if (this.candidate === null || this.candidate === undefined) {\n      this.candidate = ':???';\n    }\n  }\n\n  /**\n   * Create a corresponding plain data object.\n   * @returns {object} An object that has keys and properties corresponding to\n   * the data properties of this object.\n   */\n  asSimpleObject() {\n    const result = {'candidate': this.candidate, 'votes': this.votes,\n          'nbrRound': this.nbrRound, 'status': this.status,\n          'keepFactor': this.keepFactor, 'destiny': this.destiny};\n    return result;\n  }\n\n  /**\n   * Create a corresponding array with the data values.\n   * @returns {array} An array that lists the values of the status\n   *   properties as follows:\n   *\n   *       [candidate, status, nbrRound, votes, keepFactor, destiny]\n   *\n   *   where destiny is omitted if it is 'normal'.\n   */\n  asArray() {\n    const result = [this.candidate, this.status, this.nbrRound,\n          this.votes, this.keepFactor];\n    if (this.destiny !== K.DESTINY.normal) {\n      result.push(this.destiny);\n    }\n    return result;\n  }\n\n  /**\n   * Create a string representation of the keys and values.\n   * @returns {string} A string that lists the keys and values of the\n   *   `Status` properties in the format of a data object literal,\n   *   omitting the key and value for destiny if its value is 'normal'.\n   */\n  toString() {\n    let result = '{'\n    result += 'candidate: ' + (\n          this.candidate === null || this.candidate === undefined ?\n          this.candidate : '\"' + this.candidate.toString() + '\"');\n    result += ', status: \"' + this.status.toString() + '\"';\n    result += ', nbrRound: ' + (\n          this.nbrRound === null ? this.nbrRound : this.nbrRound.toString());\n    result += ', votes: ' + this.votes.toString();\n    result += ', keepFactor: ' + this.keepFactor.toString();\n    if (this.destiny !== K.DESTINY.normal) {\n      result += ', destiny: \"' + this.destiny.toString() + '\"';\n    }\n    result += '}';\n    return result;\n  }\n\n  /**\n   * Test for `Status` equality.\n   *\n   * Tests whether another value has the same values corresponding\n   *   to the properties of this `Status` instance.\n   * @param {*} other - A value to be compared.\n   * @returns {boolean} A true/false indication of whether `other` has\n   *   the same `Status` property values as the calling Status.\n   */\n  isEqual(other) {\n    let isEqual = true;\n    try {\n      if (this.candidate !== other.candidate) {\n        return false;\n      }\n      if (this.status !== other.status) {\n        return false;\n      }\n      if (this.nbrRound !== other.nbrRound) {\n        return false;\n      }\n      if (this.votes.isNotEqual(other.votes)) {\n        return false;\n      }\n      if (this.keepFactor.isNotEqual(other.keepFactor)) {\n        return false;\n      }\n      if (this.destiny !== other.destiny) {\n        return false;\n      }\n    }\n    catch (err) {\n      isEqual = false;\n    }\n    return isEqual;\n  }\n\n  /**\n   * Test for `Status` inequality.\n   *\n   * Tests whether another value has any different values\n   *   corresponding to those of this Status instance.\n   * @param {*} other - A value to be compared.\n   * @returns {boolean} A true/false indication of whether any of the\n   *   calling Status object's property values are different from the\n   *   corresponding values for `other`.\n   */\n  isNotEqual(other) {\n    const result = !this.isEqual(other);\n    return result;\n  }\n}\n",
    "static": true,
    "longname": "/home/circ/devel/rcv/meeks-prf-js-github/src/status.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 350,
    "kind": "class",
    "name": "Status",
    "memberof": "src/status.js",
    "static": true,
    "longname": "src/status.js~Status",
    "access": "public",
    "export": true,
    "importPath": "meeks-prf-js/src/status.js",
    "importStyle": "{Status}",
    "description": "\nA class to record a candidate's status in a Meek tabulation.",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 351,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/status.js~Status",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/status.js~Status#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "candidate",
        "description": "the candidate identifier for the candidate.\n\n  If the candidate argument is an object,\n  then expect that it is a Status or is Status-like\n  and initialize this Status object\n  from the corresponding keys of that object."
      },
      {
        "nullable": null,
        "types": [
          "K.Decimal",
          "null"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "K.ZERO",
        "defaultRaw": "K.ZERO",
        "name": "votes",
        "description": "The number of votes for the\n  candidate; null before the first round and for excluded\n  candidates."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "nbrRound",
        "description": "The 1-based number of the\n  round for which this status applies or the round in which the\n  candidate was elected or defeated."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "K.STATUS.hopeful",
        "defaultRaw": "K.STATUS.hopeful",
        "name": "status",
        "description": "A string indicating the\n  status of the candidate.  The value should be one in K.STATUS."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "K.ONE",
        "defaultRaw": "K.ONE",
        "name": "keepFactor",
        "description": "The fraction of a ballot's\n  vote weight that is counted for the candidate."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "K.DESTINY.normal",
        "defaultRaw": "K.DESTINY.normal",
        "name": "destiny",
        "description": "An indication of\n  whether the candidate was pre-designated as excluded or protected.\n  The value should be one in K.DESTINY."
      }
    ]
  },
  {
    "__docId__": 352,
    "kind": "member",
    "name": "candidate",
    "memberof": "src/status.js~Status",
    "static": false,
    "longname": "src/status.js~Status#candidate",
    "access": "public",
    "description": "The candidate identifier.",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 353,
    "kind": "member",
    "name": "votes",
    "memberof": "src/status.js~Status",
    "static": false,
    "longname": "src/status.js~Status#votes",
    "access": "public",
    "description": "The number of votes for the candidate when the candidate was\n   elected or defeated, or as of the most recent tabulation of\n   votes if the candidate is hopeful; `null` if the candidate\n   is excluded or if no rounds have been tabulated yet.",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "K.Decimal",
        "null"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 354,
    "kind": "member",
    "name": "nbrRound",
    "memberof": "src/status.js~Status",
    "static": false,
    "longname": "src/status.js~Status#nbrRound",
    "access": "public",
    "description": "The 1-based number of the round for which votes applies,\n   possibly 0 if votes is null.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 355,
    "kind": "member",
    "name": "status",
    "memberof": "src/status.js~Status",
    "static": false,
    "longname": "src/status.js~Status#status",
    "access": "public",
    "description": "A string indicating the status of\n   the candidate; a value in `K.STATUS`.",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 356,
    "kind": "member",
    "name": "keepFactor",
    "memberof": "src/status.js~Status",
    "static": false,
    "longname": "src/status.js~Status#keepFactor",
    "access": "public",
    "description": "The fraction of a ballot's vote weight that was counted for\n   the candidate.",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 357,
    "kind": "member",
    "name": "destiny",
    "memberof": "src/status.js~Status",
    "static": false,
    "longname": "src/status.js~Status#destiny",
    "access": "public",
    "description": "An indication of whether the candidate was pre-designated as\n   excluded, as protected, or neither.  The value should be\n   in `K.DESTINY`.",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "asSimpleObject",
    "memberof": "src/status.js~Status",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/status.js~Status#asSimpleObject",
    "access": "public",
    "description": "Create a corresponding plain data object.",
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} An object that has keys and properties corresponding to\nthe data properties of this object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "An object that has keys and properties corresponding to\nthe data properties of this object."
    },
    "params": []
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "asArray",
    "memberof": "src/status.js~Status",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/status.js~Status#asArray",
    "access": "public",
    "description": "Create a corresponding array with the data values.",
    "lineNumber": 102,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array} An array that lists the values of the status\n  properties as follows:\n\n      [candidate, status, nbrRound, votes, keepFactor, destiny]\n\n  where destiny is omitted if it is 'normal'."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "An array that lists the values of the status\n  properties as follows:\n\n      [candidate, status, nbrRound, votes, keepFactor, destiny]\n\n  where destiny is omitted if it is 'normal'."
    },
    "params": []
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "toString",
    "memberof": "src/status.js~Status",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/status.js~Status#toString",
    "access": "public",
    "description": "Create a string representation of the keys and values.",
    "lineNumber": 117,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} A string that lists the keys and values of the\n  `Status` properties in the format of a data object literal,\n  omitting the key and value for destiny if its value is 'normal'."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A string that lists the keys and values of the\n  `Status` properties in the format of a data object literal,\n  omitting the key and value for destiny if its value is 'normal'."
    },
    "params": []
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "isEqual",
    "memberof": "src/status.js~Status",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/status.js~Status#isEqual",
    "access": "public",
    "description": "Test for `Status` equality.\n\nTests whether another value has the same values corresponding\n  to the properties of this `Status` instance.",
    "lineNumber": 143,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A true/false indication of whether `other` has\n  the same `Status` property values as the calling Status."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "A value to be compared."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A true/false indication of whether `other` has\n  the same `Status` property values as the calling Status."
    }
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "isNotEqual",
    "memberof": "src/status.js~Status",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/status.js~Status#isNotEqual",
    "access": "public",
    "description": "Test for `Status` inequality.\n\nTests whether another value has any different values\n  corresponding to those of this Status instance.",
    "lineNumber": 181,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} A true/false indication of whether any of the\n  calling Status object's property values are different from the\n  corresponding values for `other`."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "A value to be compared."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "A true/false indication of whether any of the\n  calling Status object's property values are different from the\n  corresponding values for `other`."
    }
  },
  {
    "__docId__": 370,
    "kind": "file",
    "name": "src/util_basic.js",
    "content": "/**\n * @copyright 2016-2019 David Cary;\n * @license Apache-2.0\n *\n * @module UtilBasic\n * @summary Basic utility functions and classes\n *   without other module dependencies.\n */\n\n/** A convenience class for exporting a collection of functions\n *  as static functions of the class.\n *\n *  This class is intended to be used for its static functions and is\n *  not expected to be instantiated.0\n */\nexport class UtilBasicFunctions {\n\n  /** Create a multi-line description of an error and its traceback.\n   * @param {Error} err - a caught exception.\n   * @return {string} a multi-line string showing message and traceback\n   *   of err. */\n  static describeError(err) {\n    return describeError(err);\n  }\n\n  /** Indent a possibly multi-line text string.\n   *\n   * @param {string} message - the message string to indent.\n   * @param {number} [indentBy=2] - the number of spaces to indent each\n   *   line of the message.\n   * @return {string} a string with the indentations added to each line.\n   */\n  static indentMessage(message, indentBy=2) {\n    return indentMessage(message, indentBy);\n  }\n\n  /**\n   * Create an array of strings from a string or an array of strings.\n   *\n   * If value is a string, it is split by its first character,\n   * and the resulting parts populate the array.\n   *\n   * If the value is the empty string, an empty array is returned.\n   *\n   * If value is a string of length 1, an array containing a single\n   * empty string is returned.\n   *\n   * If value is an array of strings,\n   * (either typeof 'string' or instanceof String),\n   * a copy of that array is returned,\n   * with any Strings converted to items of typeof 'string'.\n   *\n   * @param {string|array} value - A string that will be converted to an\n   * array of strings, or an array that will be verified as only\n   * containing strings.\n   *\n   * @return {array} An array of strings.\n   *\n   * @throws {UtilValueError} If value is not a string and is not an\n   * array of strings.\n   */\n  static toArrayOfStrings(value) {\n    return toArrayOfStrings(value);\n  }\n\n  /**\n   * Get the class name of an instance object, if it is available.\n   *\n   * Look for the name property of the prototype's constructor.\n   *\n   * @param {Object} instance - A value;\n   * @return {string} The found name or the empty string.\n   */\n  static getClassNameOf(instance) {\n    return getClassNameOf(instance);\n  }\n\n  /**\n   * Get an array of an object's enumerable property keys.\n   *\n   * Accomplish this with a traditional for in loop.\n   * This can retrieve keys that are only in the prototype chain,\n   * and can reflect gaps in an array's indexing.\n   *\n   * @param {Object} object - The object for which keys are retrieved.\n   * @return {array<string>} An array of found keys.\n   */\n  static getKeys(object) {\n    return getKeys(object);\n  }\n\n  /**\n   * Get a sorted array of an object's enumerable property keys.\n   *\n   * Use 'getKeys()' to retrieve the keys.\n   *\n   * For sorting, key strings that correspond to a decimal integer value\n   * are converted to numbers and sorted in numeric order before any\n   * string keys.  The numbers are converted back to strings before\n   * returning the sorted array.\n   * @param {Object} object - The object for which keys are retrieved.\n   * @return {Array<string>} A sorted array of found keys.\n   */\n  static getSortedKeys(object) {\n    return getSortedKeys(object);\n  }\n\n  /**\n   * Get an array of names / keys of enumerable properties for an\n   * object.\n   *\n   * The names are retrieved using a for-in loop.\n   * @param {Object} object - The object for which names are retrieved.\n   * @return {array} An array with the found property names / keys.\n   */\n  static getNames(object) {\n    return getNames(object);\n  }\n\n  /**\n   * Get an array of names and values for an object's enumerable\n   * properties.\n   *\n   * Each entry in the array is an `ObjItem` instance.\n   *\n   * The names and values are retrieved with a for-in loop.\n   * @param {Object} object - The object for which names and values are\n   *   retrieved.\n   * @return {array} An array with the found property data.\n   */\n  static getItems(object) {\n    return getItems(object);\n  }\n\n  /**\n   * Get an array of values for an object's enumerable properties.\n   *\n   * The values are retrieved with a for-in loop.\n   * @param {Object} object - The object for which values are retrieved.\n   * @return {array} An array with the found property values.\n   */\n  static getValues(object) {\n    return getValues(object);\n  }\n\n  /**\n   * Get an array of names / keys of own properties for an object.\n   *\n   * The names are retrieved using `Object.getOwnPropertyDescriptors()`.\n   * @param {Object} object - The object for which names are retrieved.\n   * @return {array} An array with the found property names / keys.\n   * @throws {*} An error if Object.getOwnPropertyDescriptors() is not\n   *   supported.\n   */\n  static getOwnNames(object) {\n    return getOwnNames(object);\n  }\n\n  /**\n   * Get an array of names and values of own properties for an object.\n   *\n   * The data is retrieved using `Object.getOwnPropertyDescriptors()`.\n   * @param {Object} object - The object for which data are retrieved.\n   * @return {array} An array with the found names and values.\n   *   Each array entry is an instance of `ObjItem`.\n   * @throws {*} An error if Object.getOwnPropertyDescriptors() is not\n   *   supported.\n   */\n  static getOwnItems(object) {\n    return getOwnItems(object);\n  }\n\n  /**\n   * Get an array of values of own properties for an object.\n   *\n   * The values are retrieved using `Object.getOwnPropertyDescriptors()`.\n   * @param {Object} object - The object for which values are retrieved.\n   * @return {array} An array with the found values.\n   *   Each array entry is an instance of `ObjItem`.\n   * @throws {*} An error if Object.getOwnPropertyDescriptors() is not\n   *   supported.\n   */\n  static getOwnValues(object) {\n    return getOwnValues(object);\n  }\n\n  /** Create a string representation of a Javascript value.\n   *\n   * The value can be a primitive or an object.\n   * Support for data objects, arrays, and sets is provided.\n   *\n   * Currently there is no use of the `options` and `showClasses`\n   * parameters.\n   *\n   * @param {*} value - A value to be converted to a string.\n   * @param {Object} options - A data object with options for\n   *   converting to and formatting of the string.\n   * @param {array<ShowClass>} showClasses - Per class customizations\n   *   for how the value should be converted and how the string\n   *   should be formatted.\n   * @return {string} A string representing the value.\n   */\n  static show(value, options, showClasses) {\n    const result = _show.show(value, options, showClasses);\n    return result;\n  }\n\n  /**\n   * Produce the set union of two iterables.\n   *\n   * @param {iterable} iterable1 - An iterable object such as an array,\n   *   set, or other object.\n   * @param {iterable} iterable2 - An iterable object such as an array,\n   *   set, or other object.\n   * @return {Set} A set with the union of the iterated values.\n   * For object arguments, the set contains their keys.\n   */\n  static setUnion(iterable1, iterable2) {\n    return setUnion(iterable1, iterable2);\n  }\n\n  /**\n   * Produce the set intersection of two iterables.\n   *\n   * @param {iterable} iterable1 - An iterable object such as an array,\n   *   set, or other object.\n   * @param {iterable} iterable2 - An iterable object such as an array,\n   *   set, or other object.\n   * @return {Set} A set with the intersection of the iterated values.\n   * For object arguments, the set contains their keys.\n   */\n  static setIntersection(iterable1, iterable2) {\n    return setIntersection(iterable1, iterable2);\n  }\n\n  /**\n   * Produce the set difference of two iterables.\n   *\n   * @param {iterable} iterable1 - An iterable object such as an array,\n   *   set, or other object.\n   * @param {iterable} iterable2 - An iterable object such as an array,\n   *   set, or other object.\n   * @return {Set} A set with difference of the iterated values,\n   *   all of the items in iterable1 that are not in iterable2.\n   * For object arguments, the set contains their keys.\n   */\n  static setDifference(iterable1, iterable2) {\n    return setDifference(iterable1, iterable2);\n  }\n}\n\n/**\n * An alias for the `UtilBasicFunctions` class,\n * which provides various functions as static class\n * functions for general use. */\nexport const UBF = UtilBasicFunctions;\n\n\n/** A base class for thrown errors.\n */\nexport class UtilBaseError extends Error {\n  /**\n   * @param {string} [message='ERROR'] - text describing the error.\n   * @param {array} [otherValues=[]] - an array of values,\n   *   each value is typically a two-element array as [description, value].\n   *   Other kinds of values are possible, however.\n   * @param {Error|null} [priorError=null] - an error of some type that was the\n   *   cause for this error being formed. */\n  constructor(message='ERROR', otherValues=[], priorError=null) {\n    super(message);\n    /** The message for this error.\n     * @type {string} */\n    this.message = String(message);\n    /** Other values associated with this error and which document additional\n     *    context surrounding the error.\n     * @type {array} */\n    this.otherValues = otherValues;\n    /** The prior error that was a direct cause for this error.\n     * @type {Error|null} */\n    this.priorError = priorError;\n    /** A fuller description of the prior error, created using describeError().\n     * @type(string) */\n    this.priorErrorDescription = '';\n    if (this.priorError !== null &&\n          this.priorError instanceof Error) {\n      this.priorErrorDescription = describeError(this.priorError)\n    }\n    /** The name of the class of this error.\n     * @type{string} */\n    this.name = getClassNameOf(this);\n  }\n\n  _showPriorError() {\n    // Select what to show about the priorError.\n    return this.priorError.toString();\n  }\n\n  /** Convert to a string\n   * @return {string} a string representing the error's message,\n   *   its otherValues, and its priorError, if any. */\n  toString() {\n    let result = [this.name + (this.message ? ': ' + this.message : '')];\n    if (this.otherValues.length) {\n      result.push(this._otherValuesAsStr(this.otherValues));\n    }\n    if (this.priorError) {\n      result.push('  Prior error:');\n      result.push(indentMessage(this._showPriorError(), 4));\n    }\n    result = result.join('\\n');\n    return result;\n  }\n\n  _otherValuesAsStr(otherValues, indentBy=2) {\n    const limit = 200;\n    let result = [];\n    if (otherValues instanceof Array) {\n      this.otherValues.forEach((valueItem, ix) => {\n        if (valueItem instanceof Array && valueItem.length === 2) {\n          let line = String(valueItem[0]).padEnd(25) + ' = ';\n          const showValue = UBF.show(valueItem[1]);\n          const value = truncateString(showValue, limit);\n          line += value;\n          result.push(line);\n        } else {\n          const showValue = UBF.show(valueItem);\n          const value = truncateString(showValue, limit);\n          result.push(value);\n        }\n      });\n    } else {\n      const showValue = UBF.show(otherValues);\n      const value = truncateString(otherValues, limit);\n      result.push(value);\n    }\n    result = result.join('\\n');\n    result = indentMessage(result, indentBy);\n    return result;\n  }\n}\n\n/** This function is used by UtilBaseError to limit how long\n * a displayed value can be from otherValues. */\nfunction truncateString(value, limit=40) {\n  if (typeof value != 'string') {\n    value = String(value);\n  }\n  if (!limit || !Number.isInteger(limit) || limit < 0) {\n    limit = 10;\n  }\n  if (value.length > limit) {\n    value = value.slice(0, limit);\n    if (value.length && value[0] === '\"') {\n      value += '\"';\n    }\n    value = '(only first ' + limit + ' chars): ' + value +\n          ' + more ...';\n  }\n  return value;\n}\n\n\n/** An error class for invalid data values and types.\n */\nexport class UtilValueError extends UtilBaseError {\n  /** The calling convention is the same as for UtilBaseError. */\n  constructor(message, otherValues=[], priorError=null) {\n    super(message, otherValues, priorError);\n  }\n}\n\n/** See the corresponding UtilBasicFunction method. */\nfunction describeError(err) {\n  //\"\"\"\n  const parts = [];\n  parts.push('Error description:');\n  parts.push(indentMessage(err.toString()));\n  if (err.stack) {\n    parts.push('Error stack:');\n    parts.push(indentMessage(err.stack.toString()));\n  } else {\n    parts.push(`  ${err.toString()}:`);\n  }\n  if (err.priorError) {\n    parts.push('Prior Error:');\n    parts.push(indentMessage(describeError(err.priorError), 2));\n  }\n  parts.push('END Error description');\n  const result = parts.join(\"\\n\");\n  return result;\n}\n\n/** See the corresponding UtilBasicFunction method. */\nfunction indentMessage(message, indentBy=2) {\n  const indentStr = ' '.repeat(indentBy);\n  let tail = '';\n  let mainMessage = message.toString();\n  //console.log('typeof mainMessage='+typeof mainMessage);\n  //console.log('mainMessage.valueOf()='+mainMessage.valueOf());\n  if (mainMessage && mainMessage.slice(-1) === '\\n') {\n    tail = '\\n';\n    mainMessage = message.slice(0,-1);\n  }\n  const newMessage = (\n        indentStr + mainMessage.replace(/\\n/g, '\\n' + indentStr) + tail);\n  return newMessage;\n}\n\n/** See the corresponding UtilBasicFunction method. */\nfunction toArrayOfStrings(value) {\n  if (typeof value == 'string' || value instanceof String) {\n    if (value.length) {\n      const result = value.slice(1).split(value[0]);\n      return result;\n    } else {\n      return [];\n    }\n  } else if (Array.isArray(value)) {\n    const result = [];\n    // for loop, instead of forEach, used to detect skipped/undefined values\n    for (let ix = 0; ix < value.length; ix++) {\n      const item = value[ix];\n      if (typeof item == 'string' || item instanceof String) {\n        result.push(String(item));\n        continue;\n      }\n      throw new UtilValueError('Array has an item that is not a string:', [\n            ['item position', ix + 1],\n            ['typeof item', typeof item],\n            ['item', item],\n            ['array length', value.length],\n      ]);\n    }\n    return result;\n  }\n  throw new UtilValueError('Value is not a string or array:', [\n        ['typeof value', typeof value],\n        ['value', value],\n  ]);\n}\n\n/** See the corresponding UtilBasicFunction method. */\nfunction getClassNameOf(instance) {\n  let result = '';\n  if (typeof instance != 'object' || instance === null) {\n    return result;\n  }\n  const prototype = Object.getPrototypeOf(instance);\n  if ('constructor' in prototype && 'name' in prototype.constructor) {\n    result = prototype.constructor.name;\n    if (typeof result == 'string') {\n      return result;\n    }\n  }\n  return '';\n}\n\n/** See the corresponding UtilBasicFunction method. */\nfunction getKeys(object) {\n  const result = [];\n  try {\n    for (let x in object) {\n      result.push(x);\n    }\n  } catch (exc) { }\n  return result;\n}\n\n/** See the corresponding UtilBasicFunction method. */\nfunction getSortedKeys(object) {\n  let result = getKeys(object);\n  if (result.length) {\n    result = result.map(key =>\n      typeof key == 'string' && key.match(/^(\\+|-)?[0-9]+$/) ?\n            parseInt(key) : key\n    );\n    result.sort((a, b) => {\n      let comparison = 2;\n      if (typeof a == 'number') {\n        comparison = typeof b == 'number' ? (a < b ? -1 : a > b ? 1 : 0) : -1;\n      } else if (typeof a == 'string') {\n        if (typeof b == 'string') {\n          comparison = a < b ? -1 : a > b ? 1 : 0;\n        } else {\n          comparison = typeof b == 'number' ? 1 : -1;\n        }\n      } else if (typeof b == 'symbol') {\n        comparison = 0;\n      } else {\n        comparison = 1;\n      }\n      return comparison;\n    });\n    result = result.map(\n      key => typeof key == 'number' ? String(key) : key\n    );\n  }\n  return result;\n}\n\n// a regexp for a decimal, possibly infinite number that is not a NaN:\n//     /^(+|-)?(Infinity)|(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+)(e(+|-)[0-9]+))$/\n// a regexp for a decimal, non-negative array index\n//     /^[0-9]+$/\n// a regexp for a decimial integer\n//     /^(+|-)[0-9]+$/\n//export usort(array)\n/*\nclass USort {\n  static sort(array) {\n    if (!Array.isArray(array)) {\n*/\n\n/**\n * A helper class for the `Show` class that will be used to provide\n * custom formatting and parsing for a particular class.\n *\n * This is not yet actively used.\n */\nclass ShowClass {\n  constructor(classType, showFunction, options={}) {\n    this.classType = classType;\n    this.showFunction = showFunction;\n    this.options = options;\n  }\n}\n\n/**\n * A helper class for the `Show` class that is used to internally\n * represent intermediate results.\n *\n * This is not expected to be used as part of the public interface.\n */\nclass _ShowParts {\n  constructor(content='', name='', head='', tail='', separator=', ') {\n    this.content = content;\n    this.name = name;\n    this.head = head;\n    this.tail = tail;\n    this.separator = separator;\n    if (this.name === 'Object' && Array.isArray(this.content) &&\n          this.head === '{' && this.tail === '}') {\n      this.name = '';\n    }\n  }\n\n  get length() {\n    let result = this.name.length + this.head.length + this.tail.length;\n    if (this.name.length) {\n      result += 2;\n    }\n    if (typeof this.content == 'string') {\n      result += this.content.length;\n    } else if (Array.isArray(this.content)) {\n      this.content.forEach((content_item, ix) => {\n        result += content_item.length + (ix > 0 ? this.separator.length : 0);\n      });\n    }\n    return result;\n  }\n\n  push(item) {\n    if (typeof this.content == 'string') {\n      this.content += String(item);\n    } else if (Array.isArray(this.content)) {\n      this.content.push(String(item));\n    }\n    return this;\n  }\n\n  compose() {\n    let result = '';\n    if (this.name.length) {\n      result += '@' + this.name + ':';\n    }\n    result += this.head;\n    if (typeof this.content == 'string') {\n      result += this.content;\n    } else if (Array.isArray(this.content)) {\n      result += this.content.join(this.separator);\n    }\n    result += this.tail;\n    return result;\n  }\n}\n\n/**\n * A class for creating string representations of primitive values\n * and objects, using an extensible mechanism for custom handling\n * of various types of objects.\n *\n * Current support handles all standard primitive types except for\n * Symbols, for Arrays and Sets, and for other objects generally.\n */\nclass Show {\n  constructor(options={}, showClasses=[]) {\n    this.options = options;\n    this.showClasses = showClasses;\n  }\n  show(value, options={}, showClasses=[]) {\n    const useOptions = Object.assign({}, this.options, options);\n    const useShowClasses = showClasses.concat(this.showClasses);\n    const result = this._compose(value, useOptions, useShowClasses);\n    return result;\n  }\n\n  _compose(value, options, showClasses) {\n    const parts = this._decompose(value, options, showClasses);\n    const formatted = this._formatParts(parts, value, options, showClasses);\n    const result = formatted.compose();\n    return result;\n  }\n\n  _formatParts(parts, value, options, showClasses) {\n    return parts;\n  }\n\n  _decompose(value, options, showClasses) {\n    if (typeof value === 'string') {\n      const value2 = value\n            .replace(/\\\\/g, '\\\\\\\\')\n            .replace(/\"/g, '\\\\\"')\n            .replace(/\\n/g, '\\\\n')\n            .replace(/\\t/g, '\\\\t')\n            .replace(/\\r/g, '\\\\r')\n      ;\n      const parts = new _ShowParts(value2, '', '\"', '\"');\n      return parts;\n    }\n    if (typeof value === 'number') {\n      return new _ShowParts(String(value));\n    }\n    if (typeof value === 'undefined') {\n      return new _ShowParts('undefined');\n    }\n    if (value === null) {\n      return new _ShowParts('null');\n    }\n    if (Array.isArray(value)) {\n      const parts = new _ShowParts([], '', '[', ']');\n      let nextIndex = 0;\n      getKeys(value).forEach(value_index => {\n        const index = Number(value_index);\n        if (Number.isInteger(index) && index >= 0 &&\n              index < Number.MAX_SAFE_INTEGER) {\n          if (index > nextIndex) {\n            parts.push('<skip '+(index - nextIndex)+'>');\n            nextIndex = index;\n          }\n          parts.push(this._compose(value[value_index], options, showClasses));\n          nextIndex = index + 1;\n        }\n      });\n      return parts;\n    }\n//    if (value instanceof K.Decimal && !options.decimal9AsObject) {\n//      return new _ShowParts(value.toString());\n//    }\n    if (value instanceof Set) {\n      const parts = new _ShowParts(this._compose(Array.from(value)), 'Set');\n      return parts;\n    }\n    if (typeof value === 'boolean') {\n      return  new _ShowParts(String(value));\n    }\n    if (typeof value === 'function') {\n      return new _ShowParts('<function>');\n    }\n    /*\n    if (typeof value === 'bigint') {\n      const result = value.toString();\n      return result;\n    }\n    */\n    if (typeof value === 'object') {\n      const parts = new _ShowParts([], getClassNameOf(value), '{', '}');\n      getSortedKeys(value).forEach((value_key, ix) => {\n        parts.push(this._compose(String(value_key), options, showClasses) +\n              ': ' + this._compose(value[value_key], options, showClasses));\n      });\n      return parts;\n    }\n    return '<unknown>';\n  }\n}\n\n/**\n * An instance of the `Show` class which has its `show()` method\n * exposed as a static method of the `UtilBasicFunctions` class.\n */\nconst _show = Object.freeze(new Show());\n\n/**\n * A class representing the name and value of an object property.\n */\nclass ObjItem {\n  /**\n   * @param {string|symbol} The name / key of the property.\n   * @param {*} The value of the property.\n   */\n  constructor(name, value) {\n    /** The name of the property, either a string or a symbol.\n     * @type {string|symbol} */\n    this.name = name;\n    /** The value of the property.\n     * @type {*} */\n    this.value = value;\n  }\n\n  /**\n   * Produce a string representation of the name and value,\n   * mimicking the format of an object literal.\n   * @return {string} A string representation of the key and value.\n   */\n  toString() {\n    const result='{name: \"'+String(this.name)+'\", value: '+\n          (typeof this.value === 'string' ?\n          '\"'+this.value+'\"' : this.value.valueOf()) +'}';\n    return result;\n  }\n}\n\n/** See the corresponding UtilBasicFunction method. */\nfunction getNames(object) {\n  const result = [];\n  for (let name in object) {\n    result.push(String(name));\n  }\n  return result;\n}\n\n/** See the corresponding UtilBasicFunction method. */\nfunction getItems(object) {\n  const result = [];\n  for (let name in object) {\n    const value = object[name];\n    result.push(new ObjItem(name, value));\n  }\n  return result;\n}\n\n/** See the corresponding UtilBasicFunction method. */\nfunction getValues(object) {\n  const result = [];\n  getItems(object).forEach((item) => {\n    result.push(item.value);\n  });\n  return result;\n}\n\n/** See the corresponding UtilBasicFunction method. */\nfunction getOwnNames(object) {\n  const result = [];\n  let descriptors = {}\n  try {\n    descriptors = Object.getOwnPropertyDescriptors(object);\n  }\n  catch (exc) {\n    console.error('Error: Unsupported Object.getOwnPropertyDescriptors()');\n    console.error('  error message=\"'+exc.toString()+'\"');\n    console.error('Error description:\\n'+describeError(exc));\n    throw exc;\n  }\n  for (let name in descriptors) {\n    const descriptor = descriptors[name];\n    if (descriptor.enumerable) {\n      result.push(name);\n    }\n  }\n  return result;\n}\n\n/** See the corresponding UtilBasicFunction method. */\nfunction getOwnItems(object) {\n  const result = [];\n  let descriptors = {}\n  try {\n    descriptors = Object.getOwnPropertyDescriptors(object);\n  }\n  catch (exc) {\n    console.error('Error: Unsupported Object.getOwnPropertyDescriptors()');\n    console.error('  error message=\"'+exc.toString()+'\"');\n    console.error('Error description:\\n'+describeError(exc));\n    throw exc;\n  }\n  for (let name in descriptors) {\n    const descriptor = descriptors[name];\n    if (descriptor.enumerable) {\n      result.push(new ObjItem(name, descriptor.value));\n    }\n  }\n  return result;\n}\n\n/** See the corresponding UtilBasicFunction method. */\nfunction _getOwnValues(object) {\n  const result = [];\n  getOwnItems(object).forEach((item) => {\n    result.push(item.value);\n  });\n  return result;\n}\n\n/** See the corresponding UtilBasicFunction method. */\nfunction setUnion(iterable1, iterable2) {\n  const result = new Set(iterable1);\n  iterable2.forEach((item) => {\n    result.add(item);\n  });\n  return result;\n}\n\n/** See the corresponding UtilBasicFunction method. */\nfunction setIntersection(iterable1, iterable2) {\n  const base = new Set(iterable2);\n  const result = new Set();\n  iterable1.forEach((item) => {\n    if (base.has(item)) {\n      result.add(item);\n    }\n  });\n  return result;\n}\n\n/** See the corresponding UtilBasicFunction method. */\nfunction setDifference(iterable1, iterable2) {\n  const result = new Set(iterable1);\n  iterable2.forEach((item) => {\n    result.delete(item);\n  });\n  return result;\n}\n\n\n",
    "static": true,
    "longname": "/home/circ/devel/rcv/meeks-prf-js-github/src/util_basic.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 371,
    "kind": "class",
    "name": "UtilBasicFunctions",
    "memberof": "src/util_basic.js",
    "static": true,
    "longname": "src/util_basic.js~UtilBasicFunctions",
    "access": "public",
    "export": true,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": "{UtilBasicFunctions}",
    "description": "A convenience class for exporting a collection of functions\n as static functions of the class.\n\n This class is intended to be used for its static functions and is\n not expected to be instantiated.0",
    "lineNumber": 16,
    "interface": false
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "describeError",
    "memberof": "src/util_basic.js~UtilBasicFunctions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~UtilBasicFunctions.describeError",
    "access": "public",
    "description": "Create a multi-line description of an error and its traceback.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "a caught exception."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "a multi-line string showing message and traceback\n  of err."
    }
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "indentMessage",
    "memberof": "src/util_basic.js~UtilBasicFunctions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~UtilBasicFunctions.indentMessage",
    "access": "public",
    "description": "Indent a possibly multi-line text string.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "the message string to indent."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "indentBy",
        "description": "the number of spaces to indent each\n  line of the message."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "a string with the indentations added to each line."
    }
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "toArrayOfStrings",
    "memberof": "src/util_basic.js~UtilBasicFunctions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~UtilBasicFunctions.toArrayOfStrings",
    "access": "public",
    "description": "Create an array of strings from a string or an array of strings.\n\nIf value is a string, it is split by its first character,\nand the resulting parts populate the array.\n\nIf the value is the empty string, an empty array is returned.\n\nIf value is a string of length 1, an array containing a single\nempty string is returned.\n\nIf value is an array of strings,\n(either typeof 'string' or instanceof String),\na copy of that array is returned,\nwith any Strings converted to items of typeof 'string'.",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "A string that will be converted to an\narray of strings, or an array that will be verified as only\ncontaining strings."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "An array of strings."
    },
    "throws": [
      {
        "types": [
          "UtilValueError"
        ],
        "description": "If value is not a string and is not an\narray of strings."
      }
    ]
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "getClassNameOf",
    "memberof": "src/util_basic.js~UtilBasicFunctions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~UtilBasicFunctions.getClassNameOf",
    "access": "public",
    "description": "Get the class name of an instance object, if it is available.\n\nLook for the name property of the prototype's constructor.",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "instance",
        "description": "A value;"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The found name or the empty string."
    }
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "getKeys",
    "memberof": "src/util_basic.js~UtilBasicFunctions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~UtilBasicFunctions.getKeys",
    "access": "public",
    "description": "Get an array of an object's enumerable property keys.\n\nAccomplish this with a traditional for in loop.\nThis can retrieve keys that are only in the prototype chain,\nand can reflect gaps in an array's indexing.",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "The object for which keys are retrieved."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array<string>"
      ],
      "spread": false,
      "description": "An array of found keys."
    }
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "getSortedKeys",
    "memberof": "src/util_basic.js~UtilBasicFunctions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~UtilBasicFunctions.getSortedKeys",
    "access": "public",
    "description": "Get a sorted array of an object's enumerable property keys.\n\nUse 'getKeys()' to retrieve the keys.\n\nFor sorting, key strings that correspond to a decimal integer value\nare converted to numbers and sorted in numeric order before any\nstring keys.  The numbers are converted back to strings before\nreturning the sorted array.",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "The object for which keys are retrieved."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<string>"
      ],
      "spread": false,
      "description": "A sorted array of found keys."
    }
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "getNames",
    "memberof": "src/util_basic.js~UtilBasicFunctions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~UtilBasicFunctions.getNames",
    "access": "public",
    "description": "Get an array of names / keys of enumerable properties for an\nobject.\n\nThe names are retrieved using a for-in loop.",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "The object for which names are retrieved."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "An array with the found property names / keys."
    }
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "getItems",
    "memberof": "src/util_basic.js~UtilBasicFunctions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~UtilBasicFunctions.getItems",
    "access": "public",
    "description": "Get an array of names and values for an object's enumerable\nproperties.\n\nEach entry in the array is an `ObjItem` instance.\n\nThe names and values are retrieved with a for-in loop.",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "The object for which names and values are\n  retrieved."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "An array with the found property data."
    }
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "getValues",
    "memberof": "src/util_basic.js~UtilBasicFunctions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~UtilBasicFunctions.getValues",
    "access": "public",
    "description": "Get an array of values for an object's enumerable properties.\n\nThe values are retrieved with a for-in loop.",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "The object for which values are retrieved."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "An array with the found property values."
    }
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "getOwnNames",
    "memberof": "src/util_basic.js~UtilBasicFunctions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~UtilBasicFunctions.getOwnNames",
    "access": "public",
    "description": "Get an array of names / keys of own properties for an object.\n\nThe names are retrieved using `Object.getOwnPropertyDescriptors()`.",
    "lineNumber": 155,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "The object for which names are retrieved."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "An array with the found property names / keys."
    },
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "An error if Object.getOwnPropertyDescriptors() is not\n  supported."
      }
    ]
  },
  {
    "__docId__": 382,
    "kind": "method",
    "name": "getOwnItems",
    "memberof": "src/util_basic.js~UtilBasicFunctions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~UtilBasicFunctions.getOwnItems",
    "access": "public",
    "description": "Get an array of names and values of own properties for an object.\n\nThe data is retrieved using `Object.getOwnPropertyDescriptors()`.",
    "lineNumber": 169,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "The object for which data are retrieved."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "An array with the found names and values.\n  Each array entry is an instance of `ObjItem`."
    },
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "An error if Object.getOwnPropertyDescriptors() is not\n  supported."
      }
    ]
  },
  {
    "__docId__": 383,
    "kind": "method",
    "name": "getOwnValues",
    "memberof": "src/util_basic.js~UtilBasicFunctions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~UtilBasicFunctions.getOwnValues",
    "access": "public",
    "description": "Get an array of values of own properties for an object.\n\nThe values are retrieved using `Object.getOwnPropertyDescriptors()`.",
    "lineNumber": 183,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "The object for which values are retrieved."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "An array with the found values.\n  Each array entry is an instance of `ObjItem`."
    },
    "throws": [
      {
        "types": [
          "*"
        ],
        "description": "An error if Object.getOwnPropertyDescriptors() is not\n  supported."
      }
    ]
  },
  {
    "__docId__": 384,
    "kind": "method",
    "name": "show",
    "memberof": "src/util_basic.js~UtilBasicFunctions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~UtilBasicFunctions.show",
    "access": "public",
    "description": "Create a string representation of a Javascript value.\n\nThe value can be a primitive or an object.\nSupport for data objects, arrays, and sets is provided.\n\nCurrently there is no use of the `options` and `showClasses`\nparameters.",
    "lineNumber": 203,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "A value to be converted to a string."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "A data object with options for\n  converting to and formatting of the string."
      },
      {
        "nullable": null,
        "types": [
          "array<ShowClass>"
        ],
        "spread": false,
        "optional": false,
        "name": "showClasses",
        "description": "Per class customizations\n  for how the value should be converted and how the string\n  should be formatted."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A string representing the value."
    }
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "setUnion",
    "memberof": "src/util_basic.js~UtilBasicFunctions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~UtilBasicFunctions.setUnion",
    "access": "public",
    "description": "Produce the set union of two iterables.",
    "lineNumber": 218,
    "params": [
      {
        "nullable": null,
        "types": [
          "iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "iterable1",
        "description": "An iterable object such as an array,\n  set, or other object."
      },
      {
        "nullable": null,
        "types": [
          "iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "iterable2",
        "description": "An iterable object such as an array,\n  set, or other object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Set"
      ],
      "spread": false,
      "description": "A set with the union of the iterated values.\nFor object arguments, the set contains their keys."
    }
  },
  {
    "__docId__": 386,
    "kind": "method",
    "name": "setIntersection",
    "memberof": "src/util_basic.js~UtilBasicFunctions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~UtilBasicFunctions.setIntersection",
    "access": "public",
    "description": "Produce the set intersection of two iterables.",
    "lineNumber": 232,
    "params": [
      {
        "nullable": null,
        "types": [
          "iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "iterable1",
        "description": "An iterable object such as an array,\n  set, or other object."
      },
      {
        "nullable": null,
        "types": [
          "iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "iterable2",
        "description": "An iterable object such as an array,\n  set, or other object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Set"
      ],
      "spread": false,
      "description": "A set with the intersection of the iterated values.\nFor object arguments, the set contains their keys."
    }
  },
  {
    "__docId__": 387,
    "kind": "method",
    "name": "setDifference",
    "memberof": "src/util_basic.js~UtilBasicFunctions",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~UtilBasicFunctions.setDifference",
    "access": "public",
    "description": "Produce the set difference of two iterables.",
    "lineNumber": 247,
    "params": [
      {
        "nullable": null,
        "types": [
          "iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "iterable1",
        "description": "An iterable object such as an array,\n  set, or other object."
      },
      {
        "nullable": null,
        "types": [
          "iterable"
        ],
        "spread": false,
        "optional": false,
        "name": "iterable2",
        "description": "An iterable object such as an array,\n  set, or other object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Set"
      ],
      "spread": false,
      "description": "A set with difference of the iterated values,\n  all of the items in iterable1 that are not in iterable2.\nFor object arguments, the set contains their keys."
    }
  },
  {
    "__docId__": 388,
    "kind": "variable",
    "name": "UBF",
    "memberof": "src/util_basic.js",
    "static": true,
    "longname": "src/util_basic.js~UBF",
    "access": "public",
    "export": true,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": "{UBF}",
    "description": "An alias for the `UtilBasicFunctions` class,\nwhich provides various functions as static class\nfunctions for general use.",
    "lineNumber": 256,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 389,
    "kind": "class",
    "name": "UtilBaseError",
    "memberof": "src/util_basic.js",
    "static": true,
    "longname": "src/util_basic.js~UtilBaseError",
    "access": "public",
    "export": true,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": "{UtilBaseError}",
    "description": "A base class for thrown errors.",
    "lineNumber": 261,
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "__docId__": 390,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/util_basic.js~UtilBaseError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util_basic.js~UtilBaseError#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 269,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'ERROR'",
        "defaultRaw": "'ERROR'",
        "name": "message",
        "description": "text describing the error."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "otherValues",
        "description": "an array of values,\n  each value is typically a two-element array as [description, value].\n  Other kinds of values are possible, however."
      },
      {
        "nullable": null,
        "types": [
          "Error",
          "null"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "priorError",
        "description": "an error of some type that was the\n  cause for this error being formed."
      }
    ]
  },
  {
    "__docId__": 391,
    "kind": "member",
    "name": "message",
    "memberof": "src/util_basic.js~UtilBaseError",
    "static": false,
    "longname": "src/util_basic.js~UtilBaseError#message",
    "access": "public",
    "description": "The message for this error.",
    "lineNumber": 273,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 392,
    "kind": "member",
    "name": "otherValues",
    "memberof": "src/util_basic.js~UtilBaseError",
    "static": false,
    "longname": "src/util_basic.js~UtilBaseError#otherValues",
    "access": "public",
    "description": "Other values associated with this error and which document additional\n   context surrounding the error.",
    "lineNumber": 277,
    "type": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 393,
    "kind": "member",
    "name": "priorError",
    "memberof": "src/util_basic.js~UtilBaseError",
    "static": false,
    "longname": "src/util_basic.js~UtilBaseError#priorError",
    "access": "public",
    "description": "The prior error that was a direct cause for this error.",
    "lineNumber": 280,
    "type": {
      "nullable": null,
      "types": [
        "Error",
        "null"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 394,
    "kind": "member",
    "name": "priorErrorDescription",
    "memberof": "src/util_basic.js~UtilBaseError",
    "static": false,
    "longname": "src/util_basic.js~UtilBaseError#priorErrorDescription",
    "access": "public",
    "description": "A fuller description of the prior error, created using describeError().\n@type(string)",
    "lineNumber": 283,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 396,
    "kind": "member",
    "name": "name",
    "memberof": "src/util_basic.js~UtilBaseError",
    "static": false,
    "longname": "src/util_basic.js~UtilBaseError#name",
    "access": "public",
    "description": "The name of the class of this error.\n@type{string}",
    "lineNumber": 290,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "_showPriorError",
    "memberof": "src/util_basic.js~UtilBaseError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util_basic.js~UtilBaseError#_showPriorError",
    "access": "private",
    "description": null,
    "lineNumber": 293,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 398,
    "kind": "method",
    "name": "toString",
    "memberof": "src/util_basic.js~UtilBaseError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util_basic.js~UtilBaseError#toString",
    "access": "public",
    "description": "Convert to a string",
    "lineNumber": 301,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "a string representing the error's message,\n  its otherValues, and its priorError, if any."
    },
    "params": []
  },
  {
    "__docId__": 399,
    "kind": "method",
    "name": "_otherValuesAsStr",
    "memberof": "src/util_basic.js~UtilBaseError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util_basic.js~UtilBaseError#_otherValuesAsStr",
    "access": "private",
    "description": null,
    "lineNumber": 314,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "otherValues",
        "types": [
          "*"
        ]
      },
      {
        "name": "indentBy",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 2,
        "defaultValue": "2"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 400,
    "kind": "function",
    "name": "truncateString",
    "memberof": "src/util_basic.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~truncateString",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": null,
    "description": "This function is used by UtilBaseError to limit how long\na displayed value can be from otherValues.",
    "lineNumber": 344,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "limit",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 40,
        "defaultValue": "40"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 401,
    "kind": "class",
    "name": "UtilValueError",
    "memberof": "src/util_basic.js",
    "static": true,
    "longname": "src/util_basic.js~UtilValueError",
    "access": "public",
    "export": true,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": "{UtilValueError}",
    "description": "An error class for invalid data values and types.",
    "lineNumber": 365,
    "interface": false,
    "extends": [
      "UtilBaseError"
    ]
  },
  {
    "__docId__": 402,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/util_basic.js~UtilValueError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util_basic.js~UtilValueError#constructor",
    "access": "public",
    "description": "The calling convention is the same as for UtilBaseError.",
    "lineNumber": 367
  },
  {
    "__docId__": 403,
    "kind": "function",
    "name": "describeError",
    "memberof": "src/util_basic.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~describeError",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": null,
    "description": "See the corresponding UtilBasicFunction method.",
    "lineNumber": 373,
    "params": [
      {
        "name": "err",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 404,
    "kind": "function",
    "name": "indentMessage",
    "memberof": "src/util_basic.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~indentMessage",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": null,
    "description": "See the corresponding UtilBasicFunction method.",
    "lineNumber": 394,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      },
      {
        "name": "indentBy",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 2,
        "defaultValue": "2"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 405,
    "kind": "function",
    "name": "toArrayOfStrings",
    "memberof": "src/util_basic.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~toArrayOfStrings",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": null,
    "description": "See the corresponding UtilBasicFunction method.",
    "lineNumber": 410,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 406,
    "kind": "function",
    "name": "getClassNameOf",
    "memberof": "src/util_basic.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~getClassNameOf",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": null,
    "description": "See the corresponding UtilBasicFunction method.",
    "lineNumber": 443,
    "params": [
      {
        "name": "instance",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 407,
    "kind": "function",
    "name": "getKeys",
    "memberof": "src/util_basic.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~getKeys",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": null,
    "description": "See the corresponding UtilBasicFunction method.",
    "lineNumber": 459,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 408,
    "kind": "function",
    "name": "getSortedKeys",
    "memberof": "src/util_basic.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~getSortedKeys",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": null,
    "description": "See the corresponding UtilBasicFunction method.",
    "lineNumber": 470,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 409,
    "kind": "class",
    "name": "ShowClass",
    "memberof": "src/util_basic.js",
    "static": true,
    "longname": "src/util_basic.js~ShowClass",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": null,
    "description": "A helper class for the `Show` class that will be used to provide\ncustom formatting and parsing for a particular class.\n\nThis is not yet actively used.",
    "lineNumber": 520,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 410,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/util_basic.js~ShowClass",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util_basic.js~ShowClass#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 521,
    "undocument": true
  },
  {
    "__docId__": 411,
    "kind": "member",
    "name": "classType",
    "memberof": "src/util_basic.js~ShowClass",
    "static": false,
    "longname": "src/util_basic.js~ShowClass#classType",
    "access": "public",
    "description": null,
    "lineNumber": 522,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 412,
    "kind": "member",
    "name": "showFunction",
    "memberof": "src/util_basic.js~ShowClass",
    "static": false,
    "longname": "src/util_basic.js~ShowClass#showFunction",
    "access": "public",
    "description": null,
    "lineNumber": 523,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 413,
    "kind": "member",
    "name": "options",
    "memberof": "src/util_basic.js~ShowClass",
    "static": false,
    "longname": "src/util_basic.js~ShowClass#options",
    "access": "public",
    "description": null,
    "lineNumber": 524,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 414,
    "kind": "class",
    "name": "_ShowParts",
    "memberof": "src/util_basic.js",
    "static": true,
    "longname": "src/util_basic.js~_ShowParts",
    "access": "private",
    "export": false,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": null,
    "description": "A helper class for the `Show` class that is used to internally\nrepresent intermediate results.\n\nThis is not expected to be used as part of the public interface.",
    "lineNumber": 534,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 415,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/util_basic.js~_ShowParts",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util_basic.js~_ShowParts#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 535,
    "undocument": true
  },
  {
    "__docId__": 416,
    "kind": "member",
    "name": "content",
    "memberof": "src/util_basic.js~_ShowParts",
    "static": false,
    "longname": "src/util_basic.js~_ShowParts#content",
    "access": "public",
    "description": null,
    "lineNumber": 536,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 417,
    "kind": "member",
    "name": "name",
    "memberof": "src/util_basic.js~_ShowParts",
    "static": false,
    "longname": "src/util_basic.js~_ShowParts#name",
    "access": "public",
    "description": null,
    "lineNumber": 537,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 418,
    "kind": "member",
    "name": "head",
    "memberof": "src/util_basic.js~_ShowParts",
    "static": false,
    "longname": "src/util_basic.js~_ShowParts#head",
    "access": "public",
    "description": null,
    "lineNumber": 538,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 419,
    "kind": "member",
    "name": "tail",
    "memberof": "src/util_basic.js~_ShowParts",
    "static": false,
    "longname": "src/util_basic.js~_ShowParts#tail",
    "access": "public",
    "description": null,
    "lineNumber": 539,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 420,
    "kind": "member",
    "name": "separator",
    "memberof": "src/util_basic.js~_ShowParts",
    "static": false,
    "longname": "src/util_basic.js~_ShowParts#separator",
    "access": "public",
    "description": null,
    "lineNumber": 540,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "get",
    "name": "length",
    "memberof": "src/util_basic.js~_ShowParts",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util_basic.js~_ShowParts#length",
    "access": "public",
    "description": null,
    "lineNumber": 547,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "push",
    "memberof": "src/util_basic.js~_ShowParts",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util_basic.js~_ShowParts#push",
    "access": "public",
    "description": null,
    "lineNumber": 562,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 425,
    "kind": "method",
    "name": "compose",
    "memberof": "src/util_basic.js~_ShowParts",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util_basic.js~_ShowParts#compose",
    "access": "public",
    "description": null,
    "lineNumber": 571,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 426,
    "kind": "class",
    "name": "Show",
    "memberof": "src/util_basic.js",
    "static": true,
    "longname": "src/util_basic.js~Show",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": null,
    "description": "A class for creating string representations of primitive values\nand objects, using an extensible mechanism for custom handling\nof various types of objects.\n\nCurrent support handles all standard primitive types except for\nSymbols, for Arrays and Sets, and for other objects generally.",
    "lineNumber": 595,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 427,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/util_basic.js~Show",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util_basic.js~Show#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 596,
    "undocument": true
  },
  {
    "__docId__": 428,
    "kind": "member",
    "name": "options",
    "memberof": "src/util_basic.js~Show",
    "static": false,
    "longname": "src/util_basic.js~Show#options",
    "access": "public",
    "description": null,
    "lineNumber": 597,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 429,
    "kind": "member",
    "name": "showClasses",
    "memberof": "src/util_basic.js~Show",
    "static": false,
    "longname": "src/util_basic.js~Show#showClasses",
    "access": "public",
    "description": null,
    "lineNumber": 598,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "show",
    "memberof": "src/util_basic.js~Show",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util_basic.js~Show#show",
    "access": "public",
    "description": null,
    "lineNumber": 600,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "showClasses",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "_compose",
    "memberof": "src/util_basic.js~Show",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util_basic.js~Show#_compose",
    "access": "private",
    "description": null,
    "lineNumber": 607,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "showClasses",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 432,
    "kind": "method",
    "name": "_formatParts",
    "memberof": "src/util_basic.js~Show",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util_basic.js~Show#_formatParts",
    "access": "private",
    "description": null,
    "lineNumber": 614,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "parts",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "showClasses",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 433,
    "kind": "method",
    "name": "_decompose",
    "memberof": "src/util_basic.js~Show",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util_basic.js~Show#_decompose",
    "access": "private",
    "description": null,
    "lineNumber": 618,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      },
      {
        "name": "showClasses",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 434,
    "kind": "variable",
    "name": "_show",
    "memberof": "src/util_basic.js",
    "static": true,
    "longname": "src/util_basic.js~_show",
    "access": "private",
    "export": false,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": null,
    "description": "An instance of the `Show` class which has its `show()` method\nexposed as a static method of the `UtilBasicFunctions` class.",
    "lineNumber": 691,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 435,
    "kind": "class",
    "name": "ObjItem",
    "memberof": "src/util_basic.js",
    "static": true,
    "longname": "src/util_basic.js~ObjItem",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": null,
    "description": "A class representing the name and value of an object property.",
    "lineNumber": 696,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 436,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/util_basic.js~ObjItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util_basic.js~ObjItem#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 701,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "symbol"
        ],
        "spread": false,
        "optional": false,
        "name": "The",
        "description": "name / key of the property."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "The",
        "description": "value of the property."
      }
    ]
  },
  {
    "__docId__": 437,
    "kind": "member",
    "name": "name",
    "memberof": "src/util_basic.js~ObjItem",
    "static": false,
    "longname": "src/util_basic.js~ObjItem#name",
    "access": "public",
    "description": "The name of the property, either a string or a symbol.",
    "lineNumber": 704,
    "type": {
      "nullable": null,
      "types": [
        "string",
        "symbol"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 438,
    "kind": "member",
    "name": "value",
    "memberof": "src/util_basic.js~ObjItem",
    "static": false,
    "longname": "src/util_basic.js~ObjItem#value",
    "access": "public",
    "description": "The value of the property.",
    "lineNumber": 707,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 439,
    "kind": "method",
    "name": "toString",
    "memberof": "src/util_basic.js~ObjItem",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/util_basic.js~ObjItem#toString",
    "access": "public",
    "description": "Produce a string representation of the name and value,\nmimicking the format of an object literal.",
    "lineNumber": 715,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A string representation of the key and value."
    },
    "params": []
  },
  {
    "__docId__": 440,
    "kind": "function",
    "name": "getNames",
    "memberof": "src/util_basic.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~getNames",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": null,
    "description": "See the corresponding UtilBasicFunction method.",
    "lineNumber": 724,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 441,
    "kind": "function",
    "name": "getItems",
    "memberof": "src/util_basic.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~getItems",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": null,
    "description": "See the corresponding UtilBasicFunction method.",
    "lineNumber": 733,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 442,
    "kind": "function",
    "name": "getValues",
    "memberof": "src/util_basic.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~getValues",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": null,
    "description": "See the corresponding UtilBasicFunction method.",
    "lineNumber": 743,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 443,
    "kind": "function",
    "name": "getOwnNames",
    "memberof": "src/util_basic.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~getOwnNames",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": null,
    "description": "See the corresponding UtilBasicFunction method.",
    "lineNumber": 752,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 444,
    "kind": "function",
    "name": "getOwnItems",
    "memberof": "src/util_basic.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~getOwnItems",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": null,
    "description": "See the corresponding UtilBasicFunction method.",
    "lineNumber": 774,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 445,
    "kind": "function",
    "name": "_getOwnValues",
    "memberof": "src/util_basic.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~_getOwnValues",
    "access": "private",
    "export": false,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": null,
    "description": "See the corresponding UtilBasicFunction method.",
    "lineNumber": 796,
    "ignore": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 446,
    "kind": "function",
    "name": "setUnion",
    "memberof": "src/util_basic.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~setUnion",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": null,
    "description": "See the corresponding UtilBasicFunction method.",
    "lineNumber": 805,
    "params": [
      {
        "name": "iterable1",
        "types": [
          "*"
        ]
      },
      {
        "name": "iterable2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 447,
    "kind": "function",
    "name": "setIntersection",
    "memberof": "src/util_basic.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~setIntersection",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": null,
    "description": "See the corresponding UtilBasicFunction method.",
    "lineNumber": 814,
    "params": [
      {
        "name": "iterable1",
        "types": [
          "*"
        ]
      },
      {
        "name": "iterable2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 448,
    "kind": "function",
    "name": "setDifference",
    "memberof": "src/util_basic.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util_basic.js~setDifference",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/util_basic.js",
    "importStyle": null,
    "description": "See the corresponding UtilBasicFunction method.",
    "lineNumber": 826,
    "params": [
      {
        "name": "iterable1",
        "types": [
          "*"
        ]
      },
      {
        "name": "iterable2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 449,
    "kind": "file",
    "name": "src/validate.js",
    "content": "/**\n * @copyright 2016-2019 David Cary;\n * @license Apache-2.0\n *\n * @module Validate\n */\n\nimport K from './constants.js';\nimport {MeekValueError} from './errors.js';\nimport {UBF, UtilValueError} from './util_basic.js';\nimport {Ballot} from './ballot.js';\n\n/**\n * A collection of validation and reformatting methods for Meek data.\n *\n * See the description of parameters for the Tabulation() constructor\n * for details about the requirements for those values, which are enforced\n * here.\n */\nexport class Validator  {\n\n  /**\n   * A test for being a safe integer, which accepts number values\n   * @param {*} value - A value to be tested whether it is a safe integer.\n   * @returns {boolean} The indication of whether the tested value is a safe\n   * integer.\n   */\n  static isSafeInteger(value) {\n    if (typeof value == 'number' && Number.isInteger(value)) {\n      if (Math.trunc(value) === value) {\n        const maxSafeInteger = K.Decimal.MAX_SAFE_VALUE;\n        if (value >= -maxSafeInteger && value <= maxSafeInteger) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Create an array of strings from a string or an array of strings.\n   *\n   * If value is a string, it is split by its first character,\n   * and the resulting parts populate the array.\n   *\n   * If value is an array of strings,\n   * (either typeof 'string' or instanceof String),\n   * a copy of that array is returned,\n   * with any Strings converted to items of typeof 'string'.\n   *\n   * This function is a wrapper function for\n   * `UtilBasicFunctions.toArrayOFStrings()`, and ensures that any\n   * validation error that is thrown is of type MeekValueError.\n   *\n   * @param {string|array} value - A string that will be converted to an array\n   * of strings, or an array that will be verified as only containing strings\n   * and then duplicated.\n   *\n   * @return {array} An array of strings.\n   *\n   * @throws {MeekValueError} If value is not a string and is not an array of\n   * strings.\n   */\n  static toArrayOfStrings(value) {\n    let result = '';\n    try {\n      result = UBF.toArrayOfStrings(value);\n    } catch (exc) {\n      if (exc instanceof UtilValueError) {\n        const newErr = new MeekValueError(exc.message, exc.otherValues);\n        throw newErr;\n      }\n      throw exc;\n    }\n    return result;\n  }\n\n\n  /**\n   * Validate a number of seats to fill.\n   * @param {number} nbrSeatsToFill - The number to validate.\n   * @return {number} nbrSeatsToFill if it was valid.\n   * @throw {MeekValueError} If nbrSeatsToFill was not valid.\n   */\n  nbrSeatsToFill(nbrSeatsToFill) {\n    if (!Validator.isSafeInteger(nbrSeatsToFill)) {\n      throw new MeekValueError('nbrSeatsToFill is not a safe integer:', [\n            ['typeof nbrSeatsToFill', typeof nbrSeatsToFill],\n            ['nbrSeatsToFill is a Number?', nbrSeatsToFill instanceof Number],\n            ['nbrSeatsToFill', nbrSeatsToFill]\n      ]);\n    }\n    nbrSeatsToFill = Number(nbrSeatsToFill);\n    if (nbrSeatsToFill <= 0) {\n      throw new MeekValueError('nbrSeatsToFill is less than 1:', [\n            ['nbrSeatsToFill', nbrSeatsToFill],\n      ]);\n    }\n    return nbrSeatsToFill;\n  }\n\n  /** Validate a list of candidate identifiers.\n   * @param {string|array<string>} candidates - A proposed value.\n   * @return {array<string>} candidates if it was valid.\n   * @throw {MeekValueError} If candidates was not valid.\n   */\n  candidates(candidates) {\n    try {\n      candidates = Validator.toArrayOfStrings(candidates);\n    }\n    catch (exc) {\n      throw new MeekValueError('Invalid candidates type:', [], exc);\n    }\n    const candidateIndexes = {};\n    candidates.forEach((candId, ix) => {\n      if (!candId.length ||  K.RANKING_CODES_NOT_A_CANDIDATE.has(candId) ||\n            candId[0] === ':') {\n        throw new MeekValueError(\n              'Invalid candidate ID in list of candidates:', [\n              ['candidate id', candId],\n              ['list position', ix + 1],\n        ]);\n      }\n      if (typeof candidateIndexes[candId] == 'number') {\n        throw new MeekValueError(\n              'Duplicate candidate ID in list of candidates:', [\n              ['candidate id', candId],\n              ['first list position', candidateIndexes[candId]],\n              ['next list position', ix + 1],\n        ]);\n      }\n      candidateIndexes[candId] = ix + 1;\n    });\n    return candidates;\n  }\n\n  /**\n   * Validate a tieBreaker list of candidate identifiers.\n   * @param {string|array<string>} tieBreaker - A proposed value.\n   * @param {array<string>} candidates - A validated array of ranking codes.\n   * @return {object} tieBreaker as an object keyed by candidate IDs\n   *   and values equal to ordering indexes.\n   * @throw {MeekValueError} If tieBreaker was not valid.\n   */\n  tieBreaker(tieBreaker, candidates) {\n    try {\n      tieBreaker = Validator.toArrayOfStrings(tieBreaker);\n    }\n    catch (exc) {\n      throw new MeekValueError('Invalid tieBreaker type:', [], exc);\n    }\n    tieBreaker.forEach((candId, ix) => {\n      if (candidates.indexOf(candId) === -1) {\n        throw new MeekValueError('Invalid candidate ID in tieBreaker:', [\n              ['candidate candId', candId],\n              ['tieBreaker list position', ix + 1],\n        ]);\n      }\n    });\n    const result = {};\n    const tieBreakerSet = new Set();\n    tieBreaker.forEach((candId, ix) => {\n      if (typeof result[candId] == 'number') {\n        throw new MeekValueError(\n              'Duplicate candidate ID in tieBreaker:', [\n              ['candidate id', candId],\n              ['first list position', result[candId] + 1],\n              ['next list position', ix + 1],\n        ]);\n      }\n      result[candId] = ix;\n      tieBreakerSet.add(candId);\n    });\n    return result;\n  }\n\n  /**\n   * Validate an array of ballots.\n   * @param {array<string|array>} ballots - A proposed value.\n   * @param {array<string>} candidates - A validated array of ranking codes.\n   * @param {number|null} maxRankingLevels - A validated value.\n   * @param {Progress} progress - To report progress via callback.\n   * @return {array<Ballot>} An array of Ballot objects.\n   * @throw {MeekValueError} If ballots was not valid.\n   */\n  ballots(ballots, candidates, maxRankingLevels, progress) {\n    const result = [];\n    if (!Array.isArray(ballots)) {\n      throw new MeekValueError('ballots is not an array:', [\n            ['typeof ballots', typeof ballots],\n            ['ballots', ballots],\n      ]);\n    }\n    let absoluteTotalNbrBallots = 0;\n    ballots.forEach((ballot, ix) => {\n      let multiple = 1;\n      let rankings = [];\n      if (typeof ballot == 'string') {\n        rankings = ballot;\n      } else if (Array.isArray(ballot) &&\n            (ballot.length == 0 || typeof ballot[0] == 'string')) {\n        rankings = ballot;\n      } else {\n        if (!Array.isArray(ballot)) {\n          throw new MeekValueError('A ballot is not an array nor a string:', [\n                ['typeof ballot', typeof ballot],\n                ['ballot', ballot],\n                ['ballot nbr', ix + 1],\n          ]);\n        }\n        if (ballot.length !== 2) {\n          throw new MeekValueError('A ballot is not a pair of values:', [\n                ['ballot.length', ballot.length],\n                ['ballot', ballot],\n                ['ballot nbr', ix + 1],\n          ]);\n        }\n        multiple = ballot[0];\n        rankings = ballot[1];\n      }\n      if (!Validator.isSafeInteger(multiple)) {\n        throw new MeekValueError('A ballot multiple is not a safe integer:', [\n              ['type(multiple)', typeof multiple],\n              ['multiple', multiple],\n              ['ballot nbr', ix + 1],\n        ]);\n      }\n      multiple = Number(multiple);\n      if (multiple < 1) {\n        throw new MeekValueError('A ballot multiple is zero or less:', [\n              ['multiple', multiple],\n              ['ballot nbr', ix + 1],\n        ]);\n      }\n      try {\n        rankings = Validator.toArrayOfStrings(rankings);\n      }\n      catch (exc) {\n        throw new MeekValueError('Invalid ballot rankings type:', [\n              ['ballot nbr', ix + 1],\n              ], exc);\n      }\n      if (maxRankingLevels !== null &&\n            rankings.length > maxRankingLevels) {\n        throw new MeekValueError('Ballot rankings is too long:', [\n              ['rankings.length', rankings.length],\n              ['maxRankingLevels', maxRankingLevels],\n              ['ballot nbr', ix + 1],\n        ]);\n      }\n      rankings.forEach((rankingCode, rix) => {\n        if (candidates.indexOf(rankingCode) === -1 &&\n              !K.RANKING_CODES_NOT_A_CANDIDATE.has(rankingCode)) {\n          throw new MeekValueError('Invalid ballot ranking code:', [\n                ['ranking code', rankingCode],\n                ['ballot nbr', ix + 1],\n                ['ranking code position', rix + 1],\n          ]);\n        }\n      });\n      const internalBallot = new Ballot(multiple, rankings);\n      absoluteTotalNbrBallots += Math.abs(multiple);\n      result.push(internalBallot);\n      if (progress && (ix + 1) % progress.validationPeriod === 0) {\n        progress.setValidationProgress(ix + 1);\n      }\n    });\n    if (result.length !== ballots.length) {\n      throw new MeekValueError('Ballots contains undefined items:', [\n            ['ballots.length', ballots.length],\n            ['number of validated ballots', result.length],\n      ]);\n    }\n    if (!Validator.isSafeInteger(absoluteTotalNbrBallots)) {\n      throw new MeekValueError('The absolute total number of ballots'+\n            ' is not a safe integer:', [\n            ['typeof total nbr ballots)', typeof absoluteTotalNbrBallots],\n            ['total nbr ballots', absoluteTotalNbrBallots],\n            ['max safe integer', K.Decimal.MAX_SAFE_VALUE],\n      ]);\n    }\n    if (progress) {\n      progress.setValidationProgress(progress.completedLabel);\n    }\n    return result;\n  }\n\n  /**\n   * Validate maxRankingLevels.\n   * @param {number|null} maxRankingLevels - A proposed value.\n   * @return {number|null} A valid maxRankingLevels.\n   * @throw {MeekValueError} If maxRankingLevels was not valid.\n   */\n  maxRankingLevels(maxRankingLevels) {\n    if (maxRankingLevels === null) {\n      return null;\n    }\n    if (!Validator.isSafeInteger(maxRankingLevels)) {\n      throw new MeekValueError('maxRankingLevels is not a safe integer:', [\n            ['typeof maxRankingLevels', typeof maxRankingLevels],\n            ['maxRankingLevels', maxRankingLevels],\n      ]);\n    }\n    maxRankingLevels = Number(maxRankingLevels);\n    if (maxRankingLevels < K.MIN_RANKINGS_SUPPORTED) {\n      throw new MeekValueError('maxRankingLevels is less than ' +\n            K.MIN_RANKINGS_SUPPORTED + ':', [\n            ['maxRankingLevels', maxRankingLevels],\n      ]);\n    }\n    return maxRankingLevels;\n  }\n\n  /**\n   * Validate a list of excluded candidates.\n   * @param {string|array<string>} excluded - A proposed value.\n   * @param {array<string>} candidates - A validated array of candidate IDs.\n   * @return {Set<string>} A set of excluded candidate IDs.\n   * @throw {MeekValueError} If excluded was not valid.\n   */\n  excluded(excluded, candidates) {\n    if (excluded === null) {\n      excluded = [];\n    }\n    try {\n      excluded = Validator.toArrayOfStrings(excluded);\n    }\n    catch (exc) {\n      throw new MeekValueError('Invalid excluded type:', [], exc);\n    }\n    const result = new Set();\n    const candidateIndexes = {};\n    excluded.forEach((candId, ix) => {\n      if (candidates.indexOf(candId) === -1) {\n        throw new MeekValueError('Invalid candidate ID in excluded:', [\n              ['candidate candId', candId],\n              ['excluded list position', ix + 1],\n        ]);\n      }\n      if (result.has(candId)) {\n        throw new MeekValueError(\n              'Candidate ID in excluded is not unique:', [\n                ['candid ID', candId],\n                ['first list position', candidateIndexes[candId] + 1],\n                ['next list position', ix + 1],\n        ]);\n      }\n      result.add(candId);\n      candidateIndexes[candId] = ix;\n    });\n    return result;\n  }\n\n  /**\n   * Validate a list of protected candidates.\n   * @param {string|array<string>} protectedList - A proposed value.\n   * @param {array<string>} candidates - A validated array of candidate IDs.\n   * @param {Set<string>} excluded - A validated set of excluded candidate\n   *   IDs.\n   * @param {number} nbrSeatsToFill - A validated number of seats to fill.\n   * @return {Set<string>} A set of protected candidate IDs.\n   * @throw {MeekValueError} If protectedList was not valid.\n   */\n  protectedCandidates(protectedList, candidates, excluded, nbrSeatsToFill) {\n    if (protectedList === null) {\n      protectedList = [];\n    }\n    try {\n      protectedList = Validator.toArrayOfStrings(protectedList);\n    }\n    catch (exc) {\n      throw new MeekValueError('Invalid protectedList type:', [], exc);\n    }\n    const result = new Set();\n    const candidateIndexes = {};\n    protectedList.forEach((candId, ix) => {\n      if (candidates.indexOf(candId) === -1) {\n        throw new MeekValueError('Invalid protected candidate ID:', [\n              ['candidate ID', candId],\n              ['list position', ix + 1],\n        ]);\n      }\n      if (excluded.has(candId)) {\n        throw new MeekValueError('Candidate ID is protected and excluded:', [\n              ['candidate ID', candId],\n              ['protected list position', ix + 1],\n        ]);\n      }\n      if (result.has(candId)) {\n        throw new MeekValueError(\n              'Protected candidate ID is not unique:', [\n              ['candidate candId', candId],\n              ['first list position', candidateIndexes[candId] + 1],\n              ['next list position', ix + 1],\n        ]);\n      }\n      result.add(candId);\n      candidateIndexes[candId] = ix;\n    });\n    if (result.size > nbrSeatsToFill) {\n      throw new MeekValueError(\n            'More protected candidates than seats to fill:', [\n            ['nbr protected', result.size],\n            ['nbr seats to fill', nbrSeatsToFill],\n      ]);\n    }\n    return result;\n  }\n\n  /**\n   * Validate a plain old data object of tabulation options.\n   * @param {Object} options - A proposed value.\n   * @return {Object} An object with validated tabulation options,\n   *   if options was valid.\n   * @throw {MeekValueError} If options was not valid.\n   */\n  options(options) {\n    const result = {};\n    if (typeof options != 'object') {\n      throw new MeekValueError('Options is not an object:', [\n            ['typeof options', typeof options],\n      ]);\n    }\n    for (let name in options) {\n      // The following if statement can not be true.\n      /*\n      if (typeof name != 'string') {\n        throw new MeekValueError('An option name is not a string:', [\n              ['typeof option name', typeof name],\n              ['option name', name],\n        ]);\n      }\n      */\n      let value = options[name];\n      if (name === K.OPTIONS.alternativeDefeats._value) {\n        if (typeof value == 'string' &&\n              K.OPTIONS.alternativeDefeats._value_set.has(\n              value.toUpperCase())) {\n          value = value.toUpperCase();\n        }\n        else {\n          try {\n            value = Validator.toArrayOfStrings(value);\n          }\n          catch (exc) {\n            throw new MeekValueError(\n                  'Invalid option value type:', [\n                  ['option name', name],\n                  ], exc);\n          }\n          value.forEach((perRoundValue,ix) => {\n            if (!K.OPTIONS.alternativeDefeats._value_set.has(\n                  perRoundValue.toUpperCase())) {\n              throw new MeekValueError('Invalid per-round option value:', [\n                    ['per-round value', perRoundValue],\n                    ['index', ix],\n                    ['for round', ix + 1],\n                    ['option name', name],\n              ]);\n            }\n          });\n          const newValue = [];\n          value.forEach((perRoundValue, ix) => {\n            newValue.push(perRoundValue.toUpperCase());\n          });\n          value = newValue;\n        }\n        result[K.OPTIONS.alternativeDefeats._value] = value;\n      } else if (K.OPTIONS._value_set.has(name)) {\n        const originalValue = value;\n        if (typeof value == 'string') {\n          value = value.toLowerCase();\n        }\n        const key = K.OPTIONS._valueToJsId[name];\n        if (K.OPTIONS[key]._value_set.has(value)) {\n          result[name] = value;\n        } else {\n          throw new MeekValueError('Invalid option value:', [\n                ['typeof value', typeof originalValue],\n                ['value', originalValue],\n                ['option name', name],\n          ]);\n        }\n      } else {\n        throw new MeekValueError('Invalid option name:', [\n              ['typeof name', typeof name],\n              ['name', name],\n        ]);\n      }\n    }\n    return result;\n  }\n}\n\n",
    "static": true,
    "longname": "/home/circ/devel/rcv/meeks-prf-js-github/src/validate.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 450,
    "kind": "class",
    "name": "Validator",
    "memberof": "src/validate.js",
    "static": true,
    "longname": "src/validate.js~Validator",
    "access": "public",
    "export": true,
    "importPath": "meeks-prf-js/src/validate.js",
    "importStyle": "{Validator}",
    "description": "A collection of validation and reformatting methods for Meek data.\n\nSee the description of parameters for the Tabulation() constructor\nfor details about the requirements for those values, which are enforced\nhere.",
    "lineNumber": 20,
    "interface": false
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "isSafeInteger",
    "memberof": "src/validate.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validate.js~Validator.isSafeInteger",
    "access": "public",
    "description": "A test for being a safe integer, which accepts number values",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} The indication of whether the tested value is a safe\ninteger."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "A value to be tested whether it is a safe integer."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "The indication of whether the tested value is a safe\ninteger."
    }
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "toArrayOfStrings",
    "memberof": "src/validate.js~Validator",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/validate.js~Validator.toArrayOfStrings",
    "access": "public",
    "description": "Create an array of strings from a string or an array of strings.\n\nIf value is a string, it is split by its first character,\nand the resulting parts populate the array.\n\nIf value is an array of strings,\n(either typeof 'string' or instanceof String),\na copy of that array is returned,\nwith any Strings converted to items of typeof 'string'.\n\nThis function is a wrapper function for\n`UtilBasicFunctions.toArrayOFStrings()`, and ensures that any\nvalidation error that is thrown is of type MeekValueError.",
    "lineNumber": 64,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "A string that will be converted to an array\nof strings, or an array that will be verified as only containing strings\nand then duplicated."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "An array of strings."
    },
    "throws": [
      {
        "types": [
          "MeekValueError"
        ],
        "description": "If value is not a string and is not an array of\nstrings."
      }
    ]
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "nbrSeatsToFill",
    "memberof": "src/validate.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validate.js~Validator#nbrSeatsToFill",
    "access": "public",
    "description": "Validate a number of seats to fill.",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@throw",
        "tagValue": "{MeekValueError} If nbrSeatsToFill was not valid."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "nbrSeatsToFill",
        "description": "The number to validate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "nbrSeatsToFill if it was valid."
    }
  },
  {
    "__docId__": 454,
    "kind": "method",
    "name": "candidates",
    "memberof": "src/validate.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validate.js~Validator#candidates",
    "access": "public",
    "description": "Validate a list of candidate identifiers.",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@throw",
        "tagValue": "{MeekValueError} If candidates was not valid."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "candidates",
        "description": "A proposed value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array<string>"
      ],
      "spread": false,
      "description": "candidates if it was valid."
    }
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "tieBreaker",
    "memberof": "src/validate.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validate.js~Validator#tieBreaker",
    "access": "public",
    "description": "Validate a tieBreaker list of candidate identifiers.",
    "lineNumber": 145,
    "unknown": [
      {
        "tagName": "@throw",
        "tagValue": "{MeekValueError} If tieBreaker was not valid."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "tieBreaker",
        "description": "A proposed value."
      },
      {
        "nullable": null,
        "types": [
          "array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "candidates",
        "description": "A validated array of ranking codes."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "tieBreaker as an object keyed by candidate IDs\n  and values equal to ordering indexes."
    }
  },
  {
    "__docId__": 456,
    "kind": "method",
    "name": "ballots",
    "memberof": "src/validate.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validate.js~Validator#ballots",
    "access": "public",
    "description": "Validate an array of ballots.",
    "lineNumber": 186,
    "unknown": [
      {
        "tagName": "@throw",
        "tagValue": "{MeekValueError} If ballots was not valid."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "array<string|array>"
        ],
        "spread": false,
        "optional": false,
        "name": "ballots",
        "description": "A proposed value."
      },
      {
        "nullable": null,
        "types": [
          "array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "candidates",
        "description": "A validated array of ranking codes."
      },
      {
        "nullable": null,
        "types": [
          "number",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "maxRankingLevels",
        "description": "A validated value."
      },
      {
        "nullable": null,
        "types": [
          "Progress"
        ],
        "spread": false,
        "optional": false,
        "name": "progress",
        "description": "To report progress via callback."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array<Ballot>"
      ],
      "spread": false,
      "description": "An array of Ballot objects."
    }
  },
  {
    "__docId__": 457,
    "kind": "method",
    "name": "maxRankingLevels",
    "memberof": "src/validate.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validate.js~Validator#maxRankingLevels",
    "access": "public",
    "description": "Validate maxRankingLevels.",
    "lineNumber": 294,
    "unknown": [
      {
        "tagName": "@throw",
        "tagValue": "{MeekValueError} If maxRankingLevels was not valid."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "maxRankingLevels",
        "description": "A proposed value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number",
        "null"
      ],
      "spread": false,
      "description": "A valid maxRankingLevels."
    }
  },
  {
    "__docId__": 458,
    "kind": "method",
    "name": "excluded",
    "memberof": "src/validate.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validate.js~Validator#excluded",
    "access": "public",
    "description": "Validate a list of excluded candidates.",
    "lineNumber": 321,
    "unknown": [
      {
        "tagName": "@throw",
        "tagValue": "{MeekValueError} If excluded was not valid."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "excluded",
        "description": "A proposed value."
      },
      {
        "nullable": null,
        "types": [
          "array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "candidates",
        "description": "A validated array of candidate IDs."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Set<string>"
      ],
      "spread": false,
      "description": "A set of excluded candidate IDs."
    }
  },
  {
    "__docId__": 459,
    "kind": "method",
    "name": "protectedCandidates",
    "memberof": "src/validate.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validate.js~Validator#protectedCandidates",
    "access": "public",
    "description": "Validate a list of protected candidates.",
    "lineNumber": 364,
    "unknown": [
      {
        "tagName": "@throw",
        "tagValue": "{MeekValueError} If protectedList was not valid."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "protectedList",
        "description": "A proposed value."
      },
      {
        "nullable": null,
        "types": [
          "array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "candidates",
        "description": "A validated array of candidate IDs."
      },
      {
        "nullable": null,
        "types": [
          "Set<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "excluded",
        "description": "A validated set of excluded candidate\n  IDs."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "nbrSeatsToFill",
        "description": "A validated number of seats to fill."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Set<string>"
      ],
      "spread": false,
      "description": "A set of protected candidate IDs."
    }
  },
  {
    "__docId__": 460,
    "kind": "method",
    "name": "options",
    "memberof": "src/validate.js~Validator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/validate.js~Validator#options",
    "access": "public",
    "description": "Validate a plain old data object of tabulation options.",
    "lineNumber": 417,
    "unknown": [
      {
        "tagName": "@throw",
        "tagValue": "{MeekValueError} If options was not valid."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "A proposed value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "An object with validated tabulation options,\n  if options was valid."
    }
  },
  {
    "__docId__": 461,
    "kind": "file",
    "name": "src/with_json.js",
    "content": "/**\n * @copyright 2016-2019 David Cary;\n * @license Apache-2.0\n *\n * @module WithJson\n *\n * @summary Tabulate using JSON files as input and output\n */\n\nimport K from \"./constants.js\";\nimport Results from \"./results.js\";\nimport * as Meek from \"./meek.js\";\nimport {MeekValueError, MeekImplementationError, describeError}\n      from \"./errors.js\";\nimport {Status} from './status.js';\nimport {Validator} from './validate.js';\n//import Version from './index.js';\n\nimport * as fs from 'fs';\n//import * as fsp from 'fs/promises';\n\nconst fsp = fs.promises;\nconst D9 = K.Decimal;\n\n\n/** A class with static functions for tabulating with JSON files. */\nclass WithJson {\n\n  /**\n   * Tabulate an Meek contest using JSON files for input and output.\n   *\n   * This facilitates doing file-based tabulations from the command line.\n   *\n   * @param {string|File|null} [inputJson='']\n   *   A string name of a file or an opened file that is read to get a\n   *   JSON specification of the tabulation to be performed.\n   *   If the value is an empty string, standard input is read.\n   *   If the value is null, nothing is read.\n   *\n   *   The JSON specification should be a JSON object with names that\n   *   correspond to the parameters of `Meek.Tabulation()`\n   *   initialization.\n   *\n   *   Additional names may be specified.\n   *   Some that are recognized include:\n   *\n   * - 'description'\n   *\n   *    A description of the contest being tabulated.\n   *\n   * - 'include'\n   *\n   *   An array of additional input JSON file names that are read.\n   *   The name and value pairs in an included file are subject to being\n   *   overridden by subsequent file names in the array of included file\n   *   names and also, ultimately, by contents of the inputJson file.\n   *\n   *   Files can only be included by the inputJSON file.\n   *   Any include value from an included file is ignored.\n   *\n   * @param {string|File|null} [outputJson='']\n   *   A string name of a file or an opened file that is written to with a\n   *   JSON specification of the tabulation results.\n   *   If the value is an empty string, results are written to standard\n   *   output.\n   *   If the value is null, nothing is written.\n   *   The JSON specification of the tabulation result is a JSON object\n   *   with the following names:\n   *\n   * - 'elected'\n   *\n   *     An array of winners, corresponding to the first value returned by\n   *     Meek.Tabulation().tabulate().\n   *\n   * - 'status'\n   *\n   *     An array of status values, each expressed as an array,\n   *     corresponding to the values of the second value returned by\n   *     `Meek.Tabulation().tabulate()`.\n   *     The status values are listed in the following order:  candidate,\n   *     status, nbrRound, votes, keepValue, and destiny.\n   *     The destiny value is omitted if it is 'normal'.\n   *     Votes and keepValues are expressed as JSON numbers.\n   *\n   * - 'tally'\n   *\n   *     An object of tally values, corresponding to the third value\n   *     returned by `Meek.Tabulation().tabulate()`.\n   *\n   * - 'description'\n   *\n   *     A string value of the input 'description' value, if a non-empty\n   *     description value string was provided.\n   *     Otherwise, this name is not included in the JSON output.\n   *\n   * @param {string|File|null} [defaultJson=null]\n   *   A str name of a file or an opened file that is read to provide\n   *   default values for inputJson specification before that file is\n   *   read.\n   *   If the value is an empty string, standard input is read.\n   *   If the value is null, no attempt to read defaults is made.\n   *   If both this value and the inputJson value are empty strings,\n   *   this value is treated as if it were null.\n   *\n   *   The JSON in the file should be a JSON object with any of the same\n   *   names and values that could be used by the inputJSON file.\n   *   The values in this file are overridden by corresponding values\n   *   in the inputJSON file and its include files.\n   *\n   *   The include name is recognized from this file,\n   *   but its value may be overridden by an include value\n   *   specified in the inputJson file.\n   *\n   * @return {array}\n   *\n   * A two-element array consisting of the results object returned by the\n   * `Meek.Tabulation().tabulate()` function,\n   * and a data object with the input values built from inputJson and\n   * defaultJson files and their include files.\n   *\n   * @throws {Error}\n   *\n   * The same as the `Meek.Tabulation().tabulate()` method,\n   * plus other exceptions that might be related to accessing files to\n   * build the tabulation specification or to store its results.\n   *\n   */\n  static async tabulate(inputJson='', outputJson='', defaultJson=null) {\n    const [tabulateArgs, tabulationSpec] = await WithJson.buildTabulateArgs(\n          inputJson, defaultJson);\n    let description = null;\n    if ('description' in tabulationSpec) {\n      description = tabulationSpec.description;\n    }\n    const results = new Meek.Tabulation(...tabulateArgs)\n          .tabulate();\n    const jsonStr = WithJson.resultsToJsonString(\n          results, description);\n    await WithJson.writeFile(outputJson, jsonStr);\n    return [results, tabulationSpec];\n  }\n\n  /**\n   * Convert tabulation results to a JSON string.\n   *\n   * @param {Results} results\n   *   The results returned by the `Meek.Tabulation.tabulate()` function.\n   *\n   * @param {string|null|boolean} description\n   *   A string that is that describes the tabulation.\n   *   This is typically supplied from the tabulation's input\n   *   specification or from the value returned by this module's\n   *   `tabulate()` function.\n   *   Values of null and false may be supplied to indicate the lack\n   *   of a description.\n   *\n   * @return {string}\n   * A JSON string which represents the function arguments.\n   *\n   * @throws {Error}\n   * This can raise various exceptions if the function arguments are not\n   * of the anticipated structure.\n   */\n  static resultsToJsonString(results, description) {\n    let descriptionStr = '';\n    if (description !== null) {\n      descriptionStr = '  \"description\": ' + JSON.stringify(description);\n      descriptionStr += '\\n';\n    }\n\n    const electedStr = results.getElectedAsString(description ? ',' : '') +\n          '\\n';\n    const statusStr = results.getStatusesAsString(',') +\n          '\\n';\n    const tallyStr = results.getTallyAsString(',') + '\\n';\n    const jsonStr = '{\\n' +\n          descriptionStr + electedStr + statusStr + tallyStr + '}\\n'\n    return jsonStr;\n  }\n\n  /**\n   * From JSON files, build tabulation args and specification.\n   *\n   * @param {string|File|null} inputJson\n   * The same as for the inputJson parameter for this module's\n   * `tabulate()` function.\n   *\n   * @param {string|File|null} defaultJson\n   * The same as for the defaultJson parameter for this module's\n   * `tabulate()` function.\n   *\n   * @return {array}\n   * An array with tw values:\n   *\n   * + An array of tabulation args that can be passed to\n   *     `Meek.Tabulation().tabulate()`\n   *\n   * + A data object with the aggregated input for a Meek tabulation.\n   *   Additional keys and values may be ignored or used only for testing.\n   *\n   * @throws {Error}\n   * Various exceptions may be thrown which are related to reading JSON\n   * files.\n   */\n  static async buildTabulateArgs(inputJson, defaultJson) {\n\n    const tabulationSpec = await WithJson.readTabulationSpec(\n          inputJson, defaultJson);\n    let argBallots = tabulationSpec['ballots'];\n    if ('ballotsMore' in tabulationSpec) {\n      argBallots = Array.from(argBallots);\n      argBallots = argBallots.concat(\n            Array.from(tabulationSpec['ballotsMore']));\n    }\n    const tabulateArgs = [\n          tabulationSpec['nbrSeatsToFill'],\n          tabulationSpec['candidates'],\n          argBallots,\n          tabulationSpec['maxRankingLevels'],\n          tabulationSpec['tieBreaker'],\n          tabulationSpec['excluded'],\n          tabulationSpec['protected'],\n          tabulationSpec['options']\n          ];\n    return [tabulateArgs, tabulationSpec];\n  }\n\n  /**\n   * Write text to a file.\n   *\n   * @param {string|File|null} fileName\n   * The name of the file to write to.\n   *\n   * Write to stdout if this is the empty string.\n   *\n   * @param {string} text\n   * The text to be written.\n   *\n   * @throws {Error}\n   * Various exceptions related to writing to a file.\n   */\n  static async writeFile(fileName, text) {\n    if (fileName == '') {\n      process.stdout.write(text);\n    } else if (fileName === null) {\n    } else {\n      await new Promise((resolve, reject) => {\n        fs.writeFile(fileName, text, 'utf8', (err) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(true);\n          }\n        });\n      }).then((data) => {\n        return data;\n      });\n    }\n  }\n\n  /**\n   * Read text from a file.\n   *\n   * @param {string|File|null} fileName\n   * The name of the file to read from.\n   *\n   * Read from stdin if this is the empty string.\n   *\n   * @return {string}\n   * The text that was read.\n   *\n   * @throws {Error}\n   * Various exceptions related to reading from a file.\n   */\n  static async readFile(fileName) {\n    let text = '';\n    //console.debug(fs);\n    if (fileName == '') {\n      text = fs.readFileSync(0, 'utf8');\n    } else if (fileName === null) {\n    } else {\n      let readPromise = new Promise(async (resolve, reject) => {\n        fs.readFile(fileName, 'utf8', (err, data) => {\n          if (err) {\n            reject(err);\n          }\n          resolve(data);\n        });\n      });\n      text = await readPromise;\n      //await console.debug('readFile text set with await');\n      /*\n      .then(data => {\n        text = data;\n        console.debug('setting readFile text with then');\n        //console.debug('readFile text=\"'+text+'\"<<<');\n      });\n      */\n    }\n    //await console.debug('returning readFile text');\n    return text;\n  }\n\n  /**\n   * Read text from a file and parse it as JSON data.\n   *\n   * @param {string|File|null} fileName\n   * The name of the file to read from.\n   *\n   * Read from stdin if this is the empty string.\n   *\n   * @return {*}\n   * The data value parsed from JSON text that was read.\n   *\n   * @throws {Error}\n   * Various exceptions related to reading from a file and parsing it\n   * as JSON data.\n   */\n  static async readJson(fileName) {\n    const text = await WithJson.readFile(fileName);\n    //console.debug('readJson text='+Meek._show(text));\n    if (text == '') {\n      return {};\n    }\n    const jsonResult = JSON.parse(text);\n    return jsonResult;\n  }\n\n  /**\n   * Optionally read text from a file and parse it as JSON data.\n   *\n   * If the file does not exist return an empty JSON object.\n   *\n   * @param {string} fileName\n   * The name of the file to read from, if it exists\n   *\n   * @return {*}\n   * The data value parsed from JSON text that was read,\n   * or an empty data object if the file does not exist.\n   *\n   * @throws {Error}\n   * Various exceptions related to reading from a file and parsing it\n   * as JSON data.\n   */\n  static async readOptionalJson(fileName) {\n    const result = {};\n    if (typeof fileName == 'string' && fileName != '' &&\n          fs.existsSync(fileName)) {\n      const fileResult = await WithJson.readJson(fileName);\n      Object.assign(result, fileResult);\n    }\n    return result;\n  }\n\n  /**\n   * From JSON files, read the tabulation specification.\n   *\n   * The order of building test specs, with later values overriding earlier\n   * values:\n   *\n   * - hard-coded default values\n   * - values in the defaultJson file\n   * - values from the included files in the order listed\n   * - values from the inputJson file\n   *\n   * However, a list of include files is only taken from the primary JSON\n   * file.\n   *\n   * @param {string|File|null} inputJson\n   * The same as for the inputJson parameter for this module's\n   * `tabulate()` function.\n   *\n   * @param {string|File|null} defaultJson\n   * The same as for the defaultJson parameter for this module's\n   * `tabulate()` function.\n   *\n   * @return {Object}\n   * A data object with the merged tabulation specification.\n   *\n   * @throws {Error}\n   * Various exceptions may be thrown which are related to reading JSON\n   * files.\n   */\n  static async readTabulationSpec(inputJson, defaultJson) {\n    const tabulationSpec = {\n          'description': 'Test description not provided.',\n          'nbrSeatsToFill': 0,\n          'candidates': '',\n          'ballots': [],\n          'maxRankingLevels': 0,\n          'tieBreaker': '',\n          'options': {},\n          'elected': '',\n          'statusCodes': [],\n          'tally': {},\n          'excluded': [],\n          'protected': [],\n          };\n    if (defaultJson !== null && defaultJson !== undefined &&\n          !(defaultJson == '' && inputJson == '')) {\n      const defaultSpec = await WithJson.readOptionalJson(defaultJson);\n      Object.assign(tabulationSpec, defaultSpec);\n    }\n    /*\n    */\n    const primarySpec = await WithJson.readJson(inputJson);\n    //console.debug('primarySpec='+Meek._show(primarySpec));\n    let includeList = [];\n    if ('include' in primarySpec) {\n      includeList = primarySpec['include'];\n    }\n    //console.debug('includeList='+Meek._show(includeList));\n    //await includeList.forEach(async (includeInputJson) => {\n    for (let iix in includeList) {\n      const includeInputJson = includeList[iix];\n      //console.debug('iix='+iix+' includeInputJson='+includeInputJson);\n      const includeSpec = await WithJson.readJson(includeInputJson);\n      Object.assign(tabulationSpec, includeSpec);\n    }  //);\n    /*\n    */\n    Object.assign(tabulationSpec, primarySpec);\n    return tabulationSpec;\n  }\n\n  /**\n   * Tabulate using command-line argument JSON file names\n   *\n   * First check whether the module appears to be running under Node,\n   * so that Node's `process.argv` array can be used to retrieve\n   * the command line arguments.\n   */\n  static cliTabulate() {\n    if (process && process.argv &&\n          Array.isArray(process.argv) &&\n      process.argv.length >= 2) {\n      if (process.argv.length > 3) {\n        WithJson.tabulate(process.argv[2], process.argv[3]);\n      } else if (process.argv.length > 2) {\n        if (process.argv[2] === '--version') {\n          process.stdout.write('Version ' + K.VERSION_STRING + '\\n');\n        } else {\n          WithJson.tabulate(process.argv[2], '');\n        }\n      }\n    }\n  }\n\n}\n\nexport default WithJson;\n\n/* Check whether this module is the top level module running in Node,\n * and if so, do a JSON file-based tabulation\n * using the command-line arguments.\n */\nif (require && require.main && module &&\n      require.main === module &&\n      process && process.argv &&\n      Array.isArray(process.argv) && process.argv.length >= 2) {\n  WithJson.cliTabulate();\n}\n\n",
    "static": true,
    "longname": "/home/circ/devel/rcv/meeks-prf-js-github/src/with_json.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 462,
    "kind": "variable",
    "name": "fsp",
    "memberof": "src/with_json.js",
    "static": true,
    "longname": "src/with_json.js~fsp",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/with_json.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 463,
    "kind": "variable",
    "name": "D9",
    "memberof": "src/with_json.js",
    "static": true,
    "longname": "src/with_json.js~D9",
    "access": "public",
    "export": false,
    "importPath": "meeks-prf-js/src/with_json.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 464,
    "kind": "class",
    "name": "WithJson",
    "memberof": "src/with_json.js",
    "static": true,
    "longname": "src/with_json.js~WithJson",
    "access": "public",
    "export": true,
    "importPath": "meeks-prf-js/src/with_json.js",
    "importStyle": "WithJson",
    "description": "A class with static functions for tabulating with JSON files.",
    "lineNumber": 27,
    "interface": false
  },
  {
    "__docId__": 465,
    "kind": "method",
    "name": "tabulate",
    "memberof": "src/with_json.js~WithJson",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/with_json.js~WithJson.tabulate",
    "access": "public",
    "description": "Tabulate an Meek contest using JSON files for input and output.\n\nThis facilitates doing file-based tabulations from the command line.",
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "File",
          "null"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "inputJson",
        "description": "A string name of a file or an opened file that is read to get a\n  JSON specification of the tabulation to be performed.\n  If the value is an empty string, standard input is read.\n  If the value is null, nothing is read.\n\n  The JSON specification should be a JSON object with names that\n  correspond to the parameters of `Meek.Tabulation()`\n  initialization.\n\n  Additional names may be specified.\n  Some that are recognized include:\n\n- 'description'\n\n   A description of the contest being tabulated.\n\n- 'include'\n\n  An array of additional input JSON file names that are read.\n  The name and value pairs in an included file are subject to being\n  overridden by subsequent file names in the array of included file\n  names and also, ultimately, by contents of the inputJson file.\n\n  Files can only be included by the inputJSON file.\n  Any include value from an included file is ignored."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "File",
          "null"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "outputJson",
        "description": "A string name of a file or an opened file that is written to with a\n  JSON specification of the tabulation results.\n  If the value is an empty string, results are written to standard\n  output.\n  If the value is null, nothing is written.\n  The JSON specification of the tabulation result is a JSON object\n  with the following names:\n\n- 'elected'\n\n    An array of winners, corresponding to the first value returned by\n    Meek.Tabulation().tabulate().\n\n- 'status'\n\n    An array of status values, each expressed as an array,\n    corresponding to the values of the second value returned by\n    `Meek.Tabulation().tabulate()`.\n    The status values are listed in the following order:  candidate,\n    status, nbrRound, votes, keepValue, and destiny.\n    The destiny value is omitted if it is 'normal'.\n    Votes and keepValues are expressed as JSON numbers.\n\n- 'tally'\n\n    An object of tally values, corresponding to the third value\n    returned by `Meek.Tabulation().tabulate()`.\n\n- 'description'\n\n    A string value of the input 'description' value, if a non-empty\n    description value string was provided.\n    Otherwise, this name is not included in the JSON output."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "File",
          "null"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "defaultJson",
        "description": "A str name of a file or an opened file that is read to provide\n  default values for inputJson specification before that file is\n  read.\n  If the value is an empty string, standard input is read.\n  If the value is null, no attempt to read defaults is made.\n  If both this value and the inputJson value are empty strings,\n  this value is treated as if it were null.\n\n  The JSON in the file should be a JSON object with any of the same\n  names and values that could be used by the inputJSON file.\n  The values in this file are overridden by corresponding values\n  in the inputJSON file and its include files.\n\n  The include name is recognized from this file,\n  but its value may be overridden by an include value\n  specified in the inputJson file."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "A two-element array consisting of the results object returned by the\n`Meek.Tabulation().tabulate()` function,\nand a data object with the input values built from inputJson and\ndefaultJson files and their include files."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "The same as the `Meek.Tabulation().tabulate()` method,\nplus other exceptions that might be related to accessing files to\nbuild the tabulation specification or to store its results."
      }
    ]
  },
  {
    "__docId__": 466,
    "kind": "method",
    "name": "resultsToJsonString",
    "memberof": "src/with_json.js~WithJson",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/with_json.js~WithJson.resultsToJsonString",
    "access": "public",
    "description": "Convert tabulation results to a JSON string.",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "Results"
        ],
        "spread": false,
        "optional": false,
        "name": "results",
        "description": "The results returned by the `Meek.Tabulation.tabulate()` function."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "null",
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": "A string that is that describes the tabulation.\n  This is typically supplied from the tabulation's input\n  specification or from the value returned by this module's\n  `tabulate()` function.\n  Values of null and false may be supplied to indicate the lack\n  of a description."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A JSON string which represents the function arguments."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "This can raise various exceptions if the function arguments are not\nof the anticipated structure."
      }
    ]
  },
  {
    "__docId__": 467,
    "kind": "method",
    "name": "buildTabulateArgs",
    "memberof": "src/with_json.js~WithJson",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/with_json.js~WithJson.buildTabulateArgs",
    "access": "public",
    "description": "From JSON files, build tabulation args and specification.",
    "lineNumber": 205,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "File",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "inputJson",
        "description": "The same as for the inputJson parameter for this module's\n`tabulate()` function."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "File",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultJson",
        "description": "The same as for the defaultJson parameter for this module's\n`tabulate()` function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "An array with tw values:\n\n+ An array of tabulation args that can be passed to\n    `Meek.Tabulation().tabulate()`\n\n+ A data object with the aggregated input for a Meek tabulation.\n  Additional keys and values may be ignored or used only for testing."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Various exceptions may be thrown which are related to reading JSON\nfiles."
      }
    ]
  },
  {
    "__docId__": 468,
    "kind": "method",
    "name": "writeFile",
    "memberof": "src/with_json.js~WithJson",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/with_json.js~WithJson.writeFile",
    "access": "public",
    "description": "Write text to a file.",
    "lineNumber": 242,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "File",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "fileName",
        "description": "The name of the file to write to.\n\nWrite to stdout if this is the empty string."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text to be written."
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Various exceptions related to writing to a file."
      }
    ],
    "return": null
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "readFile",
    "memberof": "src/with_json.js~WithJson",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/with_json.js~WithJson.readFile",
    "access": "public",
    "description": "Read text from a file.",
    "lineNumber": 275,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "File",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "fileName",
        "description": "The name of the file to read from.\n\nRead from stdin if this is the empty string."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The text that was read."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Various exceptions related to reading from a file."
      }
    ]
  },
  {
    "__docId__": 470,
    "kind": "method",
    "name": "readJson",
    "memberof": "src/with_json.js~WithJson",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/with_json.js~WithJson.readJson",
    "access": "public",
    "description": "Read text from a file and parse it as JSON data.",
    "lineNumber": 319,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "File",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "fileName",
        "description": "The name of the file to read from.\n\nRead from stdin if this is the empty string."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The data value parsed from JSON text that was read."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Various exceptions related to reading from a file and parsing it\nas JSON data."
      }
    ]
  },
  {
    "__docId__": 471,
    "kind": "method",
    "name": "readOptionalJson",
    "memberof": "src/with_json.js~WithJson",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/with_json.js~WithJson.readOptionalJson",
    "access": "public",
    "description": "Optionally read text from a file and parse it as JSON data.\n\nIf the file does not exist return an empty JSON object.",
    "lineNumber": 345,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fileName",
        "description": "The name of the file to read from, if it exists"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The data value parsed from JSON text that was read,\nor an empty data object if the file does not exist."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Various exceptions related to reading from a file and parsing it\nas JSON data."
      }
    ]
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "readTabulationSpec",
    "memberof": "src/with_json.js~WithJson",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/with_json.js~WithJson.readTabulationSpec",
    "access": "public",
    "description": "From JSON files, read the tabulation specification.\n\nThe order of building test specs, with later values overriding earlier\nvalues:\n\n- hard-coded default values\n- values in the defaultJson file\n- values from the included files in the order listed\n- values from the inputJson file\n\nHowever, a list of include files is only taken from the primary JSON\nfile.",
    "lineNumber": 384,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "File",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "inputJson",
        "description": "The same as for the inputJson parameter for this module's\n`tabulate()` function."
      },
      {
        "nullable": null,
        "types": [
          "string",
          "File",
          "null"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultJson",
        "description": "The same as for the defaultJson parameter for this module's\n`tabulate()` function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A data object with the merged tabulation specification."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Various exceptions may be thrown which are related to reading JSON\nfiles."
      }
    ]
  },
  {
    "__docId__": 473,
    "kind": "method",
    "name": "cliTabulate",
    "memberof": "src/with_json.js~WithJson",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/with_json.js~WithJson.cliTabulate",
    "access": "public",
    "description": "Tabulate using command-line argument JSON file names\n\nFirst check whether the module appears to be running under Node,\nso that Node's `process.argv` array can be used to retrieve\nthe command line arguments.",
    "lineNumber": 433,
    "params": [],
    "return": null
  },
  {
    "kind": "index",
    "content": "Meeks-PRF-js\n============\n\nCount votes for a Meek's method RCV / STV election contest using Javascript\nsoftware.\n\n# Table of Contents\n\n  * [Quick start](#quick-start)\n  * [Introduction](#introduction)\n  * [Version](#version)\n  * [Repository structure](#repository-structure)\n  * [Use examples](#use-examples)\n  * [Testing](#testing)\n  * [Limitations](#limitations)\n  * [Extensions](#extensions)\n  * [Other commands](#other-commands)\n  * [Licensing](#licensing)\n\n\n## Quick start\n\nFor use with Node, this package can be installed with npm,\nby creating a new directory / folder, for example __`meeks-prf`__,\nand then from the command line, changing to that directory and running\nthe command:\n\n    npm install meeks-prf-js\n\nYou can then tabulate a contest with the command:\n\n    node . input.json results.json\n\nwhere the file __`input.json`__ has the contest input data and\n__`results.json`__ is the output file to which results will be written.\nA sample input file is provided at __`./uses/sample-01-in.json`__.\n\nMore generally, if the current directory is not the project directory,\nyou can use the command:\n\n    node path-to/meeks-prf input.json results.json\n\nOther ways of using the package are described below.\n\n\n## Introduction\n\nUse this Javascript package to count votes for a\nranked choice voting (RCV) /\nsingle transferable vote (STV) election contest\nusing the Proportional Representation Foundation's\n [reference rule for Meek's method](\nhttps://prfound.org/resources/reference/reference-meek-rule/) and\nvarious extension to that rule.\n\nThe Javascript programs in this package can be directly used\nin modern browsers.\nThe package also includes versions of those programs that have been\nconverted for use in Node.\nUse in other browsers requires additional support not included in\nthis package.\n\nMeek's method is a form of RCV / STV that supports proportional\nrepresentation in multi-winner elections.\nIt can provide a fairer and more comprehensive transfer of surplus\nthan other forms of STV,\nincluding variations of the weighted inclusive Gregory method (WIGM)\nwhich also involves transfers of surplus as fractions of a vote.\nAny form of STV tends to provide fairer results than other\ntraditional election methods\nand greatly reduces the practical opportunities for tactical\nvoting.\nMeek's method tends to accomplish these goals\nbetter than other forms of STV.\nHowever the trade-off is that Meek's method is more computationally\nintensive,\nto the extent that it is typically not practical to count votes with\nMeek's method without the assistance of a computer for contests with\nmore than a few winners.\n\nThe reference rule published by the Proportional Representation\nFoundation is particularly significant because it ensures that\nindependent but conforming implementations will always produce the same\nresult, provided that any ties are consistently resolved.\n\n\n## Version\n\nThis is version 1.0.0 of the Meeks-PRF-js project.\nIt has stable, well tested functionality.\nUnlike earlier versions, this version is intended for general use.\nWith this version, discrepancies about the 'type_of_altdefs' option\nwere resolved for its default value to be 'if_no_new_electeds'.\nThis version includes functionality that is similar to v3.0.0 of\n[a related Python project](\nhttps://bitbucket.org/David-Cary/meeks-prfound/src/master/),\nwith some additional improvements.\n\n\n## Repository structure\n\nThe __`src`__ directory contains the Javascript\nvote counting programs that can be run directly in modern browsers and\nwhich are ES modules.\nThe __`run`__ directory has corresponding programs that can run in\nNode v10 and later.  The __`tests`__ directory contains\ntest programs and data.  The __`docs`__ directory has public API\ndocumentation as HTML.\n\nThe vote counting tabulation algorithm can be invoked with the\n__`Meek.tabulate()`__ function, where __`Meek`__ is the imported /\nrequired name\nfor the __`meek.js`__ file from either the __`src`__ or __`run`__\ndirectories.  Those files contain additional documentation\nabout the __`tabulate()`__ function.\n\n\n## Use Examples\n\nThree ways to run a Meek's method tabulation are:\n\n  * [Caller gives data directly](#markdown-header-caller-gives-data-directly)\n  * [Caller gives data in JSON files](#markdown-header-caller-gives-data-in-json-files)\n  * [Command line using JSON files](#markdown-header-command-line-using-json-files)\n\n### Caller gives data directly\n\nAfter importing / requiring __`meek.js`__, for example with:\n\n    import * as Meek from 'path-to/src/meek.js';\n\ntabulation of RCV votes can be accomplished by calling the\n__`Meek.tabulate()`__ function, which is defined with the signature:\n\n    function tabulate(nbrSeatsToFill, candidates, ballots,\n          maxRankingLevels, tieBreaker, excluded, protectedzz,\n          options={}, progressCallback=null):\n\nFor example:\n\n    const results = Meeks.tabulate(1, \" A B C\", [\n          [4, ' A B C'],\n          [3, ' B A C'],\n          [2, ' C B A']\n          ],\n          3, ' C A B', '', '', {}, null);\n\nwill tabulate a contest that:\n\n  * Produces one winner.\n  * Has three candidates with identifiers A, B, and C.\n  * Has nine ballots, two of which rank C first, B second, and A third.\n  * Allows a voter to rank up to three candidates.\n  * Uses a tie breaker ranking for resolving ties, picking for\n    elimination the earliest ranked candidate of any tied candidates; so\n    C is picked for elimination if tied with A or B (or both) and A is\n    picked for elimination if tied only with B.\n  * No candidates are excluded from the tabulation.\n  * No candidates are protected from defeat and thus assured of being\n    elected.\n  * Does not specify any special tabulation options.\n  * Does not use a progress callback function.\n\nThe above example uses a short cut for specifying a sequence of strings\nby writing them in a single, delimiter-separated string with the first\ncharacter specifying what the delimiter is.\n\nThe result of the function is a data object that includes the following\nthree properties:\n\n  * 'elected', a set of winners.\n  * 'statuses', a data object showing the status of each candidate.\n    * Whether the candidate was elected or defeated.\n    * The round in which the candidate was elected or defeated.\n    * The candidate's vote total when elected or defeated.\n    * The candidate's keep factor for the last tabulation iteration.\n    * Whether the candidate was pre-designated as being excluded or\n      protected.\n  * 'tally', a data object showing the round-by-round vote totals and\n    other statistics of the tabulation.\n\nFor the example mentioned above, the results would be as if the\nfollowing assignments had occurred:\n\n    results.elected = new Set(['B'])\n    results.statuses = {\n          'A': Status('A', 'defeated', 2, D(4.0), D(1.0)),\n          'B': Status('B', 'elected',  2, D(5.0), D(1.0)),\n          'C': Status('C', 'defeated', 1, D(2.0), D(0.0))\n          }\n    results.tally = {\n          'A': [D(4.0), D(4.0)],\n          'B': [D(3.0), D(5.0)],\n          'C': [D(2.0),],\n          ':Votes for candidates': [D(9.0), D(9.0)],\n          ':Overvotes': [D(0.0), D(0.0)],\n          ':Abstentions': [D(0.0), D(0.0)],\n          ':Other exhausted': [D(0.0), D(0.0)],\n          ':Total votes': [D(0.0), D(0.0)],\n          ':Quota': [D(4.500000001), D(4.500000001)],\n          ':Total surplus': [D(0.0), D(0.499999999)],\n          ':Iterations': [1, 1]\n          }\n\nwhere __`D`__ is an alias for the __`Decimal9`__ class, which is\nused internally to represent numbers of votes.\n\n### Caller gives data in JSON files\n\nAn alternative way to run a tabulation is with the\n__`WithJson.tabulate()`__ function, where __`WithJson`__ is the name for\nthe default export from the __`with_json.js`__ file.\nThat function reads the\ntabulation input from a named JSON file and writes the results in a JSON\nformat to a file.\n\nFor example, the previous example can be tabulated using a file named\n__`example.json`__ with the following content:\n\n    {\n      \"description\": \"An example RCV contest\"\n      ,\"nbrSeatsToFill\": 1\n      ,\"candidates\": \" A B C\"\n      ,\"ballots\": [\n        [4, \" A B C\"],\n        [3, \" B A C\"],\n        [2, \" C B A\"]\n        ]\n      ,\"maxRankingLevels\": 3\n      ,\"tie_breaker\": \" C A B\"\n      ,\"excluded\": \"\"\n      ,\"protected\": \"\"\n      ,\"options\": {}\n    }\n\nand then executing the Javascript statement:\n\n    async [const results, tab_spec] = WithJson.tabulate(\n          'example.json', 'example-results.json')\n\nwhich writes a file __`example-results.json`__ with the following\ncontent:\n\n    {\n      \"description\": \"An example RCV contest\"\n      ,\"elected\": [\"B\"]\n      ,\"status\": [\n        [\"B\", \"elected\", 2, 5.0, 1.0],\n        [\"A\", \"defeated\", 2, 4.0, 1.0],\n        [\"C\", \"defeated\", 1, 2.0, 0.0]\n      ]\n      ,\"tally\": {\n        \"B\": [3.0, 5.0],\n        \"A\": [4.0, 4.0],\n        \"C\": [2.0],\n        \":Votes for candidates\": [9.0, 9.0],\n        \":Overvotes\": [0.0, 0.0],\n        \":Abstentions\": [0.0, 0.0],\n        \":Other exhausted\": [0.0, 0.0],\n        \":Total votes\": [9.0, 9.0],\n        \":Quota\": [4.500000001, 4.500000001],\n        \":Total surplus\": [0.0, 0.499999999],\n        \":Iterations\": [1, 1]\n      }\n    }\n\nIf the second argument is omitted or set to the empty string, the JSON\noutput is printed to __`stdout`__.\n\nThe __`results`__ return value is the same as returned by the\n__`Meek.tabulate()`__ function.  The second return value is a data\nobject that documents the merged tabulation input specifications.  It\nreflects what was found in the input JSON file and any included files.\nThe input JSON file can have an 'include' property with a value that is\na list of JSON file names from which other property/values are included,\nbut which can be overridden by corresponding property/values in the\nprimary input JSON file.\n\nIn the above example, the lines indicating that there are no excluded\ncandidates and no protected candidates could be omitted, since those are\nthe default values for JSON files.\n\n### Command line using JSON files\n\nA third way to run an RCV tabulation is from the command line using\nNode. This was mentioned in the quick start section.\nThe previous example could be run as:\n\n    node path-to/run example.json example-results.json\n\nIf the __`example-results.json`__ argument is omitted or given as an\nempty string, the JSON results are printed to __`stdout`__.\n\nNote that the second command line value, the one following 'node',\ncan name either the project directory or its __`run`__ directory.\n\n\n## Testing\n\nTests can be run using Jest.  When this package is installed using\nnpm, Jest is also installed as one of its development dependencies.\n\nTo run tests, change the working directory to the\n__`tests`__ directory and run the command:\n\n    npm run test\n\nThat should run 21 test suites with a total of 559 tests,\nall without errors, typically in less than 15 seconds,\nthough speeds can vary depending on the type of computer being used.\n\nThere are two kinds of tests in the __`tests`__ directory tree:\n\n  * more traditional unit tests specified in\n    __`tests/unit/*test.js`__\n    files and which are typically dependent on the internal design and\n    implementation details of programs in the __`src`__ directory.\n\n  * tests with inputs and expected results that are specified in JSON\n    files and which are designed to be typically applicable to any\n    conforming implementation of the reference rule, except for those\n    tests that apply to extensions to the reference rule.\n\nThe JSON-based tests are typically run from a \\*test.js file in the same\ndirectory as the JSON files specifying the test.  A group of related\ntests are specified in similarly named JSON files, sometimes sharing a\nbase JSON file for common data.  For example, files __`abc-007-1.json`__\nand __`abc-007-2.json`__ might specify two related tests and reference\n(include and possibly override) a common __`abc-007-base.json`__ file.\n\nThe JSON files specify a JSON object which is convertible to a\nJavascript data object and which includes a __`\"description\"`__\nproperty.\n\nGlobal parameters for the JSON-based test cases may be set in the file\n__`tests/all-tests-spec.json`__.\n\n\n## Limitations\n\nThis implementation focuses on the core vote counting algorithms and\ndoes not offer all of the functionality that might be expected to\nsupport tabulation of an election. For example, it does not directly\nsupply support for end-user report formats.\n\nNeither the programs nor the test cases enforce specific maximum\nlimitations on the sizes of input to the STV tabulation.  Sizes of\ncontests that can be tabulated generally depend on the amount of\nresources, especially memory, available to the software.\n\nThis package can reliably handle large numeric values up to\n9,000,100 to nine decimal places of accuracy. The program will not\naccept more than that many ballots as input, even if they have been\npre-summarized into fewer ballot groups.\n\nNumeric values much larger than that start to lose precision when\nconverting to or from native Javascript number values and to or\nfrom JSON number values.\n\nThis implementation can use ballot trees to more efficiently process\nlarge numbers of ballots with larger numbers of rankings.  However this\nversion does not attempt to strictly minimize the resources that are\nused or to manage a time vs. space tradeoff.\n\nAs an example of what this program can accomplish,\nit has tabulated in a desktop browser\nnon-trival contests with half a million individual ballots,\nnone of them pre-summarized into multi-ballot ballot groups,\neach ballot ranking 100 candidates,\nand the contest electing 20 winners.\nSuch tabulations complete within a few minutes.\nDue to special cases that result in persistently slow convergence rates,\nit is possible that smaller contests could take extraordinarily long\nto tabulate.\n\nIn order to focus on issues of core functionality, all test data has been\nlimited to using ASCII characters.\n\n\n## Extensions\n\nThis implementation includes several extensions to the reference rule.\nThese include::\n\n* Handling anomalous ranking patterns.\n* Reporting some exhausted votes as abstentions.\n* An option to always count votes for at least one round.\n* An option for whether or in which rounds to check for\n  perform alternative defeats\n  (a.k.a. multiple defeats).\n* An option for when in a round to check for\n  performing alternative defeats.\n* Support for vacancy re-tabulations,\n  including the ability to designate some candidates as being excluded\n  (a.k.a. withdrawn)\n  and others as being protected\n  from defeat and thus be assured of being elected.\n* An option for helping tabulations run faster by internally\n  representing the rankings of ballots and ballot groups in a\n  ballot tree.\n\nThe rest of this section briefly describes each of these extensions.\nThe extensions are also described\nin the HTML-based documentation of the public API.\n\nThe anomalous ranking patterns that are allowed include::\n\n  * duplicate rankings (ranking the same candidate more than once at\n    different ranking levels)\n  * overvoted rankings (ranking two or more different candidates at\n    the same ranking level on a ballot)\n\nThe reference rule implicitly assumes that these anomalous ranking\npatterns do not occur in the ballots submitted for tabulation.  See the\ndocumentation for the __`Meek.Tabulation`__ class for the\nspecifics of how these anomalous ranking patterns are handled.\n\nThere is an option, turned on by default, that counts votes for the\nfirst round even if doing so is not required to determine all winners\nbecause there is not an excess of hopeful candidates.  The reference\nrule can be strictly followed in this regard by using the option\n`{\"always_count_votes\": false}` in Javascript or JSON.\nThe value of this option has no effect if\nthere is an excess of hopeful candidates and as a result, counting votes\nfor one or more rounds is required to determine winners.\n\nThere are two options that control whether and how alternative defeats\nare performed.\nAlternative defeats can involve defeating one or more candidates at a\npoint in the tabulation when no candidates or only one candidate would\nbe defeated.\nAlternative defeats are also known as multiple defeats, batch defeats,\nand deferred surplus distribution.\nBy default, alternative defeats are not performed.\n\nAlternative defeats can be activated\nwith the __`alternative_defeats`__ option,\nsetting it to a value of \"Y\" value\nor activating it only for certain rounds\nwith a sequence of \"Y\"s and \"N\"s.\n\nThere is also an option, __`\"type_of_altdefs\"`__,\nthat controls the point in the tabulation algorithm\nat which the alternative defeats is checked.\nIn order for this option to have an effect on a round,\nthe __`\"alternative_defeats\"`__ option\nmust be a __`\"Y\"`__ for the round.\nIn addition to doing the check at the end of step B.2.e,\nas allowed by the reference rule,\nthere are also options to check in the middle of step B.2.e,\nif no candidates were elected in the iteration,\nor to check at the beginning of step B.3,\njust before doing end-of-round single defeats.\n\nThere is support to exclude and protect candidates.  An excluded\ncandidate is not eligible to be elected or receive votes and is marked\nas defeated before the first round of tabulation.  The reference rule\nuses the term \"withdrawn\" rather than \"excluded\".  A protected candidate\nis assured of being elected.\n\nThe ability to exclude and protect candidates can be useful when using\nthe ballots of a previous election to fill one or more vacancies.  For a\ntypical use case, exclude all previous candidates who are unwilling or\notherwise not eligible to fill the vacancies, protect all candidates\nthat will continue to serve, set the number of seats to fill to the sum\nof the number of protected candidates plus the number of vacancies to\nfill, and then retabulate the contest.\n\nWhen there are protected candidates, there are separate quotas for\nprotected candidates and unprotected candidates in order to ensure that\nan excess of unprotected candidates will not be elected.\n\nIn order to help tabulations run faster for larger constests, there are\noptions to use a ballot tree to represent ballots internally.\nIf used, the ballot tree can be either static or dynamic.\n\n\n## Other commands\n\nOther development commands defined for this project include:\n\n+ `npm run build`\n\n  Will re-build the node-compatible versions of the programs in the\n  __`run`__ directory.\n\n+ `npm run build-one -- src/<file-name.js>`\n\n  Will re-build in the __`run`__ directory\n  a single node-compatible version of the file(s) listed at the \n  end of the command.\n\n* `npm run build-docs`\n\n  Will re-build the HTML-based documentation of the public API\n  that is stored in the __`docs`__ directory.\n\n* `node path-to/<package-directory> --version`\n\n  or\n\n  `node path-to/run --version\n\n  Will print the version number\n  which consists of a major, minor, and patch version number\n  using semantic versioning.\n\n\n## Licensing\n\nThis project is licensed under the Apache License, Version 2.0 (the\n\"License\"); you may not use contents of this repository except in\ncompliance with the License.  A copy of the License is in the LICENSE\nfile and may also be obtained at:\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nCopyright 2016-2019 David Cary; licensed under Apache License, Version 2.0\n",
    "longname": "/home/circ/devel/rcv/meeks-prf-js-github/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"meeks-prf-js\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Count votes for a Meek's method RCV / STV election contest using the prfound.org reference rule, with optional extensions.\",\n  \"main\": \"/run/meek.js\",\n  \"directories\": {\n    \"test\": \"tests\"\n  },\n  \"files\": [\n    \"/src\",\n    \"/run\",\n    \"/index.js\"\n  ],\n  \"dependencies\": {\n    \"big-integer\": \"^1.6.44\"\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.5.5\",\n    \"@babel/core\": \"^7.4.5\",\n    \"@babel/preset-env\": \"^7.4.5\",\n    \"babel-jest\": \"^24.8.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"jest\": \"^24.8.0\"\n  },\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"build-docs\": \"esdoc\",\n    \"build\": \"babel --out-dir run src\",\n    \"build-one\": \"babel --out-dir run --\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/DavidCary/Meeks-PRF-js\"\n  },\n  \"keywords\": [\n    \"Meek\",\n    \"Meeks\",\n    \"STV\",\n    \"tabulate\",\n    \"RCV\"\n  ],\n  \"author\": \"David Cary\",\n  \"license\": \"Apache-2.0\"\n}\n",
    "longname": "/home/circ/devel/rcv/meeks-prf-js-github/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]